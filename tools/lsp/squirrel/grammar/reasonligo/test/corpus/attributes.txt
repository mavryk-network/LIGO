=========
sum
=========

type foo = [@boom] | True | False

----

(source_file
  (type_decl
    (TypeName)
    (sum_type
      (Attr)
      (variant (ConstrName))
      (variant (ConstrName))
    )
  )
)


=========
constr
=========

type foo = [@boom] True | False

----

(source_file
  (type_decl
    (TypeName)
    (sum_type
      (variant (Attr) (ConstrName))
      (variant (ConstrName))
    )
  )
)


=========
constr with bar
=========

type foo = | [@boom] True | False

----

(source_file
  (type_decl
    (TypeName)
    (sum_type
      (variant (Attr) (ConstrName))
      (variant (ConstrName))
    )
  )
)


=========
record
=========

type person = [@layout:comb] {
  name: string,
}

----

(source_file
  (type_decl
    (TypeName)
    (record_type
      (Attr)
      (field_decl (FieldName) (TypeName))
    )
  )
)


=========
field twice
=========

type person = {
  [@foo][@bar] name: string,
}

----

(source_file
  (type_decl
    (TypeName)
    (record_type
      (field_decl (Attr) (Attr) (FieldName) (TypeName))
    )
  )
)


=========
let decl
=========

[@annot] let x : int = 1

---

(source_file
  (let_decl
    (Attr)
    (var_pattern (NameDecl))
    (TypeName)
    (Int)
  )
)


=========
let decl twice
=========

[@annot1][@annot2] let x : int = 1

---

(source_file
  (let_decl
    (Attr) (Attr)
    (var_pattern (NameDecl))
    (TypeName)
    (Int)
  )
)


=========
let expr
=========

let bar = (b : int) : int => {
  [@foo][@bar]
  let test = 2;
  test;
};


---

(source_file
  (let_decl
    (var_pattern (NameDecl))
    (lambda
      (fun_arg (var_pattern (NameDecl)) (TypeName))
      (TypeName)
      (block
        (let_decl
          (Attr) (Attr)
          (var_pattern (NameDecl)) (Int)
        )
        (Name)
      )
    )
  )
)
