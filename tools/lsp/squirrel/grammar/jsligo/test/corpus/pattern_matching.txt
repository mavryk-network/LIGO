=========
pattern-matching: list
=========

let weird_length = (v : list<int>) : int =>
  match(v, list([
    ([] : list<int>) => -1,
    ([hd, ...tl] : list<int>) => 1 + int(length(tl))
  ]));

---

(source_file
  (let_decl
    (var_pattern (Name))
    (fun_expr
      (parameter
        (Name)
        (type_annotation
          (type_ctor_app (TypeName) (TypeName))))
      (type_annotation (TypeName))
      (body
        (match_expr
          (Name)
          (list_case
            (array_literal)
            (type_annotation
              (type_ctor_app (TypeName) (TypeName)))
                (body (Int)))
          (list_case
            (array_literal
              (Name)
              (array_item_rest_expr (Name)))
            (type_annotation
              (type_ctor_app (TypeName) (TypeName)))
            (body
              (binary_operator
                (Int)
                (call_expr
                  (lambda (Name))
                  (arguments
                    (call_expr
                      (lambda (Name))
                      (arguments (Name)))))))))))))

=========
pattern-matching: constructors
=========

let int_of_color = (c : color) : int =>
  match(c, {
    RGB: (rgb : [int,int,int]) => 16 + rgb[2] + rgb[1] * 6 + rgb[0] * 36,
    Gray: (i : int) => 232 + i,
    Default: () => 0 });

---

(source_file
  (let_decl
    (var_pattern (Name))
    (fun_expr
      (parameter
        (Name)
        (type_annotation (TypeName)))
      (type_annotation (TypeName))
      (body
        (match_expr
          (Name)
          (ctor_case
            (ConstrName)
            (ctor_param
              (Name)
              (type_annotation (type_tuple (TypeName) (TypeName) (TypeName))))
            (body
              (binary_operator
                (binary_operator
                  (binary_operator
                    (Int)
                    (projection (Name) (Int)))
                  (binary_operator
                    (projection (Name) (Int))
                    (Int)))
                (binary_operator
                  (projection (Name) (Int))
                  (Int)))))
          (ctor_case
            (ConstrName)
            (ctor_param
              (Name)
              (type_annotation (TypeName)))
            (body
              (binary_operator (Int) (Name))))
          (ctor_case
            (ConstrName)
              (body (Int))))))))