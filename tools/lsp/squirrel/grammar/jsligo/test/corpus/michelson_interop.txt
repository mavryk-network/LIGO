=========
michelson interop
=========

let michelson_add = (n: [nat, nat]): nat =>
  (Michelson`{ UNPAIR ; ADD }` as ((n: [nat, nat]) => nat))(n);

---

(source_file
  (toplevel_binding
    (var_pattern (NameDecl))
    (lambda
      (fun_arg
        (var_pattern (NameDecl))
        (tuple_type (TypeName) (TypeName)))
      (TypeName)
      (apply
        (michelson_interop
          (michelson_code)
          (paren_type
            (fun_type
              (domain (tuple_type (TypeName) (TypeName)))
              (TypeName))))
        (Name)))))

=========
michelson pair
=========

type x_and = michelson_pair<[string, "x", w_and_v, "other"]>;

---

(source_file
  (type_decl
    (TypeName)
      (app_type
        (TypeName)
        (tuple_type
          (TypeName)
          (string_type (String))
          (TypeName)
          (string_type (String))))))

=========
michelson or
=========

type y_or = michelson_or<[unit, "y", x_and, "other"]>;

---

(source_file
  (type_decl
    (TypeName)
      (app_type
        (TypeName)
        (tuple_type
          (TypeName)
          (string_type (String))
          (TypeName)
          (string_type (String))))))
