=========
generic type
=========

type my_typ<A,B,C> =
      ["First", A]
    | ["Second", B]
    | ["Third", C]

---

(source_file
  (type_decl
    (TypeName)
      (type_params (var_type (TypeVariableName)) (var_type (TypeVariableName)) (var_type (TypeVariableName)))
      (sum_type
        (variant (ConstrNameType) (ctor_arguments (TypeName)))
        (variant (ConstrNameType) (ctor_arguments (TypeName)))
        (variant (ConstrNameType) (ctor_arguments (TypeName))))))

=========
generic function
=========

let id : <T>((x : T) => T) = x => x;

---

(source_file
  (toplevel_binding
    (var_pattern (NameDecl))
    (type_params (var_type (TypeVariableName)))
    (paren_type (fun_type (domain (TypeName)) (TypeName)))
    (lambda
      (Name)
      (Name))))

=========
type application
=========

type x_y_z_typ = my_typ<X, yield, Z>

---

(source_file
  (type_decl (TypeName)
    (app_type
      (TypeName) (TypeName) (TypeName) (TypeName))))

=========
nested generic functions
=========

const id : <P>(x : P) => P = (x : P) => {
    const id_1 : <Q>(y : Q) => Q = (y : Q) => {
        return id_2(y);
    }
    return id_1(x);
};

---

(source_file
  (toplevel_binding
    (var_pattern (NameDecl))
    (type_params (var_type (TypeVariableName)))
    (fun_type (domain (TypeName)) (TypeName))
    (lambda
      (fun_arg (var_pattern (NameDecl)) (TypeName))
      (block_statement
        (const_binding (var_pattern (NameDecl))
        (type_params (var_type (TypeVariableName)))
        (fun_type (domain (TypeName)) (TypeName))
        (lambda
          (fun_arg (var_pattern (NameDecl)) (TypeName))
          (block_statement
            (return_statement
              (apply (Name) (Name))))))
        (return_statement
          (apply (Name) (Name)))))))