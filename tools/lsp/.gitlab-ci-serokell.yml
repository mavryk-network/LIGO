# This file contains pipeline configuration used by Serokell at https://gitlab.com/serokell/ligo/ligo

stages:
  - ligo
  - lsp
  - tooling
  - push

default:
  tags: [nix]

# jobs for building and testing LSP
include: '/tools/lsp/.gitlab-ci.yml'

ligo-build:
  stage: ligo
  only: [merge_requests, tooling]
  tags: [nix-with-docker]
  script:
    # generate changelog, it's required for building ligo
    - nix-build nix -A ligo-changelog
    - cp ./result/changelog.txt .
    - chmod u+w ./changelog.txt
    # build intermediate image (Dockerfile declares some build arguments, but we don't need to set any of them)
    - docker build . --target ligo-builder --tag ligo-builder:$CI_JOB_ID
    # build final image
    - docker build . --tag ligo:$CI_JOB_ID
    # extract ligo binary from the image
    - docker create --name ligo-$CI_JOB_ID ligo:$CI_JOB_ID
    - docker cp ligo-$CI_JOB_ID:/root/ligo ./ligo
    - chmod u+w ./ligo
    # pin built images to cache them for future builds; use a distinct tag for
    # "tooling" branch so it won't be overriden by an image from an MR
    - if [[ $CI_COMMIT_REF_NAME == "tooling" ]]; then PINNED_TAG=latest;
      else PINNED_TAG=temp;
      fi
    - docker tag ligo:$CI_JOB_ID ligo:$PINNED_TAG
    - docker tag ligo-builder:$CI_JOB_ID ligo-builder:$PINNED_TAG
  after_script:
    # delete the container and image tags if they were created
    - docker container rm ligo-$CI_JOB_ID || true
    - docker image rm ligo-builder:$CI_JOB_ID || true
    - docker image rm ligo:$CI_JOB_ID || true
  artifacts:
    paths:
      - ligo

lsp-lint:
  stage: lsp
  only: [merge_requests, tooling]
  script:
    - nix-build tools/lsp -A checks.x86_64-linux.lint
    # Nix has some trouble with git so we run it directly from the CI
    - cd tools/lsp
    - bash squirrel/scripts/check-trailing-whitespace.sh

vscode-extension-tests:
  stage: lsp
  only: [merge_requests, tooling]
  script:
    - nix-build tools/lsp -A checks.x86_64-linux.lsp-test

vscode-extension-integration-tests:
  stage: lsp
  only: [merge_requests, tooling]
  script:
    - nix-build tools/lsp -A checks.x86_64-linux.integration-test

vscode-extension-sexp-tests:
  stage: lsp
  only: [merge_requests, tooling]
  script:
    - nix-build tools/lsp -A checks.x86_64-linux.squirrel-sexp-test

vscode-extension-grammar-tests:
  stage: lsp
  only: [merge_requests, tooling]
  script:
    - nix-build tools/lsp -A checks.x86_64-linux.squirrel-grammar-test

vscode-extension-lsp-handler-tests:
  stage: lsp
  only: [merge_requests, tooling]
  script:
    - nix-build tools/lsp -A checks.x86_64-linux.lsp-handlers-test

vscode-extension-linux:
  stage: lsp
  only: [merge_requests]
  script:
    - nix-build tools/lsp -A packages.x86_64-linux.vscode-extension-native

vscode-extension:
  stage: lsp
  only: [tooling, vscode-production]
  script:
    - nix-build tools/lsp -A packages.x86_64-linux.vscode-extension
    - cp -Lr --no-preserve=mode,ownership,timestamps result/*.vsix ligo-extension.vsix
  artifacts:
    paths:
      - ligo-extension.vsix

lsp-docker-image:
  stage: lsp
  only: [merge_requests, tooling]
  script:
    - nix-build tools/lsp -A lsp-docker-image

# publish vscode extension to the extension marketplace
vscode-extension-publish:
  stage: push
  dependencies: [vscode-extension]
  only: [vscode-production]
  when: manual
  script:
    - nix run -f nix/vsce.nix -c vsce publish --packagePath *.vsix -p "$MICROSOFT_MARKETPLACE_TOKEN"

# publish docker image for lsp to the gitlab registry
lsp-docker-image-publish:
  stage: push
  only: [tooling]
  script:
    # set creation date to current date
    - CURRENT_DATE=$(date --iso-8601=seconds)
    - nix-build tools/lsp -A lsp-docker-image --argstr creationDate "$CURRENT_DATE"
    # docker registry credentials provided by gitlab
    - DEST_CREDS="$CI_REGISTRY_USER":"$CI_REGISTRY_PASSWORD"
    # use '--insecury-policy' to disable container signature checking, because we only upload the image
    - nix run -f tools/lsp skopeo -c
        skopeo --insecure-policy copy --dest-creds "$DEST_CREDS" docker-archive:./result docker://"$CI_REGISTRY_IMAGE"/ligo-lsp:latest
