# This file contains pipeline configuration used by Serokell at https://gitlab.com/serokell/ligo/ligo
variables:
  GIT_SUBMODULE_STRATEGY: recursive
  USE_NEWER_NIX: 1
  FLAKE_FLAGS: --accept-flake-config -L

stages:
  - nix
  - ligo
  - debugger
  - lsp
  - push

default:
  tags: [nix]

# jobs for building and testing LSP
include:
  #  ligo-debugger CI
  - '/tools/debugger/.gitlab-ci.yml'

ligo-build:
  stage: ligo
  needs:
    - print-nix-version
  only: [merge_requests, tooling]
  tags: [nix-with-docker]
  script:
    # generate changelog, it's required for building ligo
    - ./scripts/changelog-generation.sh
    # build intermediate image (Dockerfile declares some build arguments, but we don't need to set any of them)
    - docker build . --target ligo-builder --tag ligo-builder:$CI_JOB_ID
    # build final image
    - docker build . --tag ligo:$CI_JOB_ID
    # extract ligo binary from the image
    - docker create --name ligo-$CI_JOB_ID ligo:$CI_JOB_ID
    - docker cp ligo-$CI_JOB_ID:/root/ligo ./ligo
    # Some paths for highlighting checks
    - docker cp ligo-$CI_JOB_ID:/root/highlighting ./highlighting

    - chmod u+w ./ligo

    # pin built images to cache them for future builds; use a distinct tag for
    # "tooling" branch so it won't be overriden by an image from an MR
    - if [[ $CI_COMMIT_REF_NAME == "tooling" ]]; then PINNED_TAG=latest;
      else PINNED_TAG=temp;
      fi
    - docker tag ligo:$CI_JOB_ID ligo:$PINNED_TAG
    - docker tag ligo-builder:$CI_JOB_ID ligo-builder:$PINNED_TAG
  after_script:
    # delete the container and image tags if they were created
    - docker container rm ligo-$CI_JOB_ID || true
    - docker image rm ligo-builder:$CI_JOB_ID || true
    - docker image rm ligo:$CI_JOB_ID || true
  artifacts:
    paths:
      - ligo
      - highlighting

lsp-lint:
  stage: lsp
  needs: []
  only: [merge_requests, tooling]
  script:
    - nix build $FLAKE_FLAGS 'git+file:///'$PWD'?dir=tools/lsp'#checks.x86_64-linux.lint
    # Nix has some trouble with git so we run it directly from the CI
    - cd tools/lsp
    - bash squirrel/scripts/check-trailing-whitespace.sh

print-nix-version:
  stage: nix
  only: [merge_requests, tooling]
  needs: []
  script:
    - nix --version
    - nix-store --version

vscode-extension-tests:
  stage: lsp
  needs: []
  only: [merge_requests, tooling]
  script:
    - nix build $FLAKE_FLAGS 'git+file:///'$PWD'?dir=tools/lsp'#checks.x86_64-linux.lsp-test

vscode-extension-integration-tests:
  stage: lsp
  needs: [ ligo-build ]
  only: [merge_requests, tooling]
  script:
    - git add ./ligo # Ligo binary is needed for this tests
    - nix build $FLAKE_FLAGS 'git+file:///'$PWD'?dir=tools/lsp'#checks.x86_64-linux.integration-test

vscode-extension-sexp-tests:
  stage: lsp
  needs: [ print-nix-version ]
  only: [merge_requests, tooling]
  script:
    - nix build $FLAKE_FLAGS 'git+file:///'$PWD'?dir=tools/lsp'#checks.x86_64-linux.squirrel-sexp-test

vscode-extension-grammar-tests:
  stage: lsp
  needs: [ print-nix-version ]
  only: [merge_requests, tooling]
  script:
    - nix build $FLAKE_FLAGS 'git+file:///'$PWD'?dir=tools/lsp'#checks.x86_64-linux.squirrel-grammar-test

vscode-extension-lsp-handler-tests:
  stage: lsp
  needs: [ ligo-build ]
  only: [merge_requests, tooling]
  script:
    - git add ./ligo # Ligo binary is needed for this tests
    - nix build $FLAKE_FLAGS 'git+file:///'$PWD'?dir=tools/lsp'#checks.x86_64-linux.lsp-handlers-test

vscode-extension-linux:
  stage: nix
  needs: [ print-nix-version ]
  only: [merge_requests]
  script:
    - nix build $FLAKE_FLAGS 'git+file:///'$PWD'?dir=tools/lsp'#vscode-extension-native

vscode-extension:
  stage: nix
  needs: [ print-nix-version ]
  only: [merge_requests, tooling, vscode-production]
  script:
    - nix build $FLAKE_FLAGS 'git+file:///'$PWD'?dir=tools/lsp'#vscode-extension
    - cp -Lr --no-preserve=mode,ownership,timestamps result/*.vsix ligo-extension.vsix
  artifacts:
    paths:
      - ligo-extension.vsix

lsp-docker-image:
  stage: lsp
  needs: [ ligo-build ]
  only: [merge_requests, tooling]
  script:
    - nix build $FLAKE_FLAGS 'git+file:///'$PWD'?dir=tools/lsp'#lsp-docker-image-default

lsp-check-generated-highlighting:
  stage: lsp
  needs: [ ligo-build ]
  only: [merge_requests, tooling]
  script:
    - scripts/diff_dir.sh highlighting/emacs tools/emacs
    - scripts/diff_dir.sh highlighting/vim/ftdetect tools/vim/ligo/start/ligo/ftdetect
    - scripts/diff_dir.sh highlighting/vim/plugin tools/vim/ligo/start/ligo/plugin
    - scripts/diff_dir.sh highlighting/vim/syntax tools/vim/ligo/start/ligo/syntax
    - scripts/diff_dir.sh highlighting/vscode tools/lsp/vscode-plugin/syntaxes
    - scripts/diff_dir.sh highlighting/textmate tools/ligo-syntax-highlighting/textmate

vscode-extension-publish-checks:
  stage: nix
  needs: [ print-nix-version ]
  only: [merge_requests, tooling]
  script:
    - nix flake check ./tools/vsce

# publish vscode extension to the extension marketplace
vscode-extension-publish:
  stage: push
  needs: [vscode-extension]
  only: [vscode-production]
  when: manual
  script:
    - nix develop ./tools/vsce --command vsce publish --packagePath *.vsix # Uses VSCE_PAT env variable as personal access token
    - nix develop ./tools/vsce --command ovsx publish *.vsix # Uses OVSX_PAT env variable as personal access token

# publish docker image for lsp to the gitlab registry
lsp-docker-image-publish:
  stage: push
  only: [tooling]
  script:
    # set creation date to current date
    - CURRENT_DATE=$(date --iso-8601=seconds)
    - nix-build tools/lsp -A lsp-docker-image --argstr creationDate "$CURRENT_DATE"
    # docker registry credentials provided by gitlab
    - DEST_CREDS="$CI_REGISTRY_USER":"$CI_REGISTRY_PASSWORD"
    # use '--insecury-policy' to disable container signature checking, because we only upload the image
    - nix shell 'git+file:///'$PWD'?dir=tools/lsp'#skopeo $FLAKE_FLAGS --command  skopeo --insecure-policy copy --dest-creds "$DEST_CREDS" docker-archive:./result docker://"$CI_REGISTRY_IMAGE"/ligo-lsp:latest
