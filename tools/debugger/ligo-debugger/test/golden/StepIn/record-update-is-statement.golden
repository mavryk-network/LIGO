InterpretSnapshot:
  isStatus: running / faced statement
  isStackFrames:
    [ StackFrame:
      sfName: main
      sfLoc: test/contracts/record-update-is-statement.mligo@11:3-14:16
      sfStack:
        [ StackItem:
          siLigoDesc:
            elem s of { a: int; b: string; c: (False of (unit) | True of (unit)); }
          siValue: Pair (Pair 0 "\"str\"") False ]
    , StackFrame:
      sfName: main
      sfLoc: test/contracts/record-update-is-statement.mligo@1:1-1:1
      sfStack:
        [ StackItem:
          siLigoDesc:
            elem ? of { a: int; b: string; c: (False of (unit) | True of (unit)); }
          siValue: Pair (Pair 0 "\"str\"") False
        , StackItem:
          siLigoDesc: elem ? of unit
          siValue: Unit
        , StackItem:
          siLigoDesc:
            elem main of unit -> { a: int; b: string; c: (False of (unit) | True of (unit));
                    } -> operation list * { a: int;
                                              b: string; c: (False of (unit) | True of (unit));
                                          }
          siValue:
            { DROP;
              LAMBDA
                (pair (pair int string) bool)
                (pair (list operation) (pair int string) bool)
                { {  };
                  { { { UNIT }; SOME };
                    {  };
                    IF_NONE
                      { {  }; {  } }
                      { DROP;
                        {  };
                        {  };
                        { {  };
                          {  };
                          { { {  }; {  }; {  }; PUSH bool True; UPDATE 2 };
                            {  };
                            {  } } } };
                    {  };
                    { {  }; { NIL operation }; PAIR } } } } ] ]
InterpretSnapshot:
  isStatus: running / faced statement
  isStackFrames:
    [ StackFrame:
      sfName: main
      sfLoc: test/contracts/record-update-is-statement.mligo@12:11-12:18
      sfStack:
        [ StackItem:
          siLigoDesc:
            elem s of { a: int; b: string; c: (False of (unit) | True of (unit)); }
          siValue: Pair (Pair 0 "\"str\"") False ]
    , StackFrame:
      sfName: main
      sfLoc: test/contracts/record-update-is-statement.mligo@1:1-1:1
      sfStack:
        [ StackItem:
          siLigoDesc:
            elem ? of { a: int; b: string; c: (False of (unit) | True of (unit)); }
          siValue: Pair (Pair 0 "\"str\"") False
        , StackItem:
          siLigoDesc: elem ? of unit
          siValue: Unit
        , StackItem:
          siLigoDesc:
            elem main of unit -> { a: int; b: string; c: (False of (unit) | True of (unit));
                    } -> operation list * { a: int;
                                              b: string; c: (False of (unit) | True of (unit));
                                          }
          siValue:
            { DROP;
              LAMBDA
                (pair (pair int string) bool)
                (pair (list operation) (pair int string) bool)
                { {  };
                  { { { UNIT }; SOME };
                    {  };
                    IF_NONE
                      { {  }; {  } }
                      { DROP;
                        {  };
                        {  };
                        { {  };
                          {  };
                          { { {  }; {  }; {  }; PUSH bool True; UPDATE 2 };
                            {  };
                            {  } } } };
                    {  };
                    { {  }; { NIL operation }; PAIR } } } } ] ]
InterpretSnapshot:
  isStatus: running / faced statement
  isStackFrames:
    [ StackFrame:
      sfName: main
      sfLoc: test/contracts/record-update-is-statement.mligo@13:17-13:36
      sfStack:
        [ StackItem:
          siLigoDesc:
            elem s of { a: int; b: string; c: (False of (unit) | True of (unit)); }
          siValue: Pair (Pair 0 "\"str\"") False ]
    , StackFrame:
      sfName: main
      sfLoc: test/contracts/record-update-is-statement.mligo@1:1-1:1
      sfStack:
        [ StackItem:
          siLigoDesc:
            elem ? of { a: int; b: string; c: (False of (unit) | True of (unit)); }
          siValue: Pair (Pair 0 "\"str\"") False
        , StackItem:
          siLigoDesc: elem ? of unit
          siValue: Unit
        , StackItem:
          siLigoDesc:
            elem main of unit -> { a: int; b: string; c: (False of (unit) | True of (unit));
                    } -> operation list * { a: int;
                                              b: string; c: (False of (unit) | True of (unit));
                                          }
          siValue:
            { DROP;
              LAMBDA
                (pair (pair int string) bool)
                (pair (list operation) (pair int string) bool)
                { {  };
                  { { { UNIT }; SOME };
                    {  };
                    IF_NONE
                      { {  }; {  } }
                      { DROP;
                        {  };
                        {  };
                        { {  };
                          {  };
                          { { {  }; {  }; {  }; PUSH bool True; UPDATE 2 };
                            {  };
                            {  } } } };
                    {  };
                    { {  }; { NIL operation }; PAIR } } } } ] ]
InterpretSnapshot:
  isStatus: running / faced statement
  isStackFrames:
    [ StackFrame:
      sfName: main
      sfLoc: test/contracts/record-update-is-statement.mligo@16:3-16:38
      sfStack:
        [ StackItem:
          siLigoDesc:
            elem newStorage of { a: int; b: string; c: (False of (unit) | True of (unit)); }
          siValue: Pair (Pair 0 "\"str\"") True ]
    , StackFrame:
      sfName: main
      sfLoc: test/contracts/record-update-is-statement.mligo@1:1-1:1
      sfStack:
        [ StackItem:
          siLigoDesc:
            elem ? of { a: int; b: string; c: (False of (unit) | True of (unit)); }
          siValue: Pair (Pair 0 "\"str\"") False
        , StackItem:
          siLigoDesc: elem ? of unit
          siValue: Unit
        , StackItem:
          siLigoDesc:
            elem main of unit -> { a: int; b: string; c: (False of (unit) | True of (unit));
                    } -> operation list * { a: int;
                                              b: string; c: (False of (unit) | True of (unit));
                                          }
          siValue:
            { DROP;
              LAMBDA
                (pair (pair int string) bool)
                (pair (list operation) (pair int string) bool)
                { {  };
                  { { { UNIT }; SOME };
                    {  };
                    IF_NONE
                      { {  }; {  } }
                      { DROP;
                        {  };
                        {  };
                        { {  };
                          {  };
                          { { {  }; {  }; {  }; PUSH bool True; UPDATE 2 };
                            {  };
                            {  } } } };
                    {  };
                    { {  }; { NIL operation }; PAIR } } } } ] ]
InterpretSnapshot:
  isStatus: terminated ok
  isStackFrames:
    [ StackFrame:
      sfName: main
      sfLoc: test/contracts/record-update-is-statement.mligo@16:4-16:37
      sfStack:
        [ StackItem:
          siLigoDesc: elem ? of 
          siValue: { { }; Pair 0 "\"str\""; True }
        , StackItem:
          siLigoDesc: elem ? of 
          siValue: Pair (Pair 0 "\"str\"") False ]
    , StackFrame:
      sfName: main
      sfLoc: test/contracts/record-update-is-statement.mligo@1:1-1:1
      sfStack:
        [ StackItem:
          siLigoDesc:
            elem ? of { a: int; b: string; c: (False of (unit) | True of (unit)); }
          siValue: Pair (Pair 0 "\"str\"") False
        , StackItem:
          siLigoDesc: elem ? of unit
          siValue: Unit
        , StackItem:
          siLigoDesc:
            elem main of unit -> { a: int; b: string; c: (False of (unit) | True of (unit));
                    } -> operation list * { a: int;
                                              b: string; c: (False of (unit) | True of (unit));
                                          }
          siValue:
            { DROP;
              LAMBDA
                (pair (pair int string) bool)
                (pair (list operation) (pair int string) bool)
                { {  };
                  { { { UNIT }; SOME };
                    {  };
                    IF_NONE
                      { {  }; {  } }
                      { DROP;
                        {  };
                        {  };
                        { {  };
                          {  };
                          { { {  }; {  }; {  }; PUSH bool True; UPDATE 2 };
                            {  };
                            {  } } } };
                    {  };
                    { {  }; { NIL operation }; PAIR } } } } ] ]