InterpretSnapshot:
  isStatus: running / faced statement
  isStackFrames:
    [ StackFrame:
      sfName: IncDec.reset
      sfLoc: test/contracts/module-entrypoints.mligo@11:5-11:10
      sfStack:
        [ StackItem:
          siLigoDesc:
            elem IncDec.decrement of int -> int -> operation list * int
          siValue:
            { PUSH
                (pair
                  (lambda (pair int int) (pair (list operation) int))
                  (or unit (or int int))
                  int)
                (Pair
                   { PUSH
                       (pair (or unit (or int int)) int)
                       (Pair (Left Unit) 100);
                     PAIR;
                     { UNPAIR;
                       SWAP;
                       {  };
                       DUP;
                       UNPAIR;
                       {  };
                       DUP;
                       {  };
                       DUP 3;
                       {  };
                       { { { DUP 2 }; { DUP 2 }; ADD };
                         { NIL operation };
                         PAIR };
                       DIP { DROP 4; DROP 2 } } }
                   (Pair (Left Unit) 100));
              PAIR;
              { UNPAIR;
                UNPAIR;
                DIG 2;
                {  };
                DUP;
                UNPAIR;
                {  };
                DUP;
                {  };
                DUP 3;
                {  };
                { { { DUP 2 }; { DUP 2 }; SUB }; { NIL operation }; PAIR };
                DIP { DROP 4; DROP 3 } } }
        , StackItem:
          siLigoDesc:
            elem IncDec.increment of int -> int -> operation list * int
          siValue:
            { PUSH (pair (or unit (or int int)) int) (Pair (Left Unit) 100);
              PAIR;
              { UNPAIR;
                SWAP;
                {  };
                DUP;
                UNPAIR;
                {  };
                DUP;
                {  };
                DUP 3;
                {  };
                { { { DUP 2 }; { DUP 2 }; ADD }; { NIL operation }; PAIR };
                DIP { DROP 4; DROP 2 } } } ]
    , StackFrame:
      sfName: IncDec.<module main>
      sfLoc: test/contracts/module-entrypoints.mligo@1:1-1:1
      sfStack:
        [ StackItem:
          siLigoDesc: elem s of int
          siValue: 100
        , StackItem:
          siLigoDesc:
            elem p of ([@layout comb] |
               Reset of (unit) | Decrement of (int) | Increment of (int))
          siValue: Left Unit
        , StackItem:
          siLigoDesc: elem IncDec.reset of unit -> int -> operation list * int
          siValue:
            { PUSH
                (pair
                  (lambda (pair int int) (pair (list operation) int))
                  (lambda (pair int int) (pair (list operation) int))
                  (or unit (or int int))
                  int)
                (Pair
                   { PUSH
                       (pair
                         (lambda (pair int int) (pair (list operation) int))
                         (or unit (or int int))
                         int)
                       (Pair
                          { PUSH
                              (pair (or unit (or int int)) int)
                              (Pair (Left Unit) 100);
                            PAIR;
                            { UNPAIR;
                              SWAP;
                              {  };
                              DUP;
                              UNPAIR;
                              {  };
                              DUP;
                              {  };
                              DUP 3;
                              {  };
                              { { { DUP 2 }; { DUP 2 }; ADD };
                                { NIL operation };
                                PAIR };
                              DIP { DROP 4; DROP 2 } } }
                          (Pair (Left Unit) 100));
                     PAIR;
                     { UNPAIR;
                       UNPAIR;
                       DIG 2;
                       {  };
                       DUP;
                       UNPAIR;
                       {  };
                       DUP;
                       {  };
                       DUP 3;
                       {  };
                       { { { DUP 2 }; { DUP 2 }; SUB };
                         { NIL operation };
                         PAIR };
                       DIP { DROP 4; DROP 3 } } }
                   (Pair
                      { PUSH
                          (pair (or unit (or int int)) int)
                          (Pair (Left Unit) 100);
                        PAIR;
                        { UNPAIR;
                          SWAP;
                          {  };
                          DUP;
                          UNPAIR;
                          {  };
                          DUP;
                          {  };
                          DUP 3;
                          {  };
                          { { { DUP 2 }; { DUP 2 }; ADD };
                            { NIL operation };
                            PAIR };
                          DIP { DROP 4; DROP 2 } } }
                      (Pair (Left Unit) 100)));
              PAIR;
              { UNPAIR;
                UNPAIR 3;
                DIG 3;
                {  };
                DUP;
                {  };
                LAMBDA
                  (pair
                    (pair
                      unit
                      unit
                      (lambda (pair int int) (pair (list operation) int))
                      (lambda (pair int int) (pair (list operation) int))
                      (or unit (or int int))
                      int)
                    int)
                  (pair (list operation) int)
                  { UNPAIR;
                    UNPAIR 5;
                    DIG 5;
                    {  };
                    { { PUSH int 0 }; { NIL operation }; PAIR };
                    DIP { DROP 6 } };
                DUP 6;
                DUP 6;
                DUP 6;
                DUP 6;
                DUP 6;
                PAIR 5;
                APPLY;
                DIP { DROP 5 } } }
        , StackItem:
          siLigoDesc:
            elem IncDec.decrement of int -> int -> operation list * int
          siValue:
            { PUSH
                (pair
                  (lambda (pair int int) (pair (list operation) int))
                  (or unit (or int int))
                  int)
                (Pair
                   { PUSH
                       (pair (or unit (or int int)) int)
                       (Pair (Left Unit) 100);
                     PAIR;
                     { UNPAIR;
                       SWAP;
                       {  };
                       DUP;
                       UNPAIR;
                       {  };
                       DUP;
                       {  };
                       DUP 3;
                       {  };
                       { { { DUP 2 }; { DUP 2 }; ADD };
                         { NIL operation };
                         PAIR };
                       DIP { DROP 4; DROP 2 } } }
                   (Pair (Left Unit) 100));
              PAIR;
              { UNPAIR;
                UNPAIR;
                DIG 2;
                {  };
                DUP;
                UNPAIR;
                {  };
                DUP;
                {  };
                DUP 3;
                {  };
                { { { DUP 2 }; { DUP 2 }; SUB }; { NIL operation }; PAIR };
                DIP { DROP 4; DROP 3 } } }
        , StackItem:
          siLigoDesc:
            elem IncDec.increment of int -> int -> operation list * int
          siValue:
            { PUSH (pair (or unit (or int int)) int) (Pair (Left Unit) 100);
              PAIR;
              { UNPAIR;
                SWAP;
                {  };
                DUP;
                UNPAIR;
                {  };
                DUP;
                {  };
                DUP 3;
                {  };
                { { { DUP 2 }; { DUP 2 }; ADD }; { NIL operation }; PAIR };
                DIP { DROP 4; DROP 2 } } } ] ]
InterpretSnapshot:
  isStatus: running / upon expression
  isStackFrames:
    [ StackFrame:
      sfName: IncDec.reset
      sfLoc: test/contracts/module-entrypoints.mligo@11:5-11:7
      sfStack:
        [ StackItem:
          siLigoDesc:
            elem IncDec.decrement of int -> int -> operation list * int
          siValue:
            { PUSH
                (pair
                  (lambda (pair int int) (pair (list operation) int))
                  (or unit (or int int))
                  int)
                (Pair
                   { PUSH
                       (pair (or unit (or int int)) int)
                       (Pair (Left Unit) 100);
                     PAIR;
                     { UNPAIR;
                       SWAP;
                       {  };
                       DUP;
                       UNPAIR;
                       {  };
                       DUP;
                       {  };
                       DUP 3;
                       {  };
                       { { { DUP 2 }; { DUP 2 }; ADD };
                         { NIL operation };
                         PAIR };
                       DIP { DROP 4; DROP 2 } } }
                   (Pair (Left Unit) 100));
              PAIR;
              { UNPAIR;
                UNPAIR;
                DIG 2;
                {  };
                DUP;
                UNPAIR;
                {  };
                DUP;
                {  };
                DUP 3;
                {  };
                { { { DUP 2 }; { DUP 2 }; SUB }; { NIL operation }; PAIR };
                DIP { DROP 4; DROP 3 } } }
        , StackItem:
          siLigoDesc:
            elem IncDec.increment of int -> int -> operation list * int
          siValue:
            { PUSH (pair (or unit (or int int)) int) (Pair (Left Unit) 100);
              PAIR;
              { UNPAIR;
                SWAP;
                {  };
                DUP;
                UNPAIR;
                {  };
                DUP;
                {  };
                DUP 3;
                {  };
                { { { DUP 2 }; { DUP 2 }; ADD }; { NIL operation }; PAIR };
                DIP { DROP 4; DROP 2 } } } ]
    , StackFrame:
      sfName: IncDec.<module main>
      sfLoc: test/contracts/module-entrypoints.mligo@1:1-1:1
      sfStack:
        [ StackItem:
          siLigoDesc: elem s of int
          siValue: 100
        , StackItem:
          siLigoDesc:
            elem p of ([@layout comb] |
               Reset of (unit) | Decrement of (int) | Increment of (int))
          siValue: Left Unit
        , StackItem:
          siLigoDesc: elem IncDec.reset of unit -> int -> operation list * int
          siValue:
            { PUSH
                (pair
                  (lambda (pair int int) (pair (list operation) int))
                  (lambda (pair int int) (pair (list operation) int))
                  (or unit (or int int))
                  int)
                (Pair
                   { PUSH
                       (pair
                         (lambda (pair int int) (pair (list operation) int))
                         (or unit (or int int))
                         int)
                       (Pair
                          { PUSH
                              (pair (or unit (or int int)) int)
                              (Pair (Left Unit) 100);
                            PAIR;
                            { UNPAIR;
                              SWAP;
                              {  };
                              DUP;
                              UNPAIR;
                              {  };
                              DUP;
                              {  };
                              DUP 3;
                              {  };
                              { { { DUP 2 }; { DUP 2 }; ADD };
                                { NIL operation };
                                PAIR };
                              DIP { DROP 4; DROP 2 } } }
                          (Pair (Left Unit) 100));
                     PAIR;
                     { UNPAIR;
                       UNPAIR;
                       DIG 2;
                       {  };
                       DUP;
                       UNPAIR;
                       {  };
                       DUP;
                       {  };
                       DUP 3;
                       {  };
                       { { { DUP 2 }; { DUP 2 }; SUB };
                         { NIL operation };
                         PAIR };
                       DIP { DROP 4; DROP 3 } } }
                   (Pair
                      { PUSH
                          (pair (or unit (or int int)) int)
                          (Pair (Left Unit) 100);
                        PAIR;
                        { UNPAIR;
                          SWAP;
                          {  };
                          DUP;
                          UNPAIR;
                          {  };
                          DUP;
                          {  };
                          DUP 3;
                          {  };
                          { { { DUP 2 }; { DUP 2 }; ADD };
                            { NIL operation };
                            PAIR };
                          DIP { DROP 4; DROP 2 } } }
                      (Pair (Left Unit) 100)));
              PAIR;
              { UNPAIR;
                UNPAIR 3;
                DIG 3;
                {  };
                DUP;
                {  };
                LAMBDA
                  (pair
                    (pair
                      unit
                      unit
                      (lambda (pair int int) (pair (list operation) int))
                      (lambda (pair int int) (pair (list operation) int))
                      (or unit (or int int))
                      int)
                    int)
                  (pair (list operation) int)
                  { UNPAIR;
                    UNPAIR 5;
                    DIG 5;
                    {  };
                    { { PUSH int 0 }; { NIL operation }; PAIR };
                    DIP { DROP 6 } };
                DUP 6;
                DUP 6;
                DUP 6;
                DUP 6;
                DUP 6;
                PAIR 5;
                APPLY;
                DIP { DROP 5 } } }
        , StackItem:
          siLigoDesc:
            elem IncDec.decrement of int -> int -> operation list * int
          siValue:
            { PUSH
                (pair
                  (lambda (pair int int) (pair (list operation) int))
                  (or unit (or int int))
                  int)
                (Pair
                   { PUSH
                       (pair (or unit (or int int)) int)
                       (Pair (Left Unit) 100);
                     PAIR;
                     { UNPAIR;
                       SWAP;
                       {  };
                       DUP;
                       UNPAIR;
                       {  };
                       DUP;
                       {  };
                       DUP 3;
                       {  };
                       { { { DUP 2 }; { DUP 2 }; ADD };
                         { NIL operation };
                         PAIR };
                       DIP { DROP 4; DROP 2 } } }
                   (Pair (Left Unit) 100));
              PAIR;
              { UNPAIR;
                UNPAIR;
                DIG 2;
                {  };
                DUP;
                UNPAIR;
                {  };
                DUP;
                {  };
                DUP 3;
                {  };
                { { { DUP 2 }; { DUP 2 }; SUB }; { NIL operation }; PAIR };
                DIP { DROP 4; DROP 3 } } }
        , StackItem:
          siLigoDesc:
            elem IncDec.increment of int -> int -> operation list * int
          siValue:
            { PUSH (pair (or unit (or int int)) int) (Pair (Left Unit) 100);
              PAIR;
              { UNPAIR;
                SWAP;
                {  };
                DUP;
                UNPAIR;
                {  };
                DUP;
                {  };
                DUP 3;
                {  };
                { { { DUP 2 }; { DUP 2 }; ADD }; { NIL operation }; PAIR };
                DIP { DROP 4; DROP 2 } } } ] ]
InterpretSnapshot:
  isStatus: running / expression evaluated ({ } : operation list)
  isStackFrames:
    [ StackFrame:
      sfName: IncDec.reset
      sfLoc: test/contracts/module-entrypoints.mligo@11:5-11:7
      sfStack:
        [ StackItem:
          siLigoDesc:
            elem IncDec.decrement of int -> int -> operation list * int
          siValue:
            { PUSH
                (pair
                  (lambda (pair int int) (pair (list operation) int))
                  (or unit (or int int))
                  int)
                (Pair
                   { PUSH
                       (pair (or unit (or int int)) int)
                       (Pair (Left Unit) 100);
                     PAIR;
                     { UNPAIR;
                       SWAP;
                       {  };
                       DUP;
                       UNPAIR;
                       {  };
                       DUP;
                       {  };
                       DUP 3;
                       {  };
                       { { { DUP 2 }; { DUP 2 }; ADD };
                         { NIL operation };
                         PAIR };
                       DIP { DROP 4; DROP 2 } } }
                   (Pair (Left Unit) 100));
              PAIR;
              { UNPAIR;
                UNPAIR;
                DIG 2;
                {  };
                DUP;
                UNPAIR;
                {  };
                DUP;
                {  };
                DUP 3;
                {  };
                { { { DUP 2 }; { DUP 2 }; SUB }; { NIL operation }; PAIR };
                DIP { DROP 4; DROP 3 } } }
        , StackItem:
          siLigoDesc:
            elem IncDec.increment of int -> int -> operation list * int
          siValue:
            { PUSH (pair (or unit (or int int)) int) (Pair (Left Unit) 100);
              PAIR;
              { UNPAIR;
                SWAP;
                {  };
                DUP;
                UNPAIR;
                {  };
                DUP;
                {  };
                DUP 3;
                {  };
                { { { DUP 2 }; { DUP 2 }; ADD }; { NIL operation }; PAIR };
                DIP { DROP 4; DROP 2 } } } ]
    , StackFrame:
      sfName: IncDec.<module main>
      sfLoc: test/contracts/module-entrypoints.mligo@1:1-1:1
      sfStack:
        [ StackItem:
          siLigoDesc: elem s of int
          siValue: 100
        , StackItem:
          siLigoDesc:
            elem p of ([@layout comb] |
               Reset of (unit) | Decrement of (int) | Increment of (int))
          siValue: Left Unit
        , StackItem:
          siLigoDesc: elem IncDec.reset of unit -> int -> operation list * int
          siValue:
            { PUSH
                (pair
                  (lambda (pair int int) (pair (list operation) int))
                  (lambda (pair int int) (pair (list operation) int))
                  (or unit (or int int))
                  int)
                (Pair
                   { PUSH
                       (pair
                         (lambda (pair int int) (pair (list operation) int))
                         (or unit (or int int))
                         int)
                       (Pair
                          { PUSH
                              (pair (or unit (or int int)) int)
                              (Pair (Left Unit) 100);
                            PAIR;
                            { UNPAIR;
                              SWAP;
                              {  };
                              DUP;
                              UNPAIR;
                              {  };
                              DUP;
                              {  };
                              DUP 3;
                              {  };
                              { { { DUP 2 }; { DUP 2 }; ADD };
                                { NIL operation };
                                PAIR };
                              DIP { DROP 4; DROP 2 } } }
                          (Pair (Left Unit) 100));
                     PAIR;
                     { UNPAIR;
                       UNPAIR;
                       DIG 2;
                       {  };
                       DUP;
                       UNPAIR;
                       {  };
                       DUP;
                       {  };
                       DUP 3;
                       {  };
                       { { { DUP 2 }; { DUP 2 }; SUB };
                         { NIL operation };
                         PAIR };
                       DIP { DROP 4; DROP 3 } } }
                   (Pair
                      { PUSH
                          (pair (or unit (or int int)) int)
                          (Pair (Left Unit) 100);
                        PAIR;
                        { UNPAIR;
                          SWAP;
                          {  };
                          DUP;
                          UNPAIR;
                          {  };
                          DUP;
                          {  };
                          DUP 3;
                          {  };
                          { { { DUP 2 }; { DUP 2 }; ADD };
                            { NIL operation };
                            PAIR };
                          DIP { DROP 4; DROP 2 } } }
                      (Pair (Left Unit) 100)));
              PAIR;
              { UNPAIR;
                UNPAIR 3;
                DIG 3;
                {  };
                DUP;
                {  };
                LAMBDA
                  (pair
                    (pair
                      unit
                      unit
                      (lambda (pair int int) (pair (list operation) int))
                      (lambda (pair int int) (pair (list operation) int))
                      (or unit (or int int))
                      int)
                    int)
                  (pair (list operation) int)
                  { UNPAIR;
                    UNPAIR 5;
                    DIG 5;
                    {  };
                    { { PUSH int 0 }; { NIL operation }; PAIR };
                    DIP { DROP 6 } };
                DUP 6;
                DUP 6;
                DUP 6;
                DUP 6;
                DUP 6;
                PAIR 5;
                APPLY;
                DIP { DROP 5 } } }
        , StackItem:
          siLigoDesc:
            elem IncDec.decrement of int -> int -> operation list * int
          siValue:
            { PUSH
                (pair
                  (lambda (pair int int) (pair (list operation) int))
                  (or unit (or int int))
                  int)
                (Pair
                   { PUSH
                       (pair (or unit (or int int)) int)
                       (Pair (Left Unit) 100);
                     PAIR;
                     { UNPAIR;
                       SWAP;
                       {  };
                       DUP;
                       UNPAIR;
                       {  };
                       DUP;
                       {  };
                       DUP 3;
                       {  };
                       { { { DUP 2 }; { DUP 2 }; ADD };
                         { NIL operation };
                         PAIR };
                       DIP { DROP 4; DROP 2 } } }
                   (Pair (Left Unit) 100));
              PAIR;
              { UNPAIR;
                UNPAIR;
                DIG 2;
                {  };
                DUP;
                UNPAIR;
                {  };
                DUP;
                {  };
                DUP 3;
                {  };
                { { { DUP 2 }; { DUP 2 }; SUB }; { NIL operation }; PAIR };
                DIP { DROP 4; DROP 3 } } }
        , StackItem:
          siLigoDesc:
            elem IncDec.increment of int -> int -> operation list * int
          siValue:
            { PUSH (pair (or unit (or int int)) int) (Pair (Left Unit) 100);
              PAIR;
              { UNPAIR;
                SWAP;
                {  };
                DUP;
                UNPAIR;
                {  };
                DUP;
                {  };
                DUP 3;
                {  };
                { { { DUP 2 }; { DUP 2 }; ADD }; { NIL operation }; PAIR };
                DIP { DROP 4; DROP 2 } } } ] ]
InterpretSnapshot:
  isStatus: running / expression evaluated (Pair { } 0 : operation list * int)
  isStackFrames:
    [ StackFrame:
      sfName: IncDec.reset
      sfLoc: test/contracts/module-entrypoints.mligo@11:5-11:10
      sfStack:
        [ StackItem:
          siLigoDesc:
            elem IncDec.decrement of int -> int -> operation list * int
          siValue:
            { PUSH
                (pair
                  (lambda (pair int int) (pair (list operation) int))
                  (or unit (or int int))
                  int)
                (Pair
                   { PUSH
                       (pair (or unit (or int int)) int)
                       (Pair (Left Unit) 100);
                     PAIR;
                     { UNPAIR;
                       SWAP;
                       {  };
                       DUP;
                       UNPAIR;
                       {  };
                       DUP;
                       {  };
                       DUP 3;
                       {  };
                       { { { DUP 2 }; { DUP 2 }; ADD };
                         { NIL operation };
                         PAIR };
                       DIP { DROP 4; DROP 2 } } }
                   (Pair (Left Unit) 100));
              PAIR;
              { UNPAIR;
                UNPAIR;
                DIG 2;
                {  };
                DUP;
                UNPAIR;
                {  };
                DUP;
                {  };
                DUP 3;
                {  };
                { { { DUP 2 }; { DUP 2 }; SUB }; { NIL operation }; PAIR };
                DIP { DROP 4; DROP 3 } } }
        , StackItem:
          siLigoDesc:
            elem IncDec.increment of int -> int -> operation list * int
          siValue:
            { PUSH (pair (or unit (or int int)) int) (Pair (Left Unit) 100);
              PAIR;
              { UNPAIR;
                SWAP;
                {  };
                DUP;
                UNPAIR;
                {  };
                DUP;
                {  };
                DUP 3;
                {  };
                { { { DUP 2 }; { DUP 2 }; ADD }; { NIL operation }; PAIR };
                DIP { DROP 4; DROP 2 } } } ]
    , StackFrame:
      sfName: IncDec.<module main>
      sfLoc: test/contracts/module-entrypoints.mligo@1:1-1:1
      sfStack:
        [ StackItem:
          siLigoDesc: elem s of int
          siValue: 100
        , StackItem:
          siLigoDesc:
            elem p of ([@layout comb] |
               Reset of (unit) | Decrement of (int) | Increment of (int))
          siValue: Left Unit
        , StackItem:
          siLigoDesc: elem IncDec.reset of unit -> int -> operation list * int
          siValue:
            { PUSH
                (pair
                  (lambda (pair int int) (pair (list operation) int))
                  (lambda (pair int int) (pair (list operation) int))
                  (or unit (or int int))
                  int)
                (Pair
                   { PUSH
                       (pair
                         (lambda (pair int int) (pair (list operation) int))
                         (or unit (or int int))
                         int)
                       (Pair
                          { PUSH
                              (pair (or unit (or int int)) int)
                              (Pair (Left Unit) 100);
                            PAIR;
                            { UNPAIR;
                              SWAP;
                              {  };
                              DUP;
                              UNPAIR;
                              {  };
                              DUP;
                              {  };
                              DUP 3;
                              {  };
                              { { { DUP 2 }; { DUP 2 }; ADD };
                                { NIL operation };
                                PAIR };
                              DIP { DROP 4; DROP 2 } } }
                          (Pair (Left Unit) 100));
                     PAIR;
                     { UNPAIR;
                       UNPAIR;
                       DIG 2;
                       {  };
                       DUP;
                       UNPAIR;
                       {  };
                       DUP;
                       {  };
                       DUP 3;
                       {  };
                       { { { DUP 2 }; { DUP 2 }; SUB };
                         { NIL operation };
                         PAIR };
                       DIP { DROP 4; DROP 3 } } }
                   (Pair
                      { PUSH
                          (pair (or unit (or int int)) int)
                          (Pair (Left Unit) 100);
                        PAIR;
                        { UNPAIR;
                          SWAP;
                          {  };
                          DUP;
                          UNPAIR;
                          {  };
                          DUP;
                          {  };
                          DUP 3;
                          {  };
                          { { { DUP 2 }; { DUP 2 }; ADD };
                            { NIL operation };
                            PAIR };
                          DIP { DROP 4; DROP 2 } } }
                      (Pair (Left Unit) 100)));
              PAIR;
              { UNPAIR;
                UNPAIR 3;
                DIG 3;
                {  };
                DUP;
                {  };
                LAMBDA
                  (pair
                    (pair
                      unit
                      unit
                      (lambda (pair int int) (pair (list operation) int))
                      (lambda (pair int int) (pair (list operation) int))
                      (or unit (or int int))
                      int)
                    int)
                  (pair (list operation) int)
                  { UNPAIR;
                    UNPAIR 5;
                    DIG 5;
                    {  };
                    { { PUSH int 0 }; { NIL operation }; PAIR };
                    DIP { DROP 6 } };
                DUP 6;
                DUP 6;
                DUP 6;
                DUP 6;
                DUP 6;
                PAIR 5;
                APPLY;
                DIP { DROP 5 } } }
        , StackItem:
          siLigoDesc:
            elem IncDec.decrement of int -> int -> operation list * int
          siValue:
            { PUSH
                (pair
                  (lambda (pair int int) (pair (list operation) int))
                  (or unit (or int int))
                  int)
                (Pair
                   { PUSH
                       (pair (or unit (or int int)) int)
                       (Pair (Left Unit) 100);
                     PAIR;
                     { UNPAIR;
                       SWAP;
                       {  };
                       DUP;
                       UNPAIR;
                       {  };
                       DUP;
                       {  };
                       DUP 3;
                       {  };
                       { { { DUP 2 }; { DUP 2 }; ADD };
                         { NIL operation };
                         PAIR };
                       DIP { DROP 4; DROP 2 } } }
                   (Pair (Left Unit) 100));
              PAIR;
              { UNPAIR;
                UNPAIR;
                DIG 2;
                {  };
                DUP;
                UNPAIR;
                {  };
                DUP;
                {  };
                DUP 3;
                {  };
                { { { DUP 2 }; { DUP 2 }; SUB }; { NIL operation }; PAIR };
                DIP { DROP 4; DROP 3 } } }
        , StackItem:
          siLigoDesc:
            elem IncDec.increment of int -> int -> operation list * int
          siValue:
            { PUSH (pair (or unit (or int int)) int) (Pair (Left Unit) 100);
              PAIR;
              { UNPAIR;
                SWAP;
                {  };
                DUP;
                UNPAIR;
                {  };
                DUP;
                {  };
                DUP 3;
                {  };
                { { { DUP 2 }; { DUP 2 }; ADD }; { NIL operation }; PAIR };
                DIP { DROP 4; DROP 2 } } } ] ]
InterpretSnapshot:
  isStatus: terminated ok
  isStackFrames:
    [ StackFrame:
      sfName: IncDec.reset
      sfLoc: test/contracts/module-entrypoints.mligo@11:5-11:10
      sfStack:
        [ StackItem:
          siLigoDesc: elem ? of 
          siValue: Pair { } 0
        , StackItem:
          siLigoDesc: elem ? of 
          siValue: 100 ]
    , StackFrame:
      sfName: IncDec.<module main>
      sfLoc: test/contracts/module-entrypoints.mligo@1:1-1:1
      sfStack:
        [ StackItem:
          siLigoDesc: elem s of int
          siValue: 100
        , StackItem:
          siLigoDesc:
            elem p of ([@layout comb] |
               Reset of (unit) | Decrement of (int) | Increment of (int))
          siValue: Left Unit
        , StackItem:
          siLigoDesc: elem IncDec.reset of unit -> int -> operation list * int
          siValue:
            { PUSH
                (pair
                  (lambda (pair int int) (pair (list operation) int))
                  (lambda (pair int int) (pair (list operation) int))
                  (or unit (or int int))
                  int)
                (Pair
                   { PUSH
                       (pair
                         (lambda (pair int int) (pair (list operation) int))
                         (or unit (or int int))
                         int)
                       (Pair
                          { PUSH
                              (pair (or unit (or int int)) int)
                              (Pair (Left Unit) 100);
                            PAIR;
                            { UNPAIR;
                              SWAP;
                              {  };
                              DUP;
                              UNPAIR;
                              {  };
                              DUP;
                              {  };
                              DUP 3;
                              {  };
                              { { { DUP 2 }; { DUP 2 }; ADD };
                                { NIL operation };
                                PAIR };
                              DIP { DROP 4; DROP 2 } } }
                          (Pair (Left Unit) 100));
                     PAIR;
                     { UNPAIR;
                       UNPAIR;
                       DIG 2;
                       {  };
                       DUP;
                       UNPAIR;
                       {  };
                       DUP;
                       {  };
                       DUP 3;
                       {  };
                       { { { DUP 2 }; { DUP 2 }; SUB };
                         { NIL operation };
                         PAIR };
                       DIP { DROP 4; DROP 3 } } }
                   (Pair
                      { PUSH
                          (pair (or unit (or int int)) int)
                          (Pair (Left Unit) 100);
                        PAIR;
                        { UNPAIR;
                          SWAP;
                          {  };
                          DUP;
                          UNPAIR;
                          {  };
                          DUP;
                          {  };
                          DUP 3;
                          {  };
                          { { { DUP 2 }; { DUP 2 }; ADD };
                            { NIL operation };
                            PAIR };
                          DIP { DROP 4; DROP 2 } } }
                      (Pair (Left Unit) 100)));
              PAIR;
              { UNPAIR;
                UNPAIR 3;
                DIG 3;
                {  };
                DUP;
                {  };
                LAMBDA
                  (pair
                    (pair
                      unit
                      unit
                      (lambda (pair int int) (pair (list operation) int))
                      (lambda (pair int int) (pair (list operation) int))
                      (or unit (or int int))
                      int)
                    int)
                  (pair (list operation) int)
                  { UNPAIR;
                    UNPAIR 5;
                    DIG 5;
                    {  };
                    { { PUSH int 0 }; { NIL operation }; PAIR };
                    DIP { DROP 6 } };
                DUP 6;
                DUP 6;
                DUP 6;
                DUP 6;
                DUP 6;
                PAIR 5;
                APPLY;
                DIP { DROP 5 } } }
        , StackItem:
          siLigoDesc:
            elem IncDec.decrement of int -> int -> operation list * int
          siValue:
            { PUSH
                (pair
                  (lambda (pair int int) (pair (list operation) int))
                  (or unit (or int int))
                  int)
                (Pair
                   { PUSH
                       (pair (or unit (or int int)) int)
                       (Pair (Left Unit) 100);
                     PAIR;
                     { UNPAIR;
                       SWAP;
                       {  };
                       DUP;
                       UNPAIR;
                       {  };
                       DUP;
                       {  };
                       DUP 3;
                       {  };
                       { { { DUP 2 }; { DUP 2 }; ADD };
                         { NIL operation };
                         PAIR };
                       DIP { DROP 4; DROP 2 } } }
                   (Pair (Left Unit) 100));
              PAIR;
              { UNPAIR;
                UNPAIR;
                DIG 2;
                {  };
                DUP;
                UNPAIR;
                {  };
                DUP;
                {  };
                DUP 3;
                {  };
                { { { DUP 2 }; { DUP 2 }; SUB }; { NIL operation }; PAIR };
                DIP { DROP 4; DROP 3 } } }
        , StackItem:
          siLigoDesc:
            elem IncDec.increment of int -> int -> operation list * int
          siValue:
            { PUSH (pair (or unit (or int int)) int) (Pair (Left Unit) 100);
              PAIR;
              { UNPAIR;
                SWAP;
                {  };
                DUP;
                UNPAIR;
                {  };
                DUP;
                {  };
                DUP 3;
                {  };
                { { { DUP 2 }; { DUP 2 }; ADD }; { NIL operation }; PAIR };
                DIP { DROP 4; DROP 2 } } } ] ]