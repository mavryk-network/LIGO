InterpretSnapshot:
  isStatus: running / faced statement
  isStackFrames:
    [ StackFrame:
      sfName: main
      sfLoc: test/contracts/statement-in-match-branch.mligo@3:3-3:18
      sfStack:
        [ StackItem:
          siLigoDesc: elem s of int
          siValue: 0 ]
    , StackFrame:
      sfName: main
      sfLoc: test/contracts/statement-in-match-branch.mligo@1:1-1:1
      sfStack:
        [ StackItem:
          siLigoDesc: elem ? of int
          siValue: 0
        , StackItem:
          siLigoDesc: elem ? of unit
          siValue: Unit
        , StackItem:
          siLigoDesc: elem main of unit -> int -> operation list * int
          siValue:
            { DROP;
              LAMBDA
                int
                (pair (list operation) int)
                { {  };
                  { { { PUSH int 42 }; SOME };
                    {  };
                    { {  };
                      {  };
                      IF_NONE
                        { {  }; {  } }
                        { {  }; {  }; { { SWAP }; { SWAP }; ADD } };
                      {  };
                      { {  }; { NIL operation }; PAIR } } } } } ] ]
InterpretSnapshot:
  isStatus: running / upon function call
  isStackFrames:
    [ StackFrame:
      sfName: main
      sfLoc: test/contracts/statement-in-match-branch.mligo@3:11-3:18
      sfStack:
        [ StackItem:
          siLigoDesc: elem s of int
          siValue: 0 ]
    , StackFrame:
      sfName: main
      sfLoc: test/contracts/statement-in-match-branch.mligo@1:1-1:1
      sfStack:
        [ StackItem:
          siLigoDesc: elem ? of int
          siValue: 0
        , StackItem:
          siLigoDesc: elem ? of unit
          siValue: Unit
        , StackItem:
          siLigoDesc: elem main of unit -> int -> operation list * int
          siValue:
            { DROP;
              LAMBDA
                int
                (pair (list operation) int)
                { {  };
                  { { { PUSH int 42 }; SOME };
                    {  };
                    { {  };
                      {  };
                      IF_NONE
                        { {  }; {  } }
                        { {  }; {  }; { { SWAP }; { SWAP }; ADD } };
                      {  };
                      { {  }; { NIL operation }; PAIR } } } } } ] ]
InterpretSnapshot:
  isStatus: running / faced statement
  isStackFrames:
    [ StackFrame:
      sfName: main
      sfLoc: test/contracts/statement-in-match-branch.mligo@4:3-7:16
      sfStack:
        [ StackItem:
          siLigoDesc: elem a of (None of (unit) | Some of (int))
          siValue: Some 42
        , StackItem:
          siLigoDesc: elem s of int
          siValue: 0 ]
    , StackFrame:
      sfName: main
      sfLoc: test/contracts/statement-in-match-branch.mligo@1:1-1:1
      sfStack:
        [ StackItem:
          siLigoDesc: elem ? of int
          siValue: 0
        , StackItem:
          siLigoDesc: elem ? of unit
          siValue: Unit
        , StackItem:
          siLigoDesc: elem main of unit -> int -> operation list * int
          siValue:
            { DROP;
              LAMBDA
                int
                (pair (list operation) int)
                { {  };
                  { { { PUSH int 42 }; SOME };
                    {  };
                    { {  };
                      {  };
                      IF_NONE
                        { {  }; {  } }
                        { {  }; {  }; { { SWAP }; { SWAP }; ADD } };
                      {  };
                      { {  }; { NIL operation }; PAIR } } } } } ] ]
InterpretSnapshot:
  isStatus: running / faced statement
  isStackFrames:
    [ StackFrame:
      sfName: main
      sfLoc: test/contracts/statement-in-match-branch.mligo@5:11-5:12
      sfStack:
        [ StackItem:
          siLigoDesc: elem a of (None of (unit) | Some of (int))
          siValue: Some 42
        , StackItem:
          siLigoDesc: elem s of int
          siValue: 0 ]
    , StackFrame:
      sfName: main
      sfLoc: test/contracts/statement-in-match-branch.mligo@1:1-1:1
      sfStack:
        [ StackItem:
          siLigoDesc: elem ? of int
          siValue: 0
        , StackItem:
          siLigoDesc: elem ? of unit
          siValue: Unit
        , StackItem:
          siLigoDesc: elem main of unit -> int -> operation list * int
          siValue:
            { DROP;
              LAMBDA
                int
                (pair (list operation) int)
                { {  };
                  { { { PUSH int 42 }; SOME };
                    {  };
                    { {  };
                      {  };
                      IF_NONE
                        { {  }; {  } }
                        { {  }; {  }; { { SWAP }; { SWAP }; ADD } };
                      {  };
                      { {  }; { NIL operation }; PAIR } } } } } ] ]
InterpretSnapshot:
  isStatus: running / faced statement
  isStackFrames:
    [ StackFrame:
      sfName: main
      sfLoc: test/contracts/statement-in-match-branch.mligo@6:17-6:22
      sfStack:
        [ StackItem:
          siLigoDesc: elem x of int
          siValue: 42
        , StackItem:
          siLigoDesc: elem s of int
          siValue: 0 ]
    , StackFrame:
      sfName: main
      sfLoc: test/contracts/statement-in-match-branch.mligo@1:1-1:1
      sfStack:
        [ StackItem:
          siLigoDesc: elem ? of int
          siValue: 0
        , StackItem:
          siLigoDesc: elem ? of unit
          siValue: Unit
        , StackItem:
          siLigoDesc: elem main of unit -> int -> operation list * int
          siValue:
            { DROP;
              LAMBDA
                int
                (pair (list operation) int)
                { {  };
                  { { { PUSH int 42 }; SOME };
                    {  };
                    { {  };
                      {  };
                      IF_NONE
                        { {  }; {  } }
                        { {  }; {  }; { { SWAP }; { SWAP }; ADD } };
                      {  };
                      { {  }; { NIL operation }; PAIR } } } } } ] ]
InterpretSnapshot:
  isStatus: running / faced statement
  isStackFrames:
    [ StackFrame:
      sfName: main
      sfLoc: test/contracts/statement-in-match-branch.mligo@8:6-8:32
      sfStack:
        [ StackItem:
          siLigoDesc: elem b of int
          siValue: 42 ]
    , StackFrame:
      sfName: main
      sfLoc: test/contracts/statement-in-match-branch.mligo@1:1-1:1
      sfStack:
        [ StackItem:
          siLigoDesc: elem ? of int
          siValue: 0
        , StackItem:
          siLigoDesc: elem ? of unit
          siValue: Unit
        , StackItem:
          siLigoDesc: elem main of unit -> int -> operation list * int
          siValue:
            { DROP;
              LAMBDA
                int
                (pair (list operation) int)
                { {  };
                  { { { PUSH int 42 }; SOME };
                    {  };
                    { {  };
                      {  };
                      IF_NONE
                        { {  }; {  } }
                        { {  }; {  }; { { SWAP }; { SWAP }; ADD } };
                      {  };
                      { {  }; { NIL operation }; PAIR } } } } } ] ]
InterpretSnapshot:
  isStatus: terminated ok
  isStackFrames:
    [ StackFrame:
      sfName: main
      sfLoc: test/contracts/statement-in-match-branch.mligo@8:7-8:31
      sfStack:
        [ StackItem:
          siLigoDesc: elem ? of 
          siValue: Pair { } 42
        , StackItem:
          siLigoDesc: elem ? of 
          siValue: 0 ]
    , StackFrame:
      sfName: main
      sfLoc: test/contracts/statement-in-match-branch.mligo@1:1-1:1
      sfStack:
        [ StackItem:
          siLigoDesc: elem ? of int
          siValue: 0
        , StackItem:
          siLigoDesc: elem ? of unit
          siValue: Unit
        , StackItem:
          siLigoDesc: elem main of unit -> int -> operation list * int
          siValue:
            { DROP;
              LAMBDA
                int
                (pair (list operation) int)
                { {  };
                  { { { PUSH int 42 }; SOME };
                    {  };
                    { {  };
                      {  };
                      IF_NONE
                        { {  }; {  } }
                        { {  }; {  }; { { SWAP }; { SWAP }; ADD } };
                      {  };
                      { {  }; { NIL operation }; PAIR } } } } } ] ]