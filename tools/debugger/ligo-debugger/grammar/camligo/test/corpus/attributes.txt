=========
sum
=========

type foo = [@boom] | True | False

----

(source_file
  (type_decl
    (TypeName)
    (sum_type_fun_type_level
      (Attr)
      (variant_fun_type_level (ConstrName))
      (variant_fun_type_level (ConstrName))
    )
  )
)


=========
constr
=========

type foo = [@boom] True | False

----

(source_file
  (type_decl
    (TypeName)
    (sum_type_fun_type_level
      (variant_fun_type_level (Attr) (ConstrName))
      (variant_fun_type_level (ConstrName))
    )
  )
)


=========
constr with bar
=========

type foo = | [@boom] True | False

----

(source_file
  (type_decl
    (TypeName)
    (sum_type_fun_type_level
      (variant_fun_type_level (Attr) (ConstrName))
      (variant_fun_type_level (ConstrName))
    )
  )
)


=========
record
=========

type person = [@layout:comb] {
  name: string;
}

----

(source_file
  (type_decl
    (TypeName)
    (record_type
      (Attr)
      (field_decl (FieldName) (TypeName))
    )
  )
)


=========
field twice
=========

type person = {
  [@foo][@bar] name: string;
}

----

(source_file
  (type_decl
    (TypeName)
    (record_type
      (field_decl (Attr) (Attr) (FieldName) (TypeName))
    )
  )
)


=========
let decl
=========

[@annot] let x : int = 1

---

(source_file
  (let_decl
    (Attr)
    (var_pattern (NameDecl))
    (TypeName)
    (Int)
  )
)


=========
let decl twice
=========

[@annot1][@annot2] let x : int = 1

---

(source_file
  (let_decl
    (Attr) (Attr)
    (var_pattern (NameDecl))
    (TypeName)
    (Int)
  )
)


=========
let expr
=========

let foo (a : int): int =
  ([@inline] let test = 2 in test)

---

(source_file
  (fun_decl
    (NameDecl)
    (annot_pattern (var_pattern (NameDecl)) (TypeName))
    (TypeName)
    (paren_expr
      (let_in
        (let_decl (Attr) (var_pattern (NameDecl)) (Int))
        (Name)
      )
    )
  )
)
