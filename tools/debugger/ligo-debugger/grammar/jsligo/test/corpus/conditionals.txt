=========
conditional: if
=========

let x = () => {
  if (true) {
    // comment false
    return false
  };
  /* comment true
  */
  return true;
};

---

(source_file
  (toplevel_binding
    (var_pattern (NameDecl))
    (lambda
      (block_statement
        (if_else_statement
          (True_kwd)
            (block_statement
              (comment)
              (return_statement
                  (False_kwd))))
          (ocaml_comment)
          (return_statement
              (True_kwd))))))

=========
conditional: if else
=========

let x = () => {
  if (true) {
    return false
  } else {
    return true;
  }
};

---

(source_file
  (toplevel_binding
    (var_pattern (NameDecl))
    (lambda
      (block_statement
        (if_else_statement
          (True_kwd)
          (block_statement
            (return_statement (False_kwd)))
          (block_statement
            (return_statement (True_kwd))))))))

=========
conditional: if else if else
=========

let x = () => {
  if (1 == 2) {
    return false
  } else if (2 == 3) {
    return false;
  } else {
    return false;
  }
};

---

(source_file
  (toplevel_binding
    (var_pattern (NameDecl))
    (lambda
      (block_statement
        (if_else_statement
          (binary_call (Int) (Int))
          (block_statement
            (return_statement (False_kwd)))
          (if_else_statement
            (binary_call (Int) (Int))
            (block_statement
              (return_statement (False_kwd)))
            (block_statement
              (return_statement (False_kwd)))))))))

=========
conditional: switch = case + default
=========

let x = (x : string) => {
  switch (x) {
    case "true": {
      break;
    };
    default: {
      return false;
    };
  };
};

---

(source_file
  (toplevel_binding
    (var_pattern (NameDecl))
    (lambda
      (fun_arg
        (var_pattern (NameDecl))
        (TypeName))
      (block_statement
        (switch_statement
          (Name)
          (case_statement
            (String)
            (block_statement
              (break_statement)))
          (default_statement
            (block_statement
              (return_statement
                (False_kwd)))))))))

=========
conditional: switch = case
=========

let x = (x : string) => {
  switch (x) {
    case "true": {
      return false;
    };
  };
};

---

(source_file
  (toplevel_binding
    (var_pattern (NameDecl))
    (lambda
      (fun_arg
        (var_pattern (NameDecl))
        (TypeName))
      (block_statement
        (switch_statement
          (Name)
          (case_statement
            (String)
            (block_statement
              (return_statement
                (False_kwd)))))))))

=========
conditional: switch = default
=========

let x = (x : string) => {
  switch (x) {
    default: {
      return false;
    };
  };
};

---

(source_file
  (toplevel_binding
    (var_pattern (NameDecl))
    (lambda
      (fun_arg
        (var_pattern (NameDecl))
        (TypeName))
      (block_statement
        (switch_statement
          (Name)
          (default_statement
            (block_statement
              (return_statement
                (False_kwd)))))))))