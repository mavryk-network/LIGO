let poly_diag_4#0 = lambda (x#5) return ( x#5 , x#5 ) in
let poly_rev_10#0 = rec (poly_rev_10#0:list (( string * string )) -> list (( string * string )) -> list (( string * string )) => lambda (xs#8) return lambda (acc#9) return  match 
                                                                    xs#8 with
                                                                    | Cons ctor_proj#35 ->
                                                                     match 
                                                                    ctor_proj#35 with
                                                                    | ( x#10 , xs#11 ) ->
                                                                    ((rev#7)@(xs#11))@(CONS(x#10 ,
                                                                    acc#9))
                                                                    | Nil unit_proj#37 ->
                                                                    acc#9 ) in
let poly_rev_9#0 = rec (poly_rev_9#0:list (( int * nat )) -> list (( int * nat )) -> list (( int * nat )) => lambda (xs#8) return lambda (acc#9) return  match 
                                                                    xs#8 with
                                                                    | Cons ctor_proj#35 ->
                                                                     match 
                                                                    ctor_proj#35 with
                                                                    | ( x#10 , xs#11 ) ->
                                                                    ((rev#7)@(xs#11))@(CONS(x#10 ,
                                                                    acc#9))
                                                                    | Nil unit_proj#37 ->
                                                                    acc#9 ) in
let poly_rev_7#0 = lambda (xs#13) return ((poly_rev_10#0)@(xs#13))@(LIST_EMPTY()) in
let poly_rev_5#0 = lambda (xs#13) return ((poly_rev_9#0)@(xs#13))@(LIST_EMPTY()) in
let poly_zip_8#0 = rec (poly_zip_8#0:list (string) -> list (string) -> list (( string * string )) -> list (( string * string )) => lambda (xs#16) return lambda (ys#17) return lambda (acc#18) return let gen#38 = ( xs#16 , ys#17 ) in
 match gen#38 with
  | ( tuple_proj#39 , tuple_proj#40 ) ->
   match tuple_proj#39 with
    | Cons ctor_proj#44 ->
       match ctor_proj#44 with
        | ( x#19 , xs#20 ) ->
         match tuple_proj#40 with
          | Nil ctor_proj#48 ->
            FAILWITH("oops")
          | Cons ctor_proj#46 ->
             match ctor_proj#46 with
              | ( y#21 , ys#22 ) ->
              (((zip#15)@(xs#20))@(ys#22))@(CONS(( x#19 , y#21 ) , acc#18))
    | Nil unit_proj#49 ->
       match tuple_proj#40 with
        | Cons ctor_proj#51 ->
          FAILWITH("oops") | Nil unit_proj#50 ->
                             acc#18 ) in
let poly_zip_6#0 = rec (poly_zip_6#0:list (int) -> list (nat) -> list (( int * nat )) -> list (( int * nat )) => lambda (xs#16) return lambda (ys#17) return lambda (acc#18) return let gen#38 = ( xs#16 , ys#17 ) in
 match gen#38 with
  | ( tuple_proj#39 , tuple_proj#40 ) ->
   match tuple_proj#39 with
    | Cons ctor_proj#44 ->
       match ctor_proj#44 with
        | ( x#19 , xs#20 ) ->
         match tuple_proj#40 with
          | Nil ctor_proj#48 ->
            FAILWITH("oops")
          | Cons ctor_proj#46 ->
             match ctor_proj#46 with
              | ( y#21 , ys#22 ) ->
              (((zip#15)@(xs#20))@(ys#22))@(CONS(( x#19 , y#21 ) , acc#18))
    | Nil unit_proj#49 ->
       match tuple_proj#40 with
        | Cons ctor_proj#51 ->
          FAILWITH("oops") | Nil unit_proj#50 ->
                             acc#18 ) in
let poly_zip_3#0 = lambda (xs#26) return lambda (ys#27) return (poly_rev_7#0)@((((poly_zip_8#0)@(xs#26))@(ys#27))@(LIST_EMPTY())) in
let poly_zip_1#0 = lambda (xs#26) return lambda (ys#27) return (poly_rev_5#0)@((((poly_zip_6#0)@(xs#26))@(ys#27))@(LIST_EMPTY())) in
let poly_self_zip_2#0 = lambda (xs#29) return let gen#52 = (poly_diag_4#0)@(xs#29) in
 match gen#52 with
  | ( xs#30 , ys#31 ) ->
  ((poly_zip_3#0)@(xs#30))@(ys#31) in
let v#0 = (poly_self_zip_2#0)@(CONS("a" , CONS("b" , LIST_EMPTY()))) in
let w#0 = ((poly_zip_1#0)@(CONS(1 , CONS(2 , CONS(3 , LIST_EMPTY())))))@(CONS(+4 , CONS(+5 , CONS(+6 , LIST_EMPTY())))) in
unit
