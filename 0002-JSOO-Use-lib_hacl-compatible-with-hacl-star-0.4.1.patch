From 0d1ab9757d4e0629ef2556399b0968885bc024cf Mon Sep 17 00:00:00 2001
From: prometheansacrifice
 <2601505-prometheansacrifice@users.noreply.gitlab.com>
Date: Sun, 4 Jun 2023 12:43:51 +0530
Subject: [PATCH 2/2] JSOO: Use lib_hacl compatible with hacl-star 0.4.1

This lib_hacl is from v15.0-ligo branch

diff --git a/src/lib_hacl/evercrypt.js b/src/lib_hacl/evercrypt.js
index 98074efa90..864596b3b0 100644
--- a/src/lib_hacl/evercrypt.js
+++ b/src/lib_hacl/evercrypt.js
@@ -102,18 +102,16 @@ function EverCrypt_HMAC_compute(a, tag, key, key_len, data, data_len) {
   }
 }
 
-//Provides: EverCrypt_Hash_Incremental_hash
+//Provides: EverCrypt_Hash_hash
 //Requires: caml_failwith, Hacl_Hash_SHA2_hash_256, Hacl_Hash_SHA2_hash_512, Spec_Hash_Definitions
-function EverCrypt_Hash_Incremental_hash(a, hash, input, input_len) {
+function EverCrypt_Hash_hash(a, hash, input, input_len) {
   switch (a) {
     case Spec_Hash_Definitions.SHA2_256:
       return Hacl_Hash_SHA2_hash_256(input, input_len, hash);
     case Spec_Hash_Definitions.SHA2_512:
       return Hacl_Hash_SHA2_hash_512(input, input_len, hash);
     default:
-      caml_failwith(
-        "EverCrypt_Hash_Incremental_hash unimplemented for this algo" + a
-      );
+      caml_failwith("EverCrypt_Hash_hash unimplemented for this algo" + a);
   }
 }
 
@@ -122,15 +120,3 @@ function EverCrypt_Hash_Incremental_hash(a, hash, input, input_len) {
 function EverCrypt_Curve25519_scalarmult(result, scalar, input) {
   return Hacl_Curve25519_51_scalarmult(result, scalar, input);
 }
-
-//Provides: EverCrypt_Hash_hash
-//Requires: caml_failwith, Hacl_Hash_SHA2_hash_256, Hacl_Hash_SHA2_hash_512, Spec_Hash_Definitions
-function EverCrypt_Hash_hash(a, hash, input, input_len) {
-  switch (a) {
-    case Spec_Hash_Definitions.SHA2_256:
-      return Hacl_Hash_SHA2_hash_256(input, input_len, hash);
-    case Spec_Hash_Definitions.SHA2_512:
-      return Hacl_Hash_SHA2_hash_512(input, input_len, hash);
-      caml_failwith("EverCrypt_Hash_hash unimplemented for this algo" + a);
-  }
-}
diff --git a/src/lib_hacl/gen/README.md b/src/lib_hacl/gen/README.md
index 04e397600e..0937b6c10c 100644
--- a/src/lib_hacl/gen/README.md
+++ b/src/lib_hacl/gen/README.md
@@ -1,5 +1,5 @@
 This generator is used to automatically generate js_of_ocaml stubs for
-hacl-star. It uses both hacl-star ctypes bindings and the 'api.json'
+hacl-star.  It uses both hacl-star ctypes bindings and the 'api.json'
 file (provides with the hacl-wasm npm package).
 
 There is a test making sure that 'api.json' is up to date.
@@ -17,4 +17,4 @@ To generate the stubs, run:
 The result will be printed on stdout.
 Proper stubs will be generated for functions present in 'api.json'.
 Dummy stubs will be generated for the missing ones.
-Manually written stubs will take precedence over the generation mechanism.
+Manually written stubs will take precedence over the generation mechanism.
\ No newline at end of file
diff --git a/src/lib_hacl/gen/api.json b/src/lib_hacl/gen/api.json
index b18b32151d..af1f7133fd 100644
--- a/src/lib_hacl/gen/api.json
+++ b/src/lib_hacl/gen/api.json
@@ -136,7 +136,7 @@
         {
           "name": "alen",
           "kind": "input",
-          "type": "uint32"
+          "type": "int"
         },
         {
           "name": "aad",
@@ -151,7 +151,7 @@
         {
           "name": "len",
           "kind": "input",
-          "type": "uint32"
+          "type": "int"
         },
         {
           "name": "plaintext",
@@ -212,7 +212,7 @@
         {
           "name": "alen",
           "kind": "input",
-          "type": "uint32"
+          "type": "int"
         },
         {
           "name": "aad",
@@ -227,7 +227,7 @@
         {
           "name": "len",
           "kind": "input",
-          "type": "uint32"
+          "type": "int"
         },
         {
           "name": "plaintext",
@@ -260,7 +260,7 @@
         }
       ],
       "return": {
-        "type": "uint32",
+        "type": "int",
         "tests": [
           0
         ]
@@ -328,7 +328,7 @@
       }, {
         "name": "len",
         "kind": "input",
-        "type": "uint32"
+        "type": "int"
       }, {
         "name": "message",
         "kind": "input",
@@ -365,7 +365,7 @@
         {
           "name": "len",
           "kind": "input",
-          "type": "uint32"
+          "type": "int"
         }, {
           "name": "message",
           "kind": "input",
@@ -406,8 +406,8 @@
   },
   "SHA2": {
     "hash_512": {
-      "module": "Hacl_Hash_SHA2",
-      "name": "hash_512",
+      "module": "Hacl_Hash",
+      "name": "SHA2_hash_512",
       "args": [{
           "name": "input",
           "kind": "input",
@@ -424,7 +424,7 @@
         {
           "name": "input_len",
           "kind": "input",
-          "type": "uint32"
+          "type": "int"
         },
         {
           "name": "hash",
@@ -444,8 +444,8 @@
       }
     },
     "hash_384": {
-      "module": "Hacl_Hash_SHA2",
-      "name": "hash_384",
+      "module": "Hacl_Hash",
+      "name": "SHA2_hash_384",
       "args": [{
           "name": "input",
           "kind": "input",
@@ -462,7 +462,7 @@
         {
           "name": "input_len",
           "kind": "input",
-          "type": "uint32"
+          "type": "int"
         },
         {
           "name": "hash",
@@ -482,8 +482,8 @@
       }
     },
     "hash_256": {
-      "module": "Hacl_Hash_SHA2",
-      "name": "hash_256",
+      "module": "Hacl_Hash",
+      "name": "SHA2_hash_256",
       "args": [{
           "name": "input",
           "kind": "input",
@@ -500,7 +500,7 @@
         {
           "name": "input_len",
           "kind": "input",
-          "type": "uint32"
+          "type": "int"
         },
         {
           "name": "hash",
@@ -522,11 +522,10 @@
   },
   "Blake2": {
     "blake2b": {
-      "module": "Hacl_Hash_Blake2",
-      "custom_module_name": true,
-      "name": "Hacl_Blake2b_32_blake2b",
+      "module": "Hacl_Blake2b_32",
+      "name": "blake2b",
       "args": [{
-          "type": "uint32",
+          "type": "int",
           "kind": "input",
           "name": "output_len",
           "interface_index": 0,
@@ -544,7 +543,7 @@
           ]
         },
         {
-          "type": "uint32",
+          "type": "int",
           "kind": "input",
           "name": "data_len"
         }, {
@@ -559,7 +558,7 @@
           ]
         },
         {
-          "type": "uint32",
+          "type": "int",
           "kind": "input",
           "name": "key_len"
         }, {
@@ -579,11 +578,10 @@
       }
     },
     "blake2s": {
-      "module": "Hacl_Hash_Blake2",
-      "custom_module_name": true,
-      "name": "Hacl_Blake2s_32_blake2s",
+      "module": "Hacl_Blake2s_32",
+      "name": "blake2s",
       "args": [{
-          "type": "uint32",
+          "type": "int",
           "kind": "input",
           "name": "output_len",
           "interface_index": 0,
@@ -606,7 +604,7 @@
           ]
         },
         {
-          "type": "uint32",
+          "type": "int",
           "kind": "input",
           "name": "data_len"
         }, {
@@ -623,7 +621,7 @@
           ]
         },
         {
-          "type": "uint32",
+          "type": "int",
           "kind": "input",
           "name": "key_len"
         }, {
@@ -647,13 +645,12 @@
   },
   "SHA3": {
     "hash_512": {
-      "module": "Hacl_Hash_SHA3",
-      "custom_module_name": true,
-      "name": "Hacl_SHA3_sha3_512",
+      "module": "Hacl_SHA3",
+      "name": "sha3_512",
       "args": [{
           "name": "input_len",
           "kind": "input",
-          "type": "uint32"
+          "type": "int"
         },
         {
           "name": "input",
@@ -686,13 +683,12 @@
       }
     },
     "hash_384": {
-      "module": "Hacl_Hash_SHA3",
-      "custom_module_name": true,
-      "name": "Hacl_SHA3_sha3_384",
+      "module": "Hacl_SHA3",
+      "name": "sha3_384",
       "args": [{
           "name": "input_len",
           "kind": "input",
-          "type": "uint32"
+          "type": "int"
         },
         {
           "name": "input",
@@ -725,13 +721,12 @@
       }
     },
     "hash_256": {
-      "module": "Hacl_Hash_SHA3",
-      "custom_module_name": true,
-      "name": "Hacl_SHA3_sha3_256",
+      "module": "Hacl_SHA3",
+      "name": "sha3_256",
       "args": [{
           "name": "input_len",
           "kind": "input",
-          "type": "uint32"
+          "type": "int"
         },
         {
           "name": "input",
@@ -764,13 +759,12 @@
       }
     },
     "hash_224": {
-      "module": "Hacl_Hash_SHA3",
-      "custom_module_name": true,
-      "name": "Hacl_SHA3_sha3_224",
+      "module": "Hacl_SHA3",
+      "name": "sha3_224",
       "args": [{
           "name": "input_len",
           "kind": "input",
-          "type": "uint32"
+          "type": "int"
         },
         {
           "name": "input",
@@ -803,13 +797,13 @@
       }
     },
     "keccak": {
-      "module": "Hacl_Hash_SHA3",
+      "module": "Hacl_SHA3",
       "name": "Hacl_Impl_SHA3_keccak",
       "custom_module_name": true,
       "args": [{
           "name": "rate",
           "kind": "input",
-          "type": "uint32",
+          "type": "int",
           "interface_index": 0,
           "tests": [
               1088
@@ -818,7 +812,7 @@
         {
           "name": "capacity",
           "kind": "input",
-          "type": "uint32",
+          "type": "int",
           "interface_index": 1,
           "tests": [
               512
@@ -827,7 +821,7 @@
         {
           "name": "input_len",
           "kind": "input",
-          "type": "uint32"
+          "type": "int"
         },
         {
           "name": "input",
@@ -842,7 +836,7 @@
         {
           "name": "suffix",
           "kind": "input",
-          "type": "uint32",
+          "type": "int",
           "interface_index": 3,
           "tests": [
               1
@@ -851,7 +845,7 @@
         {
           "name": "output_len",
           "kind": "input",
-          "type": "uint32",
+          "type": "int",
           "interface_index": 4,
           "tests": [
               32
@@ -903,7 +897,7 @@
         }, {
           "name": "key_len",
           "kind": "input",
-          "type": "uint32"
+          "type": "int"
         }, {
           "name": "data",
           "kind": "input",
@@ -919,7 +913,7 @@
         }, {
           "name": "data_len",
           "kind": "input",
-          "type": "uint32"
+          "type": "int"
         }
       ],
       "return": {
@@ -950,7 +944,7 @@
         }, {
           "name": "key_len",
           "kind": "input",
-          "type": "uint32"
+          "type": "int"
         }, {
           "name": "data",
           "kind": "input",
@@ -963,7 +957,7 @@
         }, {
           "name": "data_len",
           "kind": "input",
-          "type": "uint32"
+          "type": "int"
         }
       ],
       "return": {
@@ -1001,7 +995,7 @@
         {
           "name": "salt_len",
           "kind": "input",
-          "type": "uint32"
+          "type": "int"
         }, {
           "name": "ikm",
           "kind": "input",
@@ -1017,7 +1011,7 @@
         {
           "name": "ikm_len",
           "kind": "input",
-          "type": "uint32"
+          "type": "int"
         }
       ],
       "return": {
@@ -1053,7 +1047,7 @@
         {
           "name": "prk_len",
           "kind": "input",
-          "type": "uint32"
+          "type": "int"
         }, {
           "name": "info",
           "kind": "input",
@@ -1069,11 +1063,11 @@
         {
           "name": "infolen",
           "kind": "input",
-          "type": "uint32"
+          "type": "int"
         }, {
           "name": "len",
           "kind": "input",
-          "type": "uint32",
+          "type": "int",
           "interface_index": 2,
           "tests": [
               42,
@@ -1116,7 +1110,7 @@
         {
           "name": "mlen",
           "kind": "input",
-          "type": "uint32"
+          "type": "int"
         },
         {
           "name": "n",
@@ -1142,7 +1136,7 @@
         }
       ],
       "return": {
-        "type": "uint32",
+        "type": "int",
         "tests": [
             0,
             0
@@ -1177,7 +1171,7 @@
         {
           "name": "clen",
           "kind": "input",
-          "type": "uint32"
+          "type": "int"
         },
         {
           "name": "n",
@@ -1203,13 +1197,14 @@
         }
       ],
       "return": {
-        "type": "uint32",
+        "type": "int",
         "tests": [
             0,
             0
         ]
       }
     },
+
     "box_beforenm": {
       "module": "Hacl_NaCl",
       "name": "crypto_box_beforenm",
@@ -1248,11 +1243,11 @@
         }
       ],
       "return": {
-        "type": "uint32",
+        "type": "int",
         "tests": [
             0,
             0
-        ]
+]
       }
     },
     "box_easy_afternm": {
@@ -1283,7 +1278,7 @@
         {
           "name": "mlen",
           "kind": "input",
-          "type": "uint32"
+          "type": "int"
         },
         {
           "name": "n",
@@ -1309,7 +1304,7 @@
         }
       ],
       "return": {
-        "type": "uint32",
+        "type": "int",
         "tests": [
             0,
             0
@@ -1344,7 +1339,7 @@
         {
           "name": "clen",
           "kind": "input",
-          "type": "uint32"
+          "type": "int"
         },
         {
           "name": "n",
@@ -1370,7 +1365,7 @@
         }
       ],
       "return": {
-        "type": "uint32",
+        "type": "int",
         "tests": [
             0,
             0
@@ -1415,7 +1410,7 @@
         {
           "name": "mlen",
           "kind": "input",
-          "type": "uint32"
+          "type": "int"
         },
         {
           "name": "n",
@@ -1441,7 +1436,7 @@
         }
       ],
       "return": {
-        "type": "uint32",
+        "type": "int",
         "tests": [
             0,
             0
@@ -1487,7 +1482,7 @@
         {
           "name": "mlen",
           "kind": "input",
-          "type": "uint32"
+          "type": "int"
         },
         {
           "name": "n",
@@ -1513,7 +1508,7 @@
         }
       ],
       "return": {
-        "type": "uint32",
+        "type": "int",
         "tests": [
             0,
             0
@@ -1521,47 +1516,52 @@
       }
     }
   },
-  "K256": {
-    "ecdsa_sign_hashed_msg": {
-      "module": "Hacl_K256_ECDSA",
-      "name": "ecdsa_sign_hashed_msg",
+  "P256": {
+    "ecdsa_sign_without_hash": {
+      "module": "Hacl_P256",
+      "name": "ecdsa_sign_p256_without_hash",
       "args": [{
-          "name": "signature",
+          "name": "result",
           "kind": "output",
           "type": "buffer",
           "size": 64,
           "tests": [
-              "241097efbf8b63bf145c8961dbdf10c310efbb3b2676bbc0f8b08505c9e2f795021006b7838609339e8b415a7f9acb1b661828131aef1ecbc7955dfb01f3ca0e"
+              "f3ac8061b514795b8843e3d6629527ed2afd6b1f6a555a7acabb5e6f79c8c2accfa740fec76796d2e39216be7ebf580ea3c0ef4bb00ab2e7e4208434f45f8c9c"
           ]
         },
         {
-          "name": "msgHash",
+          "name": "mlen",
+          "kind": "input",
+          "type": "int"
+        },
+        {
+          "name": "m",
           "kind": "input",
           "type": "buffer",
-          "size": 32,
+          "size": "mlen",
           "interface_index": 0,
           "tests": [
-              "4b688df40bcedbe641ddb16ff0a1842d9c67ea1c3bf63f3e0471baa664531d1a"
+              "1ccbe91c075fc7f4f033bfa248db8fccd3565de94bbfb12f3c59ff46c271bf83"
           ]
         },
         {
-          "name": "private_key",
+          "name": "privkey",
           "kind": "input",
           "type": "buffer",
           "size": 32,
           "interface_index": 1,
           "tests": [
-              "ebb2c082fd7727890a28ac82f6bdf97bad8de9f5d7c9028692de1a255cad3e0f"
+              "519b423d715f8b581f4fa8ee59f4771a5b44c8130b4e3eacca54a56dda72b464"
           ]
         },
         {
-          "name": "nonce",
+          "name": "k",
           "kind": "input",
           "type": "buffer",
           "size": 32,
           "interface_index": 2,
           "tests": [
-              "49a0d7b786ec9cde0d0721d72804befd06571c974b191efb42ecf322ba9ddd9a"
+              "94a1bbb14b906a61a280f245f9e93c7f3b4a6247824f5d33b9670787642a68de"
           ]
         }
       ],
@@ -1572,91 +1572,105 @@
         ]
       }
     },
-    "ecdsa_verify_hashed_msg": {
-      "module": "Hacl_K256_ECDSA",
-      "name": "ecdsa_verify_hashed_msg",
+    "ecdsa_verif_without_hash": {
+      "module": "Hacl_P256",
+      "name": "ecdsa_verif_without_hash",
       "args": [{
+          "name": "mlen",
+          "kind": "input",
+          "type": "int"
+        },
+        {
           "name": "m",
           "kind": "input",
           "type": "buffer",
-          "size": 32,
+          "size": "mlen",
           "interface_index": 0,
           "tests": [
-              "4b688df40bcedbe641ddb16ff0a1842d9c67ea1c3bf63f3e0471baa664531d1a",
-              "4b688df40bcedbe641ddb16ff0a1842d9c67ea1c3bf63f3e0471baa664531d1a"
+              "1ccbe91c075fc7f4f033bfa248db8fccd3565de94bbfb12f3c59ff46c271bf83"
           ]
         },
         {
-          "name": "public_key",
+          "name": "pubkey",
           "kind": "input",
           "type": "buffer",
           "size": 64,
           "interface_index": 1,
           "tests": [
-              "779dd197a5df977ed2cf6cb31d82d43328b790dc6b3b7d4437a427bd5847dfcde94b724a555b6d017bb7607c3e3281daf5b1699d6ef4124975c9237b917d426f",
-              "779dd197a5df977ed2cf6cb31d82d43328b790dc6b3b7d4437a427bd5847dfcde94b724a555b6d017bb7607c3e3281daf5b1699d6ef4124975c9237b917d426f"
+              "1ccbe91c075fc7f4f033bfa248db8fccd3565de94bbfb12f3c59ff46c271bf83ce4014c68811f9a21a1fdb2c0e6113e06db7ca93b7404e78dc7ccd5ca89a4ca9"
           ]
         },
         {
-          "name": "signature",
+          "name": "r",
           "kind": "input",
           "type": "buffer",
-          "size": 64,
+          "size": 32,
           "interface_index": 2,
           "tests": [
-              "241097efbf8b63bf145c8961dbdf10c310efbb3b2676bbc0f8b08505c9e2f795021006b7838609339e8b415a7f9acb1b661828131aef1ecbc7955dfb01f3ca0e",
-              "240097efbf8b63bf145c8961dbdf10c310efbb3b2676bbc0f8b08505c9e2f795021006b7838609339e8b415a7f9acb1b661828131aef1ecbc7955dfb01f3ca0e"
+              "f3ac8061b514795b8843e3d6629527ed2afd6b1f6a555a7acabb5e6f79c8c2ac"
+          ]
+        },
+        {
+          "name": "s",
+          "kind": "input",
+          "type": "buffer",
+          "size": 32,
+          "interface_index": 3,
+          "tests": [
+              "cfa740fec76796d2e39216be7ebf580ea3c0ef4bb00ab2e7e4208434f45f8c9c"
           ]
         }
       ],
       "return": {
         "type": "bool",
-        "tests": [
-            "true",
-            "false"
-        ]
+        "tests": [ "true" ]
       }
     },
-    "secp256k1_ecdsa_sign_hashed_msg": {
-      "module": "Hacl_K256_ECDSA",
-      "name": "secp256k1_ecdsa_sign_hashed_msg",
+    "ecdsa_sign_sha2": {
+      "module": "Hacl_P256",
+      "name": "ecdsa_sign_p256_sha2",
       "args": [{
-          "name": "signature",
+          "name": "result",
           "kind": "output",
           "type": "buffer",
           "size": 64,
           "tests": [
-              "241097efbf8b63bf145c8961dbdf10c310efbb3b2676bbc0f8b08505c9e2f795021006b7838609339e8b415a7f9acb1b661828131aef1ecbc7955dfb01f3ca0e"
+              "f3ac8061b514795b8843e3d6629527ed2afd6b1f6a555a7acabb5e6f79c8c2ac8bf77819ca05a6b2786c76262bf7371cef97b218e96f175a3ccdda2acc058903"
           ]
         },
         {
-          "name": "msgHash",
+          "name": "mlen",
+          "kind": "input",
+          "type": "int"
+        },
+        {
+          "name": "m",
           "kind": "input",
           "type": "buffer",
-          "size": 32,
+          "size": "mlen",
           "interface_index": 0,
           "tests": [
-              "4b688df40bcedbe641ddb16ff0a1842d9c67ea1c3bf63f3e0471baa664531d1a"
+              "5905238877c77421f73e43ee3da6f2d9e2ccad5fc942dcec0cbd25482935faaf416983fe165b1a045ee2bcd2e6dca3bdf46c4310a7461f9a37960ca672d3feb5473e253605fb1ddfd28065b53cb5858a8ad28175bf9bd386a5e471ea7a65c17cc934a9d791e91491eb3754d03799790fe2d308d16146d5c9b0d0debd97d79ce8"
           ]
         },
         {
-          "name": "private_key",
+          "name": "privkey",
           "kind": "input",
           "type": "buffer",
           "size": 32,
           "interface_index": 1,
           "tests": [
-              "ebb2c082fd7727890a28ac82f6bdf97bad8de9f5d7c9028692de1a255cad3e0f"
+              "519b423d715f8b581f4fa8ee59f4771a5b44c8130b4e3eacca54a56dda72b464"
           ]
         },
         {
-          "name": "nonce",
+          "name": "k",
           "kind": "input",
           "type": "buffer",
           "size": 32,
           "interface_index": 2,
           "tests": [
-              "49a0d7b786ec9cde0d0721d72804befd06571c974b191efb42ecf322ba9ddd9a"
+              "94a1bbb14b906a61a280f245f9e93c7f3b4a6247824f5d33b9670787642a68de"
           ]
         }
       ],
@@ -1667,62 +1681,52 @@
         ]
       }
     },
-    "secp256k1_ecdsa_verify_hashed_msg": {
-      "module": "Hacl_K256_ECDSA",
-      "name": "secp256k1_ecdsa_verify_hashed_msg",
+    "ecdsa_verif_sha2": {
+      "module": "Hacl_P256",
+      "name": "ecdsa_verif_p256_sha2",
       "args": [{
+          "name": "mlen",
+          "kind": "input",
+          "type": "int"
+        },
+        {
           "name": "m",
           "kind": "input",
           "type": "buffer",
-          "size": 32,
+          "size": "mlen",
           "interface_index": 0,
           "tests": [
-              "4b688df40bcedbe641ddb16ff0a1842d9c67ea1c3bf63f3e0471baa664531d1a",
-              "4b688df40bcedbe641ddb16ff0a1842d9c67ea1c3bf63f3e0471baa664531d1a"
+              "5905238877c77421f73e43ee3da6f2d9e2ccad5fc942dcec0cbd25482935faaf416983fe165b1a045ee2bcd2e6dca3bdf46c4310a7461f9a37960ca672d3feb5473e253605fb1ddfd28065b53cb5858a8ad28175bf9bd386a5e471ea7a65c17cc934a9d791e91491eb3754d03799790fe2d308d16146d5c9b0d0debd97d79ce8"
           ]
         },
         {
-          "name": "public_key",
+          "name": "pubkey",
           "kind": "input",
           "type": "buffer",
           "size": 64,
           "interface_index": 1,
           "tests": [
-              "779dd197a5df977ed2cf6cb31d82d43328b790dc6b3b7d4437a427bd5847dfcde94b724a555b6d017bb7607c3e3281daf5b1699d6ef4124975c9237b917d426f",
-              "779dd197a5df977ed2cf6cb31d82d43328b790dc6b3b7d4437a427bd5847dfcde94b724a555b6d017bb7607c3e3281daf5b1699d6ef4124975c9237b917d426f"
+              "1ccbe91c075fc7f4f033bfa248db8fccd3565de94bbfb12f3c59ff46c271bf83ce4014c68811f9a21a1fdb2c0e6113e06db7ca93b7404e78dc7ccd5ca89a4ca9"
           ]
         },
         {
-          "name": "signature",
+          "name": "r",
           "kind": "input",
           "type": "buffer",
-          "size": 64,
+          "size": 32,
           "interface_index": 2,
           "tests": [
-              "241097efbf8b63bf145c8961dbdf10c310efbb3b2676bbc0f8b08505c9e2f795021006b7838609339e8b415a7f9acb1b661828131aef1ecbc7955dfb01f3ca0e",
-              "240097efbf8b63bf145c8961dbdf10c310efbb3b2676bbc0f8b08505c9e2f795021006b7838609339e8b415a7f9acb1b661828131aef1ecbc7955dfb01f3ca0e"
+              "f3ac8061b514795b8843e3d6629527ed2afd6b1f6a555a7acabb5e6f79c8c2ac"
           ]
-        }
-      ],
-      "return": {
-        "type": "bool",
-        "tests": [
-            "true",
-            "false"
-        ]
-      }
-    },
-    "secp256k1_ecdsa_signature_normalize": {
-      "module": "Hacl_K256_ECDSA",
-      "name": "secp256k1_ecdsa_signature_normalize",
-      "args": [{
-          "name": "signature",
+        },
+        {
+          "name": "s",
           "kind": "input",
           "type": "buffer",
-          "size": 64,
-          "interface_index": 0,
+          "size": 32,
+          "interface_index": 3,
           "tests": [
-              "241097efbf8b63bf145c8961dbdf10c310efbb3b2676bbc0f8b08505c9e2f795021006b7838609339e8b415a7f9acb1b661828131aef1ecbc7955dfb01f3ca0e"
+              "8bf77819ca05a6b2786c76262bf7371cef97b218e96f175a3ccdda2acc058903"
           ]
         }
       ],
@@ -1733,47 +1737,49 @@
         ]
       }
     },
-    "secp256k1_ecdsa_is_signature_normalized": {
-      "module": "Hacl_K256_ECDSA",
-      "name": "secp256k1_ecdsa_is_signature_normalized",
+    "verify_q": {
+      "module": "Hacl_P256",
+      "name": "verify_q",
       "args": [{
-          "name": "signature",
+          "name": "pubKey",
           "kind": "input",
           "type": "buffer",
           "size": 64,
           "interface_index": 0,
           "tests": [
-              "241097efbf8b63bf145c8961dbdf10c310efbb3b2676bbc0f8b08505c9e2f795021006b7838609339e8b415a7f9acb1b661828131aef1ecbc7955dfb01f3ca0e"
+              "1ccbe91c075fc7f4f033bfa248db8fccd3565de94bbfb12f3c59ff46c271bf83ce4014c68811f9a21a1fdb2c0e6113e06db7ca93b7404e78dc7ccd5ca89a4ca9",
+              "f3ac8061b514795b8843e3d6629527ed2afd6b1f6a555a7acabb5e6f79c8c2ac8bf77819ca05a6b2786c76262bf7371cef97b218e96f175a3ccdda2acc058903"
           ]
         }
       ],
       "return": {
         "type": "bool",
         "tests": [
-            "true"
+            "true",
+            "false"
         ]
       }
     },
-    "uncompressed_to_raw": {
-      "module": "Hacl_K256_ECDSA",
-      "name": "public_key_uncompressed_to_raw",
+    "decompression_not_compressed_form": {
+      "module": "Hacl_P256",
+      "name": "decompression_not_compressed_form",
       "args": [{
-          "name": "pk_raw",
-          "kind": "output",
+          "name": "b",
+          "kind": "input",
           "type": "buffer",
-          "size": 64,
+          "size": 65,
+          "interface_index": 0,
           "tests": [
-              "0a629506e1b65cd9d2e0ba9c75df9c4fed0db16dc9625ed14397f0afc836fae595dc53f8b0efe61e703075bd9b143bac75ec0e19f82a2208caeb32be53414c40"
+              "04700c48f77f56584c5cc632ca65640db91b6bacce3a4df6b42ce7cc838833d287db71e509e3fd9b060ddb20ba5c51dcc5948d46fbf640dfe0441782cab85fa4ac"
           ]
         },
         {
-          "name": "pk",
-          "kind": "input",
+          "name": "result",
+          "kind": "output",
           "type": "buffer",
-          "size": 65,
-          "interface_index": 0,
+          "size": 64,
           "tests": [
-              "040a629506e1b65cd9d2e0ba9c75df9c4fed0db16dc9625ed14397f0afc836fae595dc53f8b0efe61e703075bd9b143bac75ec0e19f82a2208caeb32be53414c40"
+              "700c48f77f56584c5cc632ca65640db91b6bacce3a4df6b42ce7cc838833d287db71e509e3fd9b060ddb20ba5c51dcc5948d46fbf640dfe0441782cab85fa4ac"
           ]
         }
       ],
@@ -1784,53 +1790,26 @@
         ]
       }
     },
-    "uncompressed_from_raw": {
-      "module": "Hacl_K256_ECDSA",
-      "name": "public_key_uncompressed_from_raw",
+    "decompression_compressed_form": {
+      "module": "Hacl_P256",
+      "name": "decompression_compressed_form",
       "args": [{
-          "name": "pk",
-          "kind": "output",
-          "type": "buffer",
-          "size": 65,
-          "tests": [
-              "040a629506e1b65cd9d2e0ba9c75df9c4fed0db16dc9625ed14397f0afc836fae595dc53f8b0efe61e703075bd9b143bac75ec0e19f82a2208caeb32be53414c40"
-          ]
-        },
-        {
-          "name": "pk_raw",
+          "name": "b",
           "kind": "input",
           "type": "buffer",
-          "size": 64,
+          "size": 33,
           "interface_index": 0,
           "tests": [
-              "0a629506e1b65cd9d2e0ba9c75df9c4fed0db16dc9625ed14397f0afc836fae595dc53f8b0efe61e703075bd9b143bac75ec0e19f82a2208caeb32be53414c40"
-          ]
-        }
-      ],
-      "return": {
-        "type": "void"
-      }
-    },
-    "compressed_to_raw": {
-      "module": "Hacl_K256_ECDSA",
-      "name": "public_key_compressed_to_raw",
-      "args": [{
-          "name": "pk_raw",
-          "kind": "output",
-          "type": "buffer",
-          "size": 64,
-          "tests": [
-              "0a629506e1b65cd9d2e0ba9c75df9c4fed0db16dc9625ed14397f0afc836fae595dc53f8b0efe61e703075bd9b143bac75ec0e19f82a2208caeb32be53414c40"
+              "02700c48f77f56584c5cc632ca65640db91b6bacce3a4df6b42ce7cc838833d287"
           ]
         },
         {
-          "name": "pk",
-          "kind": "input",
+          "name": "result",
+          "kind": "output",
           "type": "buffer",
-          "size": 33,
-          "interface_index": 0,
+          "size": 64,
           "tests": [
-              "020a629506e1b65cd9d2e0ba9c75df9c4fed0db16dc9625ed14397f0afc836fae5"
+              "700c48f77f56584c5cc632ca65640db91b6bacce3a4df6b42ce7cc838833d287db71e509e3fd9b060ddb20ba5c51dcc5948d46fbf640dfe0441782cab85fa4ac"
           ]
         }
       ],
@@ -1841,26 +1820,26 @@
         ]
       }
     },
-    "compressed_from_raw": {
-      "module": "Hacl_K256_ECDSA",
-      "name": "public_key_compressed_from_raw",
+    "compression_not_compressed_form": {
+      "module": "Hacl_P256",
+      "name": "compression_not_compressed_form",
       "args": [{
-          "name": "pk",
-          "kind": "output",
+          "name": "b",
+          "kind": "input",
           "type": "buffer",
-          "size": 33,
+          "size": 64,
+          "interface_index": 0,
           "tests": [
-              "020a629506e1b65cd9d2e0ba9c75df9c4fed0db16dc9625ed14397f0afc836fae5"
+              "700c48f77f56584c5cc632ca65640db91b6bacce3a4df6b42ce7cc838833d287db71e509e3fd9b060ddb20ba5c51dcc5948d46fbf640dfe0441782cab85fa4ac"
           ]
         },
         {
-          "name": "pk_raw",
-          "kind": "input",
+          "name": "result",
+          "kind": "output",
           "type": "buffer",
-          "size": 64,
-          "interface_index": 0,
+          "size": 65,
           "tests": [
-              "0a629506e1b65cd9d2e0ba9c75df9c4fed0db16dc9625ed14397f0afc836fae595dc53f8b0efe61e703075bd9b143bac75ec0e19f82a2208caeb32be53414c40"
+              "04700c48f77f56584c5cc632ca65640db91b6bacce3a4df6b42ce7cc838833d287db71e509e3fd9b060ddb20ba5c51dcc5948d46fbf640dfe0441782cab85fa4ac"
           ]
         }
       ],
@@ -1868,49 +1847,53 @@
         "type": "void"
       }
     },
-    "is_public_key_valid": {
-      "module": "Hacl_K256_ECDSA",
-      "name": "is_public_key_valid",
+    "compression_compressed_form": {
+      "module": "Hacl_P256",
+      "name": "compression_compressed_form",
       "args": [{
-          "name": "pk",
+          "name": "b",
           "kind": "input",
           "type": "buffer",
           "size": 64,
           "interface_index": 0,
           "tests": [
-              "0a629506e1b65cd9d2e0ba9c75df9c4fed0db16dc9625ed14397f0afc836fae595dc53f8b0efe61e703075bd9b143bac75ec0e19f82a2208caeb32be53414c40",
-              "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2cfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e"
+              "700c48f77f56584c5cc632ca65640db91b6bacce3a4df6b42ce7cc838833d287db71e509e3fd9b060ddb20ba5c51dcc5948d46fbf640dfe0441782cab85fa4ac"
+          ]
+        },
+        {
+          "name": "result",
+          "kind": "output",
+          "type": "buffer",
+          "size": 33,
+          "tests": [
+              "02700c48f77f56584c5cc632ca65640db91b6bacce3a4df6b42ce7cc838833d287"
           ]
         }
       ],
       "return": {
-        "type": "bool",
-        "tests": [
-            "true",
-            "false"
-        ]
+        "type": "void"
       }
     },
-    "secret_to_public": {
-      "module": "Hacl_K256_ECDSA",
-      "name": "secret_to_public",
+    "dh_initiator": {
+      "module": "Hacl_P256",
+      "name": "ecp256dh_i",
       "args": [{
-          "name": "public_key",
+          "name": "result",
           "kind": "output",
           "type": "buffer",
           "size": 64,
           "tests": [
-              "779dd197a5df977ed2cf6cb31d82d43328b790dc6b3b7d4437a427bd5847dfcde94b724a555b6d017bb7607c3e3281daf5b1699d6ef4124975c9237b917d426f"
+              "e266ddfdc12668db30d4ca3e8f7749432c416044f2d2b8c10bf3d4012aeffa8abfa86404a2e9ffe67d47c587ef7a97a7f456b863b4d02cfc6928973ab5b1cb39"
           ]
         },
         {
-          "name": "private_key",
+          "name": "scalar",
           "kind": "input",
           "type": "buffer",
           "size": 32,
           "interface_index": 0,
           "tests": [
-              "ebb2c082fd7727890a28ac82f6bdf97bad8de9f5d7c9028692de1a255cad3e0f"
+              "0f56db78ca460b055c500064824bed999a25aaf48ebb519ac201537b85479813"
           ]
         }
       ],
@@ -1920,54 +1903,37 @@
             "true"
         ]
       }
-    }
-  },
-  "P256": {
-    "ecdsa_sign_without_hash": {
+    },
+    "dh_responder": {
       "module": "Hacl_P256",
-      "name": "ecdsa_sign_p256_without_hash",
+      "name": "ecp256dh_r",
       "args": [{
           "name": "result",
           "kind": "output",
           "type": "buffer",
           "size": 64,
           "tests": [
-              "f3ac8061b514795b8843e3d6629527ed2afd6b1f6a555a7acabb5e6f79c8c2accfa740fec76796d2e39216be7ebf580ea3c0ef4bb00ab2e7e4208434f45f8c9c"
+              "46fc62106420ff012e54a434fbdd2d25ccc5852060561e68040dd7778997bd7bc553079d5a6b963c42f013ceb53c9715144bfb52d700d015387e4fae2918a9cd"
           ]
         },
         {
-          "name": "mlen",
-          "kind": "input",
-          "type": "uint32"
-        },
-        {
-          "name": "m",
+          "name": "pubKey",
           "kind": "input",
           "type": "buffer",
-          "size": "mlen",
+          "size": 64,
           "interface_index": 0,
           "tests": [
-              "1ccbe91c075fc7f4f033bfa248db8fccd3565de94bbfb12f3c59ff46c271bf83"
+              "700c48f77f56584c5cc632ca65640db91b6bacce3a4df6b42ce7cc838833d287db71e509e3fd9b060ddb20ba5c51dcc5948d46fbf640dfe0441782cab85fa4ac"
           ]
         },
         {
-          "name": "privkey",
+          "name": "scalar",
           "kind": "input",
           "type": "buffer",
           "size": 32,
           "interface_index": 1,
           "tests": [
-              "519b423d715f8b581f4fa8ee59f4771a5b44c8130b4e3eacca54a56dda72b464"
-          ]
-        },
-        {
-          "name": "k",
-          "kind": "input",
-          "type": "buffer",
-          "size": 32,
-          "interface_index": 2,
-          "tests": [
-              "94a1bbb14b906a61a280f245f9e93c7f3b4a6247824f5d33b9670787642a68de"
+              "7d7dc5f71eb29ddaf80d6214632eeae03d9058af1fb6d22ed80badb62bc1a534"
           ]
         }
       ],
@@ -1978,183 +1944,18 @@
         ]
       }
     },
-    "ecdsa_verif_without_hash": {
+    "is_more_than_zero_less_than_order": {
       "module": "Hacl_P256",
-      "name": "ecdsa_verif_without_hash",
+      "name": "is_more_than_zero_less_than_order",
       "args": [{
-          "name": "mlen",
-          "kind": "input",
-          "type": "uint32"
-        },
-        {
-          "name": "m",
-          "kind": "input",
-          "type": "buffer",
-          "size": "mlen",
-          "interface_index": 0,
-          "tests": [
-              "1ccbe91c075fc7f4f033bfa248db8fccd3565de94bbfb12f3c59ff46c271bf83"
-          ]
-        },
-        {
-          "name": "pubkey",
-          "kind": "input",
-          "type": "buffer",
-          "size": 64,
-          "interface_index": 1,
-          "tests": [
-              "1ccbe91c075fc7f4f033bfa248db8fccd3565de94bbfb12f3c59ff46c271bf83ce4014c68811f9a21a1fdb2c0e6113e06db7ca93b7404e78dc7ccd5ca89a4ca9"
-          ]
-        },
-        {
-          "name": "r",
-          "kind": "input",
-          "type": "buffer",
-          "size": 32,
-          "interface_index": 2,
-          "tests": [
-              "f3ac8061b514795b8843e3d6629527ed2afd6b1f6a555a7acabb5e6f79c8c2ac"
-          ]
-        },
-        {
-          "name": "s",
-          "kind": "input",
-          "type": "buffer",
-          "size": 32,
-          "interface_index": 3,
-          "tests": [
-              "cfa740fec76796d2e39216be7ebf580ea3c0ef4bb00ab2e7e4208434f45f8c9c"
-          ]
-        }
-      ],
-      "return": {
-        "type": "bool",
-        "tests": [ "true" ]
-      }
-    },
-    "ecdsa_sign_sha2": {
-      "module": "Hacl_P256",
-      "name": "ecdsa_sign_p256_sha2",
-      "args": [{
-          "name": "result",
-          "kind": "output",
-          "type": "buffer",
-          "size": 64,
-          "tests": [
-              "f3ac8061b514795b8843e3d6629527ed2afd6b1f6a555a7acabb5e6f79c8c2ac8bf77819ca05a6b2786c76262bf7371cef97b218e96f175a3ccdda2acc058903"
-          ]
-        },
-        {
-          "name": "mlen",
-          "kind": "input",
-          "type": "uint32"
-        },
-        {
-          "name": "m",
-          "kind": "input",
-          "type": "buffer",
-          "size": "mlen",
-          "interface_index": 0,
-          "tests": [
-              "5905238877c77421f73e43ee3da6f2d9e2ccad5fc942dcec0cbd25482935faaf416983fe165b1a045ee2bcd2e6dca3bdf46c4310a7461f9a37960ca672d3feb5473e253605fb1ddfd28065b53cb5858a8ad28175bf9bd386a5e471ea7a65c17cc934a9d791e91491eb3754d03799790fe2d308d16146d5c9b0d0debd97d79ce8"
-          ]
-        },
-        {
-          "name": "privkey",
-          "kind": "input",
-          "type": "buffer",
-          "size": 32,
-          "interface_index": 1,
-          "tests": [
-              "519b423d715f8b581f4fa8ee59f4771a5b44c8130b4e3eacca54a56dda72b464"
-          ]
-        },
-        {
-          "name": "k",
-          "kind": "input",
-          "type": "buffer",
-          "size": 32,
-          "interface_index": 2,
-          "tests": [
-              "94a1bbb14b906a61a280f245f9e93c7f3b4a6247824f5d33b9670787642a68de"
-          ]
-        }
-      ],
-      "return": {
-        "type": "bool",
-        "tests": [
-            "true"
-        ]
-      }
-    },
-    "ecdsa_verif_sha2": {
-      "module": "Hacl_P256",
-      "name": "ecdsa_verif_p256_sha2",
-      "args": [{
-          "name": "mlen",
-          "kind": "input",
-          "type": "uint32"
-        },
-        {
-          "name": "m",
-          "kind": "input",
-          "type": "buffer",
-          "size": "mlen",
-          "interface_index": 0,
-          "tests": [
-              "5905238877c77421f73e43ee3da6f2d9e2ccad5fc942dcec0cbd25482935faaf416983fe165b1a045ee2bcd2e6dca3bdf46c4310a7461f9a37960ca672d3feb5473e253605fb1ddfd28065b53cb5858a8ad28175bf9bd386a5e471ea7a65c17cc934a9d791e91491eb3754d03799790fe2d308d16146d5c9b0d0debd97d79ce8"
-          ]
-        },
-        {
-          "name": "pubkey",
-          "kind": "input",
-          "type": "buffer",
-          "size": 64,
-          "interface_index": 1,
-          "tests": [
-              "1ccbe91c075fc7f4f033bfa248db8fccd3565de94bbfb12f3c59ff46c271bf83ce4014c68811f9a21a1fdb2c0e6113e06db7ca93b7404e78dc7ccd5ca89a4ca9"
-          ]
-        },
-        {
-          "name": "r",
-          "kind": "input",
-          "type": "buffer",
-          "size": 32,
-          "interface_index": 2,
-          "tests": [
-              "f3ac8061b514795b8843e3d6629527ed2afd6b1f6a555a7acabb5e6f79c8c2ac"
-          ]
-        },
-        {
-          "name": "s",
+          "name": "pubKey",
           "kind": "input",
           "type": "buffer",
           "size": 32,
-          "interface_index": 3,
-          "tests": [
-              "8bf77819ca05a6b2786c76262bf7371cef97b218e96f175a3ccdda2acc058903"
-          ]
-        }
-      ],
-      "return": {
-        "type": "bool",
-        "tests": [
-            "true"
-        ]
-      }
-    },
-    "validate_public_key": {
-      "module": "Hacl_P256",
-      "name": "validate_public_key",
-      "args": [{
-          "name": "pubKey",
-          "kind": "input",
-          "type": "buffer",
-          "size": 64,
           "interface_index": 0,
           "tests": [
-              "1ccbe91c075fc7f4f033bfa248db8fccd3565de94bbfb12f3c59ff46c271bf83ce4014c68811f9a21a1fdb2c0e6113e06db7ca93b7404e78dc7ccd5ca89a4ca9",
-              "f3ac8061b514795b8843e3d6629527ed2afd6b1f6a555a7acabb5e6f79c8c2ac8bf77819ca05a6b2786c76262bf7371cef97b218e96f175a3ccdda2acc058903"
+              "519b423d715f8b581f4fa8ee59f4771a5b44c8130b4e3eacca54a56dda72b464",
+              "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
           ]
         }
       ],
@@ -2165,1620 +1966,6 @@
             "false"
         ]
       }
-    },
-    "uncompressed_to_raw": {
-      "module": "Hacl_P256",
-      "name": "uncompressed_to_raw",
-      "args": [{
-          "name": "b",
-          "kind": "input",
-          "type": "buffer",
-          "size": 65,
-          "interface_index": 0,
-          "tests": [
-              "04700c48f77f56584c5cc632ca65640db91b6bacce3a4df6b42ce7cc838833d287db71e509e3fd9b060ddb20ba5c51dcc5948d46fbf640dfe0441782cab85fa4ac"
-          ]
-        },
-        {
-          "name": "result",
-          "kind": "output",
-          "type": "buffer",
-          "size": 64,
-          "tests": [
-              "700c48f77f56584c5cc632ca65640db91b6bacce3a4df6b42ce7cc838833d287db71e509e3fd9b060ddb20ba5c51dcc5948d46fbf640dfe0441782cab85fa4ac"
-          ]
-        }
-      ],
-      "return": {
-        "type": "bool",
-        "tests": [
-            "true"
-        ]
-      }
-    },
-    "compressed_to_raw": {
-      "module": "Hacl_P256",
-      "name": "compressed_to_raw",
-      "args": [{
-          "name": "b",
-          "kind": "input",
-          "type": "buffer",
-          "size": 33,
-          "interface_index": 0,
-          "tests": [
-              "02700c48f77f56584c5cc632ca65640db91b6bacce3a4df6b42ce7cc838833d287"
-          ]
-        },
-        {
-          "name": "result",
-          "kind": "output",
-          "type": "buffer",
-          "size": 64,
-          "tests": [
-              "700c48f77f56584c5cc632ca65640db91b6bacce3a4df6b42ce7cc838833d287db71e509e3fd9b060ddb20ba5c51dcc5948d46fbf640dfe0441782cab85fa4ac"
-          ]
-        }
-      ],
-      "return": {
-        "type": "bool",
-        "tests": [
-            "true"
-        ]
-      }
-    },
-    "raw_to_uncompressed": {
-      "module": "Hacl_P256",
-      "name": "raw_to_uncompressed",
-      "args": [{
-          "name": "b",
-          "kind": "input",
-          "type": "buffer",
-          "size": 64,
-          "interface_index": 0,
-          "tests": [
-              "700c48f77f56584c5cc632ca65640db91b6bacce3a4df6b42ce7cc838833d287db71e509e3fd9b060ddb20ba5c51dcc5948d46fbf640dfe0441782cab85fa4ac"
-          ]
-        },
-        {
-          "name": "result",
-          "kind": "output",
-          "type": "buffer",
-          "size": 65,
-          "tests": [
-              "04700c48f77f56584c5cc632ca65640db91b6bacce3a4df6b42ce7cc838833d287db71e509e3fd9b060ddb20ba5c51dcc5948d46fbf640dfe0441782cab85fa4ac"
-          ]
-        }
-      ],
-      "return": {
-        "type": "void"
-      }
-    },
-    "raw_to_compressed": {
-      "module": "Hacl_P256",
-      "name": "raw_to_compressed",
-      "args": [{
-          "name": "b",
-          "kind": "input",
-          "type": "buffer",
-          "size": 64,
-          "interface_index": 0,
-          "tests": [
-              "700c48f77f56584c5cc632ca65640db91b6bacce3a4df6b42ce7cc838833d287db71e509e3fd9b060ddb20ba5c51dcc5948d46fbf640dfe0441782cab85fa4ac"
-          ]
-        },
-        {
-          "name": "result",
-          "kind": "output",
-          "type": "buffer",
-          "size": 33,
-          "tests": [
-              "02700c48f77f56584c5cc632ca65640db91b6bacce3a4df6b42ce7cc838833d287"
-          ]
-        }
-      ],
-      "return": {
-        "type": "void"
-      }
-    },
-    "dh_initiator": {
-      "module": "Hacl_P256",
-      "name": "dh_initiator",
-      "args": [{
-          "name": "result",
-          "kind": "output",
-          "type": "buffer",
-          "size": 64,
-          "tests": [
-              "e266ddfdc12668db30d4ca3e8f7749432c416044f2d2b8c10bf3d4012aeffa8abfa86404a2e9ffe67d47c587ef7a97a7f456b863b4d02cfc6928973ab5b1cb39"
-          ]
-        },
-        {
-          "name": "scalar",
-          "kind": "input",
-          "type": "buffer",
-          "size": 32,
-          "interface_index": 0,
-          "tests": [
-              "0f56db78ca460b055c500064824bed999a25aaf48ebb519ac201537b85479813"
-          ]
-        }
-      ],
-      "return": {
-        "type": "bool",
-        "tests": [
-            "true"
-        ]
-      }
-    },
-    "dh_responder": {
-      "module": "Hacl_P256",
-      "name": "dh_responder",
-      "args": [{
-          "name": "result",
-          "kind": "output",
-          "type": "buffer",
-          "size": 64,
-          "tests": [
-              "46fc62106420ff012e54a434fbdd2d25ccc5852060561e68040dd7778997bd7bc553079d5a6b963c42f013ceb53c9715144bfb52d700d015387e4fae2918a9cd"
-          ]
-        },
-        {
-          "name": "pubKey",
-          "kind": "input",
-          "type": "buffer",
-          "size": 64,
-          "interface_index": 0,
-          "tests": [
-              "700c48f77f56584c5cc632ca65640db91b6bacce3a4df6b42ce7cc838833d287db71e509e3fd9b060ddb20ba5c51dcc5948d46fbf640dfe0441782cab85fa4ac"
-          ]
-        },
-        {
-          "name": "scalar",
-          "kind": "input",
-          "type": "buffer",
-          "size": 32,
-          "interface_index": 1,
-          "tests": [
-              "7d7dc5f71eb29ddaf80d6214632eeae03d9058af1fb6d22ed80badb62bc1a534"
-          ]
-        }
-      ],
-      "return": {
-        "type": "bool",
-        "tests": [
-            "true"
-        ]
-      }
-    },
-    "validate_private_key": {
-      "module": "Hacl_P256",
-      "name": "validate_private_key",
-      "args": [{
-          "name": "pubKey",
-          "kind": "input",
-          "type": "buffer",
-          "size": 32,
-          "interface_index": 0,
-          "tests": [
-              "519b423d715f8b581f4fa8ee59f4771a5b44c8130b4e3eacca54a56dda72b464",
-              "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
-          ]
-        }
-      ],
-      "return": {
-        "type": "bool",
-        "tests": [
-            "true",
-            "false"
-        ]
-      }
-    }
-  },
-  "Bignum_64": {
-    "add": {
-      "module": "Hacl_Bignum64",
-      "name": "add_packed",
-      "args": [{
-          "name": "len",
-          "kind": "input",
-          "type": "uint32",
-          "tests": [
-          ]
-        },
-        {
-          "name": "a",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 0,
-          "tests": [
-          ]
-        },
-        {
-          "name": "b",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 1,
-          "tests": [
-          ]
-        },
-        {
-          "name": "out",
-          "kind": "output",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "tests": [
-          ]
-        }
-      ],
-      "return": {
-        "type": "uint64",
-        "tests": []
-      }
-    },
-    "add_mod": {
-      "module": "Hacl_Bignum64",
-      "name": "add_mod",
-      "args": [{
-          "name": "len",
-          "kind": "input",
-          "type": "uint32",
-          "tests": [
-          ]
-        },
-        {
-          "name": "n",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 0,
-          "tests": [
-          ]
-        },
-        {
-          "name": "a",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 1,
-          "tests": [
-          ]
-        },
-        {
-          "name": "b",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 2,
-          "tests": [
-          ]
-        },
-        {
-          "name": "out",
-          "kind": "output",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "tests": [
-          ]
-        }
-      ],
-      "return": {
-        "type": "void",
-        "tests": []
-      }
-    },
-    "sub": {
-      "module": "Hacl_Bignum64",
-      "name": "sub_packed",
-      "args": [{
-          "name": "len",
-          "kind": "input",
-          "type": "uint32",
-          "tests": [
-          ]
-        },
-        {
-          "name": "a",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 0,
-          "tests": [
-          ]
-        },
-        {
-          "name": "b",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 1,
-          "tests": [
-          ]
-        },
-        {
-          "name": "out",
-          "kind": "output",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "tests": [
-          ]
-        }
-      ],
-      "return": {
-        "type": "uint64",
-        "tests": []
-      }
-    },
-    "sub_mod": {
-      "module": "Hacl_Bignum64",
-      "name": "sub_mod",
-      "args": [{
-          "name": "len",
-          "kind": "input",
-          "type": "uint32",
-          "tests": [
-          ]
-        },
-        {
-          "name": "n",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 0,
-          "tests": [
-          ]
-        },
-        {
-          "name": "a",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 1,
-          "tests": [
-          ]
-        },
-        {
-          "name": "b",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 2,
-          "tests": [
-          ]
-        },
-        {
-          "name": "out",
-          "kind": "output",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "tests": [
-          ]
-        }
-      ],
-      "return": {
-        "type": "void",
-        "tests": []
-      }
-    },
-    "mul": {
-      "module": "Hacl_Bignum64",
-      "name": "mul",
-      "args": [{
-          "name": "len",
-          "kind": "input",
-          "type": "uint32",
-          "tests": [
-          ]
-        },
-        {
-          "name": "a",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 0,
-          "tests": [
-          ]
-        },
-        {
-          "name": "b",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 1,
-          "tests": [
-          ]
-        },
-        {
-          "name": "out",
-          "kind": "output",
-          "type": "buffer(uint64)",
-          "size": "len*2",
-          "tests": [
-          ]
-        }
-      ],
-      "return": {
-        "type": "void",
-        "tests": []
-      }
-    },
-    "sqr": {
-      "module": "Hacl_Bignum64",
-      "name": "sqr",
-      "args": [{
-          "name": "len",
-          "kind": "input",
-          "type": "uint32",
-          "tests": [
-          ]
-        },
-        {
-          "name": "a",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 0,
-          "tests": [
-          ]
-        },
-        {
-          "name": "out",
-          "kind": "output",
-          "type": "buffer(uint64)",
-          "size": "len*2",
-          "tests": [
-          ]
-        }
-      ],
-      "return": {
-        "type": "void",
-        "tests": []
-      }
-    },
-    "mod": {
-      "module": "Hacl_Bignum64",
-      "name": "mod",
-      "args": [{
-          "name": "len",
-          "kind": "input",
-          "type": "uint32",
-          "tests": [
-          ]
-        },
-        {
-          "name": "n",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 0,
-          "tests": []
-        },
-        {
-          "name": "a",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len*2",
-          "interface_index": 1,
-          "tests": []
-        },
-        {
-          "name": "out",
-          "kind": "output",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "tests": []
-        }
-      ],
-      "return": {
-        "type": "void",
-        "tests": []
-      }
-    },
-    "mod_exp_consttime": {
-      "module": "Hacl_Bignum64",
-      "name": "mod_exp_consttime",
-      "args": [{
-          "name": "len",
-          "kind": "input",
-          "type": "uint32",
-          "tests": [
-          ]
-        },
-        {
-          "name": "n",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 0,
-          "tests": []
-        },
-        {
-          "name": "a",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 1,
-          "tests": [
-          ]
-        },
-        {
-          "name": "bBits",
-          "kind": "input",
-          "type": "uint32",
-          "tests": [
-          ]
-        },
-        {
-          "name": "b",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "bBits/64",
-          "interface_index": 2,
-          "tests": [
-          ]
-        },
-        {
-          "name": "out",
-          "kind": "output",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "tests": [
-          ]
-        }
-      ],
-      "return": {
-        "type": "void",
-        "tests": []
-      }
-    },
-    "mod_exp_vartime": {
-      "module": "Hacl_Bignum64",
-      "name": "mod_exp_vartime",
-      "args": [{
-          "name": "len",
-          "kind": "input",
-          "type": "uint32",
-          "tests": [
-          ]
-        },
-        {
-          "name": "n",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 0,
-          "tests": []
-        },
-        {
-          "name": "a",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 1,
-          "tests": [
-          ]
-        },
-        {
-          "name": "bBits",
-          "kind": "input",
-          "type": "uint32",
-          "tests": [
-          ]
-        },
-        {
-          "name": "b",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "bBits/64",
-          "interface_index": 2,
-          "tests": [
-          ]
-        },
-        {
-          "name": "out",
-          "kind": "output",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "tests": [
-          ]
-        }
-      ],
-      "return": {
-        "type": "void",
-        "tests": []
-      }
-    },
-    "mod_inv_prime_vartime": {
-      "module": "Hacl_Bignum64",
-      "name": "mod_inv_prime_vartime",
-      "args": [{
-          "name": "len",
-          "kind": "input",
-          "type": "uint32",
-          "tests": [
-          ]
-        },
-        {
-          "name": "n",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 0,
-          "tests": []
-        },
-        {
-          "name": "a",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 1,
-          "tests": [
-          ]
-        },
-        {
-          "name": "out",
-          "kind": "output",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "tests": [
-          ]
-        }
-      ],
-      "return": {
-        "type": "void",
-        "tests": []
-      }
-    },
-    "mont_ctx_init": {
-      "module": "Hacl_Bignum64",
-      "name": "mont_ctx_init",
-      "args": [{
-          "name": "len",
-          "kind": "input",
-          "type": "uint32",
-          "tests": [
-          ]
-        },
-        {
-          "name": "limbs",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 0,
-          "tests": [
-          ]
-        }
-      ],
-      "return": {
-        "kind": "layout",
-        "type": "Hacl_Bignum_MontArithmetic_bn_mont_ctx_u64"
-      }
-    },
-    "mod_precomp": {
-      "module": "Hacl_Bignum64",
-      "name": "mod_precomp",
-      "args": [{
-          "name": "ctx",
-          "kind": "input",
-          "type": "Hacl_Bignum_MontArithmetic_bn_mont_ctx_u64",
-          "interface_index": 0,
-          "tests": []
-        },
-        {
-          "name": "a",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len*2",
-          "interface_index": 1,
-          "tests": []
-        },
-        {
-          "name": "out",
-          "kind": "output",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "tests": []
-        }
-      ],
-      "return": {
-        "type": "void",
-        "tests": []
-      }
-    },
-    "mod_exp_vartime_precomp": {
-      "module": "Hacl_Bignum64",
-      "name": "mod_exp_vartime_precomp",
-      "args": [{
-          "name": "ctx",
-          "kind": "input",
-          "type": "Hacl_Bignum_MontArithmetic_bn_mont_ctx_u64",
-          "interface_index": 0,
-          "tests": []
-        },
-        {
-          "name": "a",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 1,
-          "tests": [
-          ]
-        },
-        {
-          "name": "bBits",
-          "kind": "input",
-          "type": "uint32",
-          "tests": [
-          ]
-        },
-        {
-          "name": "b",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "bBits/64",
-          "interface_index": 2,
-          "tests": [
-          ]
-        },
-        {
-          "name": "out",
-          "kind": "output",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "tests": [
-          ]
-        }
-      ],
-      "return": {
-        "type": "void",
-        "tests": []
-      }
-    },
-    "mod_exp_consttime_precomp": {
-      "module": "Hacl_Bignum64",
-      "name": "mod_exp_consttime_precomp",
-      "args": [{
-          "name": "ctx",
-          "kind": "input",
-          "type": "Hacl_Bignum_MontArithmetic_bn_mont_ctx_u64",
-          "interface_index": 0,
-          "tests": []
-        },
-        {
-          "name": "a",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 1,
-          "tests": [
-          ]
-        },
-        {
-          "name": "bBits",
-          "kind": "input",
-          "type": "uint32",
-          "tests": [
-          ]
-        },
-        {
-          "name": "b",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "bBits/64",
-          "interface_index": 2,
-          "tests": [
-          ]
-        },
-        {
-          "name": "out",
-          "kind": "output",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "tests": [
-          ]
-        }
-      ],
-      "return": {
-        "type": "void",
-        "tests": []
-      }
-    },
-    "mod_inv_prime_vartime_precomp": {
-      "module": "Hacl_Bignum64",
-      "name": "mod_inv_prime_vartime_precomp",
-      "args": [{
-          "name": "ctx",
-          "kind": "input",
-          "type": "Hacl_Bignum_MontArithmetic_bn_mont_ctx_u64",
-          "interface_index": 0,
-          "tests": []
-        },
-        {
-          "name": "a",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 1,
-          "tests": [
-          ]
-        },
-        {
-          "name": "out",
-          "kind": "output",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "tests": [
-          ]
-        }
-      ],
-      "return": {
-        "type": "void",
-        "tests": []
-      }
-    },
-    "new_bn_from_bytes_le": {
-      "module": "Hacl_Bignum64",
-      "name": "new_bn_from_bytes_le",
-      "args": [{
-          "name": "len",
-          "kind": "input",
-          "type": "uint32",
-          "tests": [
-          ]
-        },
-        {
-          "name": "bytes",
-          "kind": "input",
-          "type": "buffer",
-          "size": "len",
-          "interface_index": 0,
-          "tests": [
-          ]
-        }
-      ],
-      "return": {
-        "kind": "layout",
-        "type": "buffer(uint64)"
-      }
-    },
-    "bn_to_bytes_le": {
-      "module": "Hacl_Bignum64",
-      "name": "bn_to_bytes_le",
-      "args": [{
-          "name": "len",
-          "kind": "input",
-          "type": "uint32",
-          "tests": [
-          ]
-        },{
-          "name": "b",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len/8",
-          "interface_index": 0,
-          "tests": []
-        },
-        {
-          "name": "out",
-          "kind": "output",
-          "type": "buffer",
-          "size": "len",
-          "tests": []
-        }
-      ],
-      "return": {
-        "type": "void",
-        "tests": []
-      }
-    },
-    "new_bn_from_bytes_be": {
-      "module": "Hacl_Bignum64",
-      "name": "new_bn_from_bytes_be",
-      "args": [{
-          "name": "len",
-          "kind": "input",
-          "type": "uint32",
-          "tests": [
-          ]
-        },
-        {
-          "name": "bytes",
-          "kind": "input",
-          "type": "buffer",
-          "size": "len",
-          "interface_index": 0,
-          "tests": [
-          ]
-        }
-      ],
-      "return": {
-        "kind": "layout",
-        "type": "buffer(uint64)"
-      }
-    },
-    "bn_to_bytes_be": {
-      "module": "Hacl_Bignum64",
-      "name": "bn_to_bytes_be",
-      "args": [{
-          "name": "len",
-          "kind": "input",
-          "type": "uint32",
-          "tests": [
-          ]
-        },{
-          "name": "b",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len/8",
-          "interface_index": 0,
-          "tests": []
-        },
-        {
-          "name": "out",
-          "kind": "output",
-          "type": "buffer",
-          "size": "len",
-          "tests": []
-        }
-      ],
-      "return": {
-        "type": "void",
-        "tests": []
-      }
-    },
-    "lt_mask": {
-      "module": "Hacl_Bignum64",
-      "name": "lt_mask_packed",
-      "args": [{
-          "name": "len",
-          "kind": "input",
-          "type": "uint32",
-          "tests": [
-          ]
-        },{
-          "name": "a",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 0,
-          "tests": []
-        },{
-          "name": "b",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 1,
-          "tests": []
-        }
-      ],
-      "return": {
-        "type": "uint64",
-        "tests": []
-      }
-    },
-    "eq_mask": {
-      "module": "Hacl_Bignum64",
-      "name": "eq_mask_packed",
-      "args": [{
-          "name": "len",
-          "kind": "input",
-          "type": "uint32",
-          "tests": [
-          ]
-        },{
-          "name": "a",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 0,
-          "tests": []
-        },{
-          "name": "b",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 1,
-          "tests": []
-        }
-      ],
-      "return": {
-        "type": "uint64",
-        "tests": []
-      }
-    }
-  },
-  "Bignum_Montgomery_64": {
-    "field_modulus_check": {
-      "module": "Hacl_GenericField64",
-      "name": "field_modulus_check",
-      "args": [{
-          "name": "len",
-          "kind": "input",
-          "type": "uint32",
-          "tests": [
-          ]
-        },
-        {
-          "name": "limbs",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 0,
-          "tests": [
-          ]
-        }
-      ],
-      "return": {
-        "type": "bool"
-      }
-    },
-    "field_get_len": {
-      "module": "Hacl_GenericField64",
-      "name": "field_get_len",
-      "args": [{
-          "name": "ctx",
-          "kind": "input",
-          "type": "Hacl_Bignum_MontArithmetic_bn_mont_ctx_u64",
-          "interface_index": 0,
-          "tests": [
-          ]
-        }
-      ],
-      "return": {
-        "type": "uint32"
-      }
-    },
-    "field_init": {
-      "module": "Hacl_GenericField64",
-      "name": "field_init",
-      "args": [{
-          "name": "len",
-          "kind": "input",
-          "type": "uint32",
-          "tests": [
-          ]
-        },
-        {
-          "name": "limbs",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 0,
-          "tests": [
-          ]
-        }
-      ],
-      "return": {
-        "kind": "layout",
-        "type": "Hacl_Bignum_MontArithmetic_bn_mont_ctx_u64"
-      }
-    },
-    "to_field": {
-      "module": "Hacl_GenericField64",
-      "name": "to_field",
-      "args": [{
-          "name": "ctx",
-          "kind": "input",
-          "type": "Hacl_Bignum_MontArithmetic_bn_mont_ctx_u64",
-          "interface_index": 0,
-          "tests": [
-          ]
-        },
-        {
-          "name": "a",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 1,
-          "tests": [
-          ]
-        },
-        {
-          "name": "aM",
-          "kind": "output",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "tests": [
-          ]
-        }
-      ],
-      "return": {
-        "type": "void",
-        "tests": []
-      }
-    },
-    "from_field": {
-      "module": "Hacl_GenericField64",
-      "name": "from_field",
-      "args": [{
-          "name": "ctx",
-          "kind": "input",
-          "type": "Hacl_Bignum_MontArithmetic_bn_mont_ctx_u64",
-          "interface_index": 0,
-          "tests": [
-          ]
-        },
-        {
-          "name": "aM",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 1,
-          "tests": [
-          ]
-        },
-        {
-          "name": "a",
-          "kind": "output",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "tests": [
-          ]
-        }
-      ],
-      "return": {
-        "type": "void",
-        "tests": []
-      }
-    },
-    "mul": {
-      "module": "Hacl_GenericField64",
-      "name": "mul",
-      "args": [{
-          "name": "ctx",
-          "kind": "input",
-          "type": "Hacl_Bignum_MontArithmetic_bn_mont_ctx_u64",
-          "interface_index": 0,
-          "tests": [
-          ]
-        },
-        {
-          "name": "a",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 1,
-          "tests": [
-          ]
-        },
-        {
-          "name": "b",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 2,
-          "tests": [
-          ]
-        },
-        {
-          "name": "out",
-          "kind": "output",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "tests": [
-          ]
-        }
-      ],
-      "return": {
-        "type": "void",
-        "tests": []
-      }
-    },
-    "add": {
-      "module": "Hacl_GenericField64",
-      "name": "add",
-      "args": [{
-          "name": "ctx",
-          "kind": "input",
-          "type": "Hacl_Bignum_MontArithmetic_bn_mont_ctx_u64",
-          "interface_index": 0,
-          "tests": [
-          ]
-        },
-        {
-          "name": "a",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 1,
-          "tests": [
-          ]
-        },
-        {
-          "name": "b",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 2,
-          "tests": [
-          ]
-        },
-        {
-          "name": "out",
-          "kind": "output",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "tests": [
-          ]
-        }
-      ],
-      "return": {
-        "type": "void",
-        "tests": []
-      }
-    },
-    "sub": {
-      "module": "Hacl_GenericField64",
-      "name": "sub",
-      "args": [{
-          "name": "ctx",
-          "kind": "input",
-          "type": "Hacl_Bignum_MontArithmetic_bn_mont_ctx_u64",
-          "interface_index": 0,
-          "tests": [
-          ]
-        },
-        {
-          "name": "a",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 1,
-          "tests": [
-          ]
-        },
-        {
-          "name": "b",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 2,
-          "tests": [
-          ]
-        },
-        {
-          "name": "out",
-          "kind": "output",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "tests": [
-          ]
-        }
-      ],
-      "return": {
-        "type": "void",
-        "tests": []
-      }
-    },
-    "sqr": {
-      "module": "Hacl_GenericField64",
-      "name": "sqr",
-      "args": [{
-          "name": "ctx",
-          "kind": "input",
-          "type": "Hacl_Bignum_MontArithmetic_bn_mont_ctx_u64",
-          "interface_index": 0,
-          "tests": [
-          ]
-        },
-        {
-          "name": "a",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 1,
-          "tests": [
-          ]
-        },
-        {
-          "name": "out",
-          "kind": "output",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "tests": [
-          ]
-        }
-      ],
-      "return": {
-        "type": "void",
-        "tests": []
-      }
-    },
-    "inverse": {
-      "module": "Hacl_GenericField64",
-      "name": "inverse",
-      "args": [{
-          "name": "ctx",
-          "kind": "input",
-          "type": "Hacl_Bignum_MontArithmetic_bn_mont_ctx_u64",
-          "interface_index": 0,
-          "tests": [
-          ]
-        },
-        {
-          "name": "a",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 1,
-          "tests": [
-          ]
-        },
-        {
-          "name": "out",
-          "kind": "output",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "tests": [
-          ]
-        }
-      ],
-      "return": {
-        "type": "void",
-        "tests": []
-      }
-    },
-    "exp_consttime": {
-      "module": "Hacl_GenericField64",
-      "name": "exp_consttime",
-      "args": [{
-          "name": "ctx",
-          "kind": "input",
-          "type": "Hacl_Bignum_MontArithmetic_bn_mont_ctx_u64",
-          "interface_index": 0,
-          "tests": [
-          ]
-        },
-        {
-          "name": "a",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 1,
-          "tests": [
-          ]
-        },
-        {
-          "name": "bBits",
-          "kind": "input",
-          "type": "uint32",
-          "tests": [
-          ]
-        },
-        {
-          "name": "b",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "bBits/64",
-          "interface_index": 2,
-          "tests": [
-          ]
-        },
-        {
-          "name": "out",
-          "kind": "output",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "tests": [
-          ]
-        }
-      ],
-      "return": {
-        "type": "void",
-        "tests": []
-      }
-    },
-    "exp_vartime": {
-      "module": "Hacl_GenericField64",
-      "name": "exp_vartime",
-      "args": [{
-          "name": "ctx",
-          "kind": "input",
-          "type": "Hacl_Bignum_MontArithmetic_bn_mont_ctx_u64",
-          "interface_index": 0,
-          "tests": [
-          ]
-        },
-        {
-          "name": "a",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "interface_index": 1,
-          "tests": [
-          ]
-        },
-        {
-          "name": "bBits",
-          "kind": "input",
-          "type": "uint32",
-          "tests": [
-          ]
-        },
-        {
-          "name": "b",
-          "kind": "input",
-          "type": "buffer(uint64)",
-          "size": "bBits/64",
-          "interface_index": 2,
-          "tests": [
-          ]
-        },
-        {
-          "name": "out",
-          "kind": "output",
-          "type": "buffer(uint64)",
-          "size": "len",
-          "tests": [
-          ]
-        }
-      ],
-      "return": {
-        "type": "void",
-        "tests": []
-      }
-    }
-  },
-  "EverCrypt_Hash": {
-    "hash_len": {
-      "module": "EverCrypt_Hash",
-      "custom_module_name": true,
-      "name": "EverCrypt_Hash_Incremental_hash_len",
-      "args": [{
-          "name": "hash_alg",
-          "kind": "input",
-          "type": "uint32",
-          "interface_index": 0,
-          "tests": [
-            3
-          ]
-        }
-      ],
-      "return": {
-        "type": "uint32",
-        "tests": [
-          64
-        ]
-      }
-    },
-    "hash": {
-      "module": "EverCrypt_Hash",
-      "custom_module_name": true,
-      "name": "EverCrypt_Hash_Incremental_hash",
-      "args": [{
-          "name": "hash_alg",
-          "kind": "input",
-          "type": "uint32",
-          "interface_index": 0,
-          "tests": [
-            3
-          ]
-        },
-        {
-          "name": "hash",
-          "kind": "output",
-          "type": "buffer",
-          "size": "EverCrypt_Hash.hash_len(hash_alg)",
-          "tests": [
-            "ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f"
-          ]
-        },
-        {
-          "name": "input",
-          "kind": "input",
-          "type": "buffer",
-          "size": "input_len",
-          "interface_index": 1,
-          "tests": [
-            "616263"
-          ]
-        },
-        {
-          "name": "input_len",
-          "kind": "input",
-          "type": "uint32"
-        }
-      ],
-      "return": {
-        "type": "void"
-      }
-    },
-    "alg_of_state": {
-      "module": "EverCrypt_Hash",
-      "custom_module_name": true,
-      "name": "EverCrypt_Hash_Incremental_alg_of_state",
-      "args": [{
-          "name": "state",
-          "kind": "input",
-          "type": "EverCrypt_Hash_Incremental_hash_state",
-          "interface_index": 0,
-          "tests": [
-          ]
-        }
-      ],
-      "return": {
-        "type": "uint32",
-        "tests": [
-        ]
-      }
-    },
-    "create": {
-      "module": "EverCrypt_Hash",
-      "custom_module_name": true,
-      "name": "EverCrypt_Hash_Incremental_create_in",
-      "args": [{
-          "name": "hash_alg",
-          "kind": "input",
-          "type": "uint32",
-          "interface_index": 0,
-          "tests": [
-          ]
-        }
-      ],
-      "return": {
-        "kind": "layout",
-        "type": "EverCrypt_Hash_Incremental_hash_state",
-        "tests": [
-        ]
-      }
-    },
-    "update": {
-      "module": "EverCrypt_Hash",
-      "custom_module_name": true,
-      "name": "EverCrypt_Hash_Incremental_update",
-      "args": [{
-          "name": "state",
-          "kind": "output",
-          "type": "EverCrypt_Hash_Incremental_hash_state",
-          "interface_index": 0,
-          "tests": [
-          ]
-        },{
-          "name": "data",
-          "kind": "input",
-          "type": "buffer",
-          "size": "len",
-          "interface_index": 1,
-          "tests": [
-          ]
-        },{
-          "name": "len",
-          "kind": "input",
-          "type": "uint32"
-        }
-      ],
-      "return": {
-        "type": "uint32",
-        "tests": [
-        ]
-      }
-    },
-    "finish": {
-      "module": "EverCrypt_Hash",
-      "custom_module_name": true,
-      "name": "EverCrypt_Hash_Incremental_finish",
-      "args": [{
-          "name": "state",
-          "kind": "input",
-          "type": "EverCrypt_Hash_Incremental_hash_state",
-          "interface_index": 0,
-          "tests": [
-          ]
-        },{
-          "name": "hash",
-          "kind": "output",
-          "type": "buffer",
-          "size": "EverCrypt_Hash.hash_len(EverCrypt_Hash.alg_of_state(state))",
-          "tests": [
-          ]
-        }
-      ],
-      "return": {
-        "type": "void",
-        "tests": [
-        ]
-      }
     }
   }
 }
diff --git a/src/lib_hacl/gen/api_json.ml b/src/lib_hacl/gen/api_json.ml
index d3de0813fc..bd08d07e59 100644
--- a/src/lib_hacl/gen/api_json.ml
+++ b/src/lib_hacl/gen/api_json.ml
@@ -61,7 +61,7 @@ let parse_size = function
 let parse_typ json =
   match Ezjsonm.get_string json with
   | "void" -> Void
-  | "uint32" -> Int
+  | "int" -> Int
   | "buffer" -> Buffer
   | "bool" -> Bool
   | _ -> assert false
@@ -94,21 +94,13 @@ let parse_entry ~js_mod_name ~js_fun_name json =
   let return = parse_typ (field "type" (field "return" json)) in
   {js_mod_name; js_fun_name; wasm_fun_name; args; return}
 
-(* The generator does not currently support the format used to define these
- * modules in api.json. They are not used in lib_hacl, so no bindings are
- * required for them. *)
-let exclude_modules = ["Bignum_64"; "Bignum_Montgomery_64"; "EverCrypt_Hash"]
-
 let parse_file file : t list =
   let ic = open_in file in
   let json = Ezjsonm.from_channel ic in
   close_in ic ;
   List.concat_map
     (fun (js_mod_name, json) ->
-      if List.mem js_mod_name exclude_modules then []
-      else
-        List.map
-          (fun (js_fun_name, json) ->
-            parse_entry ~js_mod_name ~js_fun_name json)
-          (Ezjsonm.get_dict json))
+      List.map
+        (fun (js_fun_name, json) -> parse_entry ~js_mod_name ~js_fun_name json)
+        (Ezjsonm.get_dict json))
     (Ezjsonm.get_dict json)
diff --git a/src/lib_hacl/gen/dune b/src/lib_hacl/gen/dune
index 20b7160923..ecdf75560a 100644
--- a/src/lib_hacl/gen/dune
+++ b/src/lib_hacl/gen/dune
@@ -5,9 +5,6 @@
  (name gen0)
  (libraries
   compiler-libs.common)
- (link_flags
-  (:standard)
-  (:include %{workspace_root}/macos-link-flags.sexp))
  (modules gen0))
 
 (executable
diff --git a/src/lib_hacl/hacl.ml b/src/lib_hacl/hacl.ml
index e5b5d2ebaf..0b96b55ed5 100644
--- a/src/lib_hacl/hacl.ml
+++ b/src/lib_hacl/hacl.ml
@@ -203,12 +203,11 @@ module Secretbox = struct
   let genkey () = Rand.gen 32
 
   let secretbox ~key ~nonce ~msg ~cmsg =
-    if Hacl.NaCl.Noalloc.Easy.secretbox ~pt:msg ~n:nonce ~key ~ct:cmsg then
-      ()
+    if Hacl.NaCl.Noalloc.Easy.secretbox ~pt:msg ~n:nonce ~key ~ct:cmsg then ()
     else failwith "Secretbox encryption failed"
 
   let secretbox_open ~key ~nonce ~cmsg ~msg =
-    Hacl.NaCl.Noalloc.Easy.secretbox_open ~ct:cmsg ~n:nonce ~key ~pt:msg 
+    Hacl.NaCl.Noalloc.Easy.secretbox_open ~ct:cmsg ~n:nonce ~key ~pt:msg
 end
 
 module Box = struct
@@ -298,19 +297,30 @@ module Box = struct
     | None -> failwith "Error computing box_beforenm"
 
   let box ~k:(Ck k) ~nonce ~msg ~cmsg =
-    if
-      not
-      @@ Hacl.NaCl.Noalloc.Easy.box_afternm ~pt:msg ~n:nonce ~ck:k ~ct:cmsg
+    if not @@ Hacl.NaCl.Noalloc.Easy.box_afternm ~pt:msg ~n:nonce ~ck:k ~ct:cmsg
     then failwith "Box: encryption error"
 
   let box_open ~k:(Ck k) ~nonce ~cmsg ~msg =
     Hacl.NaCl.Noalloc.Easy.box_open_afternm ~ct:cmsg ~n:nonce ~ck:k ~pt:msg
 
   let box_noalloc ~k:(Ck k) ~nonce ~tag ~buf =
-    failwith "Box: encryption error"
+    if
+      not
+      @@ Hacl.NaCl.Noalloc.Detached.box_afternm
+           ~pt:buf
+           ~n:nonce
+           ~ck:k
+           ~ct:buf
+           ~tag
+    then failwith "Box: encryption error"
 
   let box_open_noalloc ~k:(Ck k) ~nonce ~tag ~buf =
-    failwith "Box: encryption error"
+    Hacl.NaCl.Noalloc.Detached.box_open_afternm
+      ~pt:buf
+      ~n:nonce
+      ~ck:k
+      ~ct:buf
+      ~tag
 end
 
 module type SIGNATURE = sig
@@ -396,28 +406,22 @@ module Ed25519 : SIGNATURE = struct
 end
 
 module P256 : SIGNATURE = struct
-  (* A public key is an elliptic curve point with 2 32-byte coordinates (x, y).
-     Internally we use 3 formats to represent public keys:
-     - "raw":          64 bytes, representing the concatenation of
-                       the 2 components. This is the representation used
-                       internally in HACL*.
-     - "compressed":   33 bytes, in which the first component is replaced by
-                       a single byte (either [\x02] or [\x03]). This is
-                       the representation used in [lib_crypto].
-     - "uncompressed": 65 bytes, same as "raw" but with one additional
-                       leading '\x04' byte, which identifies it as
-                       an uncompressed public key. This is the representation
-                       used by Ledger.
-     We bind the HACL* functions which convert between these representations.
-     More details about how they work can be found in Section 2.3.3 of
-     this document: http://www.secg.org/sec1-v2.pdf
-
-     Functions in this module manipulate raw keys, export compressed keys,
-     and import either compressed or uncompressed keys. *)
   type _ key = Sk : Bytes.t -> secret key | Pk : Bytes.t -> public key
 
   let size = 64
 
+  (* A public key is an elliptic curve point with 2 32-byte coordinates (x, y).
+   * Internally we use 3 formats to represent public keys:
+   * - "raw":          64 bytes, representing the concatenation of the 2 components
+   * - "compressed":   33 bytes, in which the first component is replaced by a single
+   *                   byte (either '\x02' or '\x03'). This is the default representation
+   *                   used throughout the interface.
+   * - "uncompressed": 65 bytes, same as "raw" but with one additional leading '\x04' byte,
+   *                   which identifies it as an uncompressed public key.
+   * We bind the HACL* functions which convert between these representations.
+   * More details about how they work can be found in Section 2.3.3 of this document:
+   * http://www.secg.org/sec1-v2.pdf *)
+
   let pk_size_raw = 64
 
   let pk_size = (pk_size_raw / 2) + 1
diff --git a/src/lib_hacl/test/dune b/src/lib_hacl/test/dune
index 7616997ae5..e068b907c9 100644
--- a/src/lib_hacl/test/dune
+++ b/src/lib_hacl/test/dune
@@ -3,77 +3,75 @@
 
 (env (_ (env-vars (NODE_PRELOAD hacl-wasm))))
 
-(library
- (name src_lib_hacl_test_tezt_lib)
- (instrumentation (backend bisect_ppx))
+(executables
+ (names test_hacl test_prop_hacl_hash test_prop_signature_pk)
+ (modes native js)
  (libraries
-  tezt.core
   tezos-stdlib
   tezos-error-monad
-  tz-lwtres-std
   zarith
   zarith_stubs_js
   data-encoding
   tezos-hacl
   qcheck-alcotest
-  octez-alcotezt
   tezos-test-helpers)
  (js_of_ocaml)
- (library_flags (:standard -linkall))
  (flags
   (:standard)
-  -open Tezt_core
-  -open Tezt_core.Base
   -open Tezos_stdlib
   -open Tezos_error_monad.TzLwtreslib
-  -open Tezos_lwt_result_stdlib
   -open Data_encoding
-  -open Tezos_hacl
-  -open Octez_alcotezt
-  -open Tezos_test_helpers)
- (modules
-  test_prop_signature_pk
-  test_hacl
-  test_prop_hacl_hash
-  test
-  vectors_p256
-  vectors_ed25519))
+  -open Tezos_hacl)
+ (modules (:standard \ test)))
 
-(executable
- (name main)
- (instrumentation (backend bisect_ppx --bisect-sigterm))
- (modes native)
- (libraries
-  src_lib_hacl_test_tezt_lib
-  tezt)
- (modules main))
+(rule
+ (alias runtest)
+ (package tezos-hacl)
+ (action (run %{dep:./test_hacl.exe})))
 
 (rule
  (alias runtest)
  (package tezos-hacl)
- (enabled_if (<> false %{env:RUNTEZTALIAS=true}))
- (action (run %{dep:./main.exe})))
+ (action (run %{dep:./test_prop_hacl_hash.exe})))
+
+(rule
+ (alias runtest)
+ (package tezos-hacl)
+ (action (run %{dep:./test_prop_signature_pk.exe})))
+
+(rule
+ (alias runtest_js)
+ (package tezos-hacl)
+ (action (run node %{dep:./test_hacl.bc.js})))
+
+(rule
+ (alias runtest_js)
+ (package tezos-hacl)
+ (action (run node %{dep:./test_prop_hacl_hash.bc.js})))
 
 (rule
- (targets main.ml)
- (action (with-stdout-to %{targets} (echo "let () = Tezt.Test.run ()"))))
+ (alias runtest_js)
+ (package tezos-hacl)
+ (action (run node %{dep:./test_prop_signature_pk.bc.js})))
 
 (executable
- (name main_js)
- (instrumentation (backend bisect_ppx --bisect-sigterm))
- (modes js)
+ (name test)
+ (modes native js)
  (libraries
-  src_lib_hacl_test_tezt_lib
-  tezt.js)
+  tezos-stdlib
+  tezos-error-monad
+  zarith
+  zarith_stubs_js
+  data-encoding
+  tezos-hacl
+  qcheck-alcotest
+  tezos-test-helpers)
  (js_of_ocaml)
- (modules main_js))
+ (modules test))
+
+(rule (alias runtest) (package tezos-hacl) (action (run %{dep:./test.exe})))
 
 (rule
  (alias runtest_js)
  (package tezos-hacl)
- (enabled_if (<> false %{env:RUNTEZTALIAS=true}))
- (action (run node %{dep:./main_js.bc.js})))
-
-(rule
- (targets main_js.ml)
- (action (with-stdout-to %{targets} (echo "let () = Tezt_js.Test.run ()"))))
+ (action (run node %{dep:./test.bc.js})))
diff --git a/src/lib_hacl/test/test.ml b/src/lib_hacl/test/test.ml
index 33f3fdcae7..c385de397d 100644
--- a/src/lib_hacl/test/test.ml
+++ b/src/lib_hacl/test/test.ml
@@ -1,40 +1,15 @@
-(*****************************************************************************)
-(*                                                                           *)
-(* Open Source License                                                       *)
-(* Copyright (c) 2023 Nomadic Labs <contact@nomadic-labs.com>                *)
-(*                                                                           *)
-(* Permission is hereby granted, free of charge, to any person obtaining a   *)
-(* copy of this software and associated documentation files (the "Software"),*)
-(* to deal in the Software without restriction, including without limitation *)
-(* the rights to use, copy, modify, merge, publish, distribute, sublicense,  *)
-(* and/or sell copies of the Software, and to permit persons to whom the     *)
-(* Software is furnished to do so, subject to the following conditions:      *)
-(*                                                                           *)
-(* The above copyright notice and this permission notice shall be included   *)
-(* in all copies or substantial portions of the Software.                    *)
-(*                                                                           *)
-(* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR*)
-(* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  *)
-(* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL   *)
-(* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER*)
-(* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING   *)
-(* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER       *)
-(* DEALINGS IN THE SOFTWARE.                                                 *)
-(*                                                                           *)
-(*****************************************************************************)
-
-(** Testing
-    -------
-    Component:    Crypto
-    Invocation:   dune exec src/lib_hacl/test/main.exe
-    Subject:      Tests cryptobox primitives
-*)
-
 open Tezos_hacl
 
+let log_s = print_endline
+
 let init_bytes len = Bytes.make len '\x00'
 
-let check msg b = Alcotest.(check bool) msg true b
+let assert_failure f =
+  assert (
+    try
+      let _ = f () in
+      false
+    with _ -> true)
 
 (* this from hacl-star test suite *)
 type 'a ed25519_test = {
@@ -284,35 +259,38 @@ let p256_tests =
   ]
 
 let test_ed25519 (v : Bytes.t ed25519_test) : unit =
+  log_s "Testing Ed25519" ;
   let pk1, sk1 = Hacl.Ed25519.keypair () in
   let pk2, _ = Hacl.Ed25519.keypair () in
-  check "[Ed25519.keypair]" (pk1 <> pk2) ;
-  check "[Ed25519.neuterize] 1/2" (pk1 = Hacl.Ed25519.neuterize sk1) ;
-  let pk = Stdlib.Option.get @@ Hacl.Ed25519.pk_of_bytes v.pk in
-  let sk = Stdlib.Option.get @@ Hacl.Ed25519.sk_of_bytes v.sk in
-  check "[Ed25519.neuterize] 2/2" (pk = Hacl.Ed25519.neuterize sk) ;
+  assert (pk1 <> pk2) ;
+  log_s "[Ed25519.keypair] Success" ;
+  assert (pk1 = Hacl.Ed25519.neuterize sk1) ;
+  let pk = Option.get @@ Hacl.Ed25519.pk_of_bytes v.pk in
+  let sk = Option.get @@ Hacl.Ed25519.sk_of_bytes v.sk in
+  assert (pk = Hacl.Ed25519.neuterize sk) ;
+  log_s "[Ed25519.neuterize] Success" ;
   let signature = Hacl.Ed25519.sign ~sk ~msg:v.msg in
-  check "[Ed25519.sign]" (Bytes.compare signature v.expected_sig = 0) ;
-  check "[Ed25519.verify] 1/2" (Hacl.Ed25519.verify ~pk ~msg:v.msg ~signature) ;
-  let random_pk =
-    Stdlib.Option.get @@ Hacl.Ed25519.pk_of_bytes (Hacl.Rand.gen 32)
-  in
-  check
-    "[Ed25519.verify] 2/2"
-    (not (Hacl.Ed25519.verify ~pk:random_pk ~msg:v.msg ~signature))
+  assert (Bytes.compare signature v.expected_sig = 0) ;
+  log_s "[Ed25519.sign] Success" ;
+  assert (Hacl.Ed25519.verify ~pk ~msg:v.msg ~signature) ;
+  (* negative test *)
+  let random_pk = Option.get @@ Hacl.Ed25519.pk_of_bytes (Hacl.Rand.gen 32) in
+  assert (not (Hacl.Ed25519.verify ~pk:random_pk ~msg:v.msg ~signature)) ;
+  log_s "[Ed25519.verify] Success"
 
 let test_p256 (v : Bytes.t p256_test) : unit =
+  log_s "Testing P256" ;
   let pk1, sk1 = Hacl.P256.keypair () in
   let pk2, _ = Hacl.P256.keypair () in
-  check "[P256.keypair]" (pk1 <> pk2) ;
-  check "[Hacl.P256.neuterize]" (pk1 = Hacl.P256.neuterize sk1) ;
-  let pk = Stdlib.Option.get @@ Hacl.P256.pk_of_bytes v.pk in
-  let pk_unsafe =
-    Stdlib.Option.get @@ Hacl.P256.pk_of_bytes_without_validation v.pk
-  in
-  check "[P256.pk_of_bytes_without_validation]" (Hacl.P256.equal pk pk_unsafe) ;
-  let sk = Stdlib.Option.get @@ Hacl.P256.sk_of_bytes v.sk in
-  check "[P256.neuterize] 1/2" (pk = Hacl.P256.neuterize sk) ;
+  assert (pk1 <> pk2) ;
+  log_s "[P256.keypair] Success" ;
+  assert (pk1 = Hacl.P256.neuterize sk1) ;
+  let pk = Option.get @@ Hacl.P256.pk_of_bytes v.pk in
+  let pk_unsafe = Option.get @@ Hacl.P256.pk_of_bytes_without_validation v.pk in
+  assert (Hacl.P256.equal pk pk_unsafe) ;
+  let sk = Option.get @@ Hacl.P256.sk_of_bytes v.sk in
+  assert (pk = Hacl.P256.neuterize sk) ;
+  (* negative test for js_Hacl_P256_decompress_c and js_Hacl_P256_decompress_n *)
   let invalid_pk_uncompressed = Bytes.copy v.pk in
   Bytes.set_int8 invalid_pk_uncompressed 0 7 ;
   assert (
@@ -322,59 +300,75 @@ let test_p256 (v : Bytes.t p256_test) : unit =
   assert (
     Option.is_none
       (Hacl.P256.pk_of_bytes_without_validation invalid_pk_compressed)) ;
+  (* negative test for js_Hacl_P256_valid_sk *)
   let invalid_sk = Bytes.make Hacl.P256.sk_size '\x00' in
-  check "[P256.invalid_sk]" (Option.is_none (Hacl.P256.sk_of_bytes invalid_sk)) ;
+  assert (Option.is_none (Hacl.P256.sk_of_bytes invalid_sk)) ;
+  (* negative test for js_Hacl_P256_valid_pk *)
   let invalid_pk = Bytes.make Hacl.P256.pk_size '\x00' in
-  check
-    "[P256.neuterize] 2/2"
-    (Option.is_none (Hacl.P256.pk_of_bytes invalid_pk)) ;
+  assert (Option.is_none (Hacl.P256.pk_of_bytes invalid_pk)) ;
+  log_s "[P256.neuterize] Success" ;
   let sk_bytes = Hacl.P256.to_bytes sk in
-  check "[P256.to_bytes] 1/3" (sk_bytes = v.sk) ;
+  assert (sk_bytes = v.sk) ;
   (* for to_bytes pk we cannot directly compare the output buffer with the input
-     buffer because of_bytes takes a pk in either compressed or uncompressed form
-     v.pk is in uncompressed form but to_bytes only outputs the pk in compressed
+   * buffer because of_bytes takes a pk in either compressed or uncompressed form
+   * v.pk is in uncompressed form but to_bytes only outputs the pk in compressed
      form; thus we only compare the relevant bytes *)
   let pk_bytes = Hacl.P256.to_bytes pk in
-  check "[P256.to_bytes] 2/3" (Bytes.get_int8 pk_bytes 0 = 3) ;
-  check "[P256.to_bytes] 3/3" (Bytes.sub pk_bytes 1 32 = Bytes.sub v.pk 1 32) ;
+  assert (Bytes.get_int8 pk_bytes 0 = 3) ;
+  assert (Bytes.sub pk_bytes 1 32 = Bytes.sub v.pk 1 32) ;
+  log_s "[P256.to_bytes] Success" ;
   let pk_bytes_blit = Bytes.create 33 in
   Hacl.P256.blit_to_bytes pk pk_bytes_blit ;
-  check "[P256.blit_to_bytes]" (pk_bytes_blit = pk_bytes) ;
-  check
-    "[P256.verify] 1/2"
-    (Hacl.P256.verify ~pk ~msg:v.msg ~signature:v.expected_sig) ;
-  check
-    "[P256.verify] 2/2"
-    (not (Hacl.P256.verify ~pk ~msg:invalid_pk ~signature:v.expected_sig))
+  assert (pk_bytes_blit = pk_bytes) ;
+  log_s "[P256.blit_to_bytes] Success" ;
+  assert (Hacl.P256.verify ~pk ~msg:v.msg ~signature:v.expected_sig) ;
+  (* negative test *)
+  assert (not (Hacl.P256.verify ~pk ~msg:invalid_pk ~signature:v.expected_sig)) ;
+  log_s "[P256.verify] Success"
 
 let test_curve25519 (v : Bytes.t curve25519_test) : unit =
+  log_s "Testing Curve25519" ;
   let sk = Hacl.Box.unsafe_sk_of_bytes v.sk in
   let pk = Hacl.Box.neuterize sk in
-  check "[Curve25519]" (Hacl.Box.unsafe_to_bytes pk = v.pk)
+  assert (Hacl.Box.unsafe_to_bytes pk = v.pk) ;
+  log_s "[Curve25519] Success"
 
 let test_blake2b (v : Bytes.t blake2_test) : unit =
+  log_s "Testing Blake2b" ;
   let digest =
     Hacl.Blake2b.direct ~key:v.key v.plaintext (Bytes.length v.expected)
   in
-  match digest with Hash d -> check "[Blake2b.blake2b]" (d = v.expected)
+  match digest with
+  | Hash d ->
+      assert (d = v.expected) ;
+      log_s "[Blake2b.blake2b] Success"
 
 let test_sha2_256 (v : Bytes.t hash_test) : unit =
+  log_s "Testing SHA2_256" ;
   let digest = Hacl.Hash.SHA256.digest v.plaintext in
-  check "[SHA2_256.hash]" (digest = v.expected)
+  assert (digest = v.expected) ;
+  log_s "[SHA2_256.hash] Success"
 
 let test_sha2_512 (v : Bytes.t hash_test) : unit =
+  log_s "Testing SHA2_512" ;
   let digest = Hacl.Hash.SHA512.digest v.plaintext in
-  check "[SHA2_512.hash]" (digest = v.expected)
+  assert (digest = v.expected) ;
+  log_s "[SHA2_512.hash] Success"
 
 let test_sha3_256 (v : Bytes.t hash_test) : unit =
+  log_s "Testing SHA3_256" ;
   let digest = Hacl.Hash.SHA3_256.digest v.plaintext in
-  check "[SHA3_256.hash]" (digest = v.expected)
+  assert (digest = v.expected) ;
+  log_s "[SHA3_256.hash] Success"
 
 let test_sha3_512 (v : Bytes.t hash_test) : unit =
+  log_s "Testing SHA3_512" ;
   let digest = Hacl.Hash.SHA3_512.digest v.plaintext in
-  check "[SHA3_512.hash]" (digest = v.expected)
+  assert (digest = v.expected) ;
+  log_s "[SHA3_512.hash] Success"
 
 let test_keccak () : unit =
+  log_s "Testing Keccak" ;
   (* from lib_crypto/test/hacl.ml *)
   let msg = Bytes.of_string "Longtemps, je me suis couche de bonne heure" in
   let expected =
@@ -382,109 +376,97 @@ let test_keccak () : unit =
       "\x9f\x3a\xfe\x7d\x35\xd9\xbb\xc4\xef\xd9\x82\x52\x35\x7e\x73\xe8\x5c\xe1\x23\x4a\x48\x60\x3a\x06\x3b\xb7\x07\x91\x74\xaa\xfa\x68"
   in
   let digest = Hacl.Hash.Keccak_256.digest msg in
-  check "[SHA3.keccak]" (digest = expected)
+  assert (digest = expected) ;
+  log_s "[SHA3.keccak] Successs"
 
 let test_hmac_sha256 (v : Bytes.t hmac_test) : unit =
+  log_s "Testing HMAC_SHA2_256" ;
   let tag = Hacl.Hash.SHA256.HMAC.digest ~key:v.key ~msg:v.data in
-  check "[HMAC_SHA2_256.digest] " (tag = v.expected)
+  assert (tag = v.expected) ;
+  log_s "[HMAC_SHA2_256.digest] Success"
 
 let test_hmac_sha512 (v : Bytes.t hmac_test) : unit =
+  log_s "Testing HMAC_SHA2_512" ;
   let tag = Hacl.Hash.SHA512.HMAC.digest ~key:v.key ~msg:v.data in
-  check "[HMAC_SHA2_512.digest]" (tag = v.expected)
+  assert (tag = v.expected) ;
+  log_s "[HMAC_SHA2_512.digest] Success"
 
 let test_secretbox (v : Bytes.t secretbox_test) : unit =
+  log_s (String.concat ": " ["Testing NaCl.Secretbox"; v.name]) ;
   let key = Hacl.Secretbox.unsafe_of_bytes v.key in
   let ct = init_bytes (Bytes.length v.pt + 16) in
   Hacl.Secretbox.secretbox ~key ~nonce:v.n ~msg:v.pt ~cmsg:ct ;
-  check ("[NaCl.Noalloc.Easy.secretbox] " ^ v.name) (ct = v.expected_ct) ;
+  assert (ct = v.expected_ct) ;
+  log_s "[NaCl.secretbox] Success" ;
   let pt = init_bytes (Bytes.length v.pt) in
   let b =
     Hacl.Secretbox.secretbox_open ~key ~nonce:v.n ~msg:pt ~cmsg:v.expected_ct
   in
-  check ("[NaCl.Noalloc.Easy.secretbox_open] 1/2 " ^ v.name) (b && pt = v.pt) ;
-  check
-    ("[NaCl.Noalloc.Easy.secretbox_open] 2/2 " ^ v.name)
-    (not
-       (Hacl.Secretbox.secretbox_open
-          ~key:(Hacl.Secretbox.unsafe_of_bytes (Bytes.make 32 '\x00'))
-          ~nonce:v.n
-          ~msg:pt
-          ~cmsg:v.expected_ct))
+  assert (b && pt = v.pt) ;
+  (* negative test *)
+  assert (
+    not
+      (Hacl.Secretbox.secretbox_open
+         ~key:(Hacl.Secretbox.unsafe_of_bytes (Bytes.make 32 '\x00'))
+         ~nonce:v.n
+         ~msg:pt
+         ~cmsg:v.expected_ct)) ;
+  log_s "[NaCl.secretbox_open] Success"
 
 let test_box (v : Bytes.t box_test) : unit =
+  log_s (String.concat ": " ["Testing NaCl.Box"; v.name]) ;
   let k =
     Hacl.Box.dh
       (Hacl.Box.unsafe_pk_of_bytes v.pk)
       (Hacl.Box.unsafe_sk_of_bytes v.sk)
   in
-  Alcotest.check_raises
-    "[Hacl.Box.unsafe_sk_of_bytes 32]"
-    (Failure "Error computing box_beforenm")
-    (fun () ->
-      ignore
-        (Hacl.Box.dh
-           (Hacl.Box.unsafe_pk_of_bytes (Bytes.make 32 '\x00'))
-           (Hacl.Box.unsafe_sk_of_bytes (Bytes.make 32 '\x00')))) ;
+  (* negative test *)
+  assert_failure (fun () ->
+      Hacl.Box.dh
+        (Hacl.Box.unsafe_pk_of_bytes (Bytes.make 32 '\x00'))
+        (Hacl.Box.unsafe_sk_of_bytes (Bytes.make 32 '\x00'))) ;
+
+  log_s "[NaCl.box_beforenm] Success" ;
   let cmsg = init_bytes (Bytes.length v.pt + 16) in
   Hacl.Box.box ~k ~nonce:v.n ~msg:v.pt ~cmsg ;
-  check ("[NaCl.Noalloc.Easy.box_afternm] " ^ v.name) (cmsg = v.expected_ct) ;
+  assert (cmsg = v.expected_ct) ;
+  log_s "[NaCl.box_easy_afternm] Success" ;
   let msg = init_bytes (Bytes.length v.pt) in
-  check
-    ("[NaCl.Noalloc.Easy.box_open_afternm] 1/3 " ^ v.name)
-    (Hacl.Box.box_open ~k ~nonce:v.n ~msg ~cmsg:v.expected_ct) ;
-  check ("[NaCl.Noalloc.Easy.box_open_afternm] 2/3 " ^ v.name) (msg = v.pt) ;
-  check
-    ("[NaCl.Noalloc.Easy.box_open_afternm] 3/3 " ^ v.name)
-    (not
-       (Hacl.Box.box_open ~k ~nonce:(Hacl.Rand.gen 24) ~msg ~cmsg:v.expected_ct)) ;
+  assert (Hacl.Box.box_open ~k ~nonce:v.n ~msg ~cmsg:v.expected_ct) ;
+  assert (msg = v.pt) ;
+  (* negative test *)
+  assert (
+    not
+      (Hacl.Box.box_open ~k ~nonce:(Hacl.Rand.gen 24) ~msg ~cmsg:v.expected_ct)) ;
+  log_s "[NaCl.box_open_easy_afternm] Success" ;
   let buf = Bytes.copy v.pt in
   let tag = init_bytes 16 in
   Hacl.Box.box_noalloc ~k ~nonce:v.n ~tag ~buf ;
   let combined_ct =
     Bytes.of_string @@ Bytes.to_string tag ^ Bytes.to_string buf
   in
-  check
-    ("[NaCl.Noalloc.Detached.box_afternm] " ^ v.name)
-    (combined_ct = v.expected_ct) ;
-  check
-    ("[NaCl.Noalloc.Detached.box_open_afternm] 1/2" ^ v.name)
-    (Hacl.Box.box_open_noalloc ~k ~nonce:v.n ~tag ~buf) ;
-  check "" (buf = v.pt) ;
-  check
-    ("[NaCl.Noalloc.Detached.box_open_afternm] 2/2" ^ v.name)
-    (not (Hacl.Box.box_open_noalloc ~k ~nonce:(Hacl.Rand.gen 24) ~tag ~buf))
-
-let tests =
-  [
-    ("Testing Ed25519", `Quick, fun () -> List.iter test_ed25519 ed25519_tests);
-    ("Testing P256", `Quick, fun () -> List.iter test_p256 p256_tests);
-    ( "Testing Curve25519",
-      `Quick,
-      fun () -> List.iter test_curve25519 curve25519_tests );
-    ( "Testing SHA2_256",
-      `Quick,
-      fun () -> List.iter test_sha2_256 sha2_256_tests );
-    ( "Testing SHA2_512",
-      `Quick,
-      fun () -> List.iter test_sha2_512 sha2_512_tests );
-    ( "Testing SHA3_256",
-      `Quick,
-      fun () -> List.iter test_sha3_256 sha3_256_tests );
-    ( "Testing SHA3_512",
-      `Quick,
-      fun () -> List.iter test_sha3_512 sha3_512_tests );
-    ("Testing Keccak", `Quick, fun () -> test_keccak ());
-    ( "Testing HMAC_SHA2_256",
-      `Quick,
-      fun () -> List.iter test_hmac_sha256 hmac_sha256_tests );
-    ( "Testing HMAC_SHA2_512",
-      `Quick,
-      fun () -> List.iter test_hmac_sha512 hmac_sha512_tests );
-    ("Testing Blake2b", `Quick, fun () -> List.iter test_blake2b blake2b_tests);
-    ( "Testing NaCl.Secretbox",
-      `Quick,
-      fun () -> List.iter test_secretbox secretbox_tests );
-    ("Testing NaCl.Box", `Quick, fun () -> List.iter test_box box_tests);
-  ]
-
-let () = Alcotest.run ~__FILE__ "hacl-test" [("tests", tests)]
+  assert (combined_ct = v.expected_ct) ;
+  log_s "[NaCl.box_detached_afternm] Success" ;
+  assert (Hacl.Box.box_open_noalloc ~k ~nonce:v.n ~tag ~buf) ;
+  assert (buf = v.pt) ;
+  (* negative test *)
+  assert (not (Hacl.Box.box_open_noalloc ~k ~nonce:(Hacl.Rand.gen 24) ~tag ~buf)) ;
+  log_s "[NaCl.box_open_detached_afternm] Success"
+
+let () =
+  let () = log_s "STARTING TESTS" in
+  List.iter test_ed25519 ed25519_tests ;
+  List.iter test_p256 p256_tests ;
+  List.iter test_curve25519 curve25519_tests ;
+  List.iter test_sha2_256 sha2_256_tests ;
+  List.iter test_sha2_512 sha2_512_tests ;
+  List.iter test_sha3_256 sha3_256_tests ;
+  List.iter test_sha3_512 sha3_512_tests ;
+  test_keccak () ;
+  List.iter test_hmac_sha256 hmac_sha256_tests ;
+  List.iter test_hmac_sha512 hmac_sha512_tests ;
+  List.iter test_blake2b blake2b_tests ;
+  List.iter test_secretbox secretbox_tests ;
+  List.iter test_box box_tests ;
+  let () = log_s "ENDING TESTS" in
+  ()
diff --git a/src/lib_hacl/test/test_hacl.ml b/src/lib_hacl/test/test_hacl.ml
index ff0b53e1e8..5530c0bbbd 100644
--- a/src/lib_hacl/test/test_hacl.ml
+++ b/src/lib_hacl/test/test_hacl.ml
@@ -26,7 +26,7 @@
 (** Testing
     -------
     Component:    Crypto
-    Invocation:   dune exec src/lib_hacl/test/main.exe
+    Invocation:   dune build @src/lib_hacl/runtest
     Subject:      Checking all of the HACL* primitives used in lib_crypto:
                   hashing, HMAC, NaCl, Ed25519, and P-256.
 *)
@@ -131,9 +131,13 @@ let test_sha256_seq () =
       of_hex "ddabe6c4552e944d927bd0b03dd5ab95ecdfa5a135b6c3b60416dbde57b38416"
     in
     let st = init () in
+    Printf.printf "Init done\n" ;
     update st msg ;
     update st randmsg ;
+    print_endline "Update done." ;
     let d = finish st in
+    Printf.printf "Digest size %d\n" (Bytes.length d) ;
+    print_endline "Finish done." ;
     Alcotest.(check bytes "sha256_seq" bothresp d)
   in
   one_update () ;
@@ -315,31 +319,11 @@ let test_public_ed25519 () =
   Alcotest.(check bytes "public" pk' ppk) ;
   Alcotest.(check bytes "public" pk' psk)
 
-(** Checks that Ed25519 makes the expected choices in the scope allowed by
-    RFC-8032. See [Vectors_ed25519] for more details. *)
-let test_speccheck_ed25519 () =
-  let open Vectors_ed25519 in
-  List.iter
-    (fun case ->
-      match Ed25519.pk_of_bytes (hex case.pub_key) with
-      | Some pk ->
-          let msg = hex case.message in
-          let signature = hex case.signature in
-          Alcotest.(
-            check
-              bool
-              "ed25519-speccheck"
-              (Hacl.Ed25519.verify ~pk ~msg ~signature)
-              case.expected)
-      | None -> Alcotest.fail "pk_of_bytes")
-    cases
-
 let ed25519 =
   [
     ("keypair", `Quick, test_keypair_ed25519);
     ("sign", `Quick, test_sign_ed25519);
     ("public", `Quick, test_public_ed25519);
-    ("ed25519-speccheck", `Quick, test_speccheck_ed25519);
   ]
 
 open P256
@@ -501,4 +485,4 @@ let tests =
     ("p256", p256);
   ]
 
-let () = Alcotest.run ~__FILE__ "tezos-crypto" tests
+let () = Alcotest.run "tezos-crypto" tests
diff --git a/src/lib_hacl/test/test_prop_hacl_hash.ml b/src/lib_hacl/test/test_prop_hacl_hash.ml
index c57894b4f1..f82309e9a9 100644
--- a/src/lib_hacl/test/test_prop_hacl_hash.ml
+++ b/src/lib_hacl/test/test_prop_hacl_hash.ml
@@ -26,13 +26,13 @@
 (** Testing
     -------
     Component:    Crypto
-    Invocation:   dune exec src/lib_hacl/test/main.exe
+    Invocation:   dune build @src/lib_hacl/runtest
     Subject:      Tests the consistency between the [DIRECT_HASH] and
                   [INCREMENTAL_HASH] interfaces of hashes SHA256 and
                   SHA512.
 *)
 
-open Qcheck2_helpers
+open Lib_test.Qcheck2_helpers
 open QCheck2
 
 module Hash_Properties (Desc : sig
@@ -100,7 +100,6 @@ let () =
   | Other "js_of_ocaml" -> ()
   | Other _ | Native | Bytecode ->
       Alcotest.run
-        ~__FILE__
         "tezos-crypto-shaX-props"
         [
           ("SHA256_Props", qcheck_wrap SHA256_Props.tests);
diff --git a/src/lib_hacl/test/test_prop_signature_pk.ml b/src/lib_hacl/test/test_prop_signature_pk.ml
index 363a8b788d..85b1955165 100644
--- a/src/lib_hacl/test/test_prop_signature_pk.ml
+++ b/src/lib_hacl/test/test_prop_signature_pk.ml
@@ -26,14 +26,14 @@
 (** Testing
     -------
     Component:    Crypto
-    Invocation:   dune exec src/lib_hacl/test/main.exe
+    Invocation:   dune build @src/lib_hacl/runtest
     Subject:      Property-tests over the interface Hacl.SIGNATURE checking
                   the equivalence between [pk_of_bytes_without_validation]
                   and [pk_of_bytes] on valid public keys.
                   This is currently only relevant for Hacl.P256 since it is
                   the only scheme in which these 2 functions are different.
 *)
-open Qcheck2_helpers
+open Lib_test.Qcheck2_helpers
 
 open QCheck2
 
@@ -75,6 +75,5 @@ module P256_Props =
 
 let () =
   Alcotest.run
-    ~__FILE__
     "tezos-crypto-signature-pk"
     [("P256_Pros", qcheck_wrap P256_Props.tests)]
diff --git a/src/lib_hacl/test/vectors_ed25519.ml b/src/lib_hacl/test/vectors_ed25519.ml
deleted file mode 100644
index d4904b6a62..0000000000
--- a/src/lib_hacl/test/vectors_ed25519.ml
+++ /dev/null
@@ -1,136 +0,0 @@
-type ed25519_speccheck_case = {
-  message : string;
-  pub_key : string;
-  signature : string;
-  expected : bool;
-}
-
-(* Test vectors from
- * https://github.com/novifinancial/ed25519-speccheck/blob/65519336fda78a3d016e947df6d82848aca0c9da/cases.json
- * The comment and `expected` field in each case refers to the requirements of
- * any Ed25519 implementation used in Tezos, not a an expectation for Ed25519
- * implementations in general.
- *)
-let cases =
-  [
-    {
-      (* accepts small A and small R *)
-      message =
-        "8c93255d71dcab10e8f379c26200f3c7bd5f09d9bc3068d3ef4edeb4853022b6";
-      pub_key =
-        "c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa";
-      signature =
-        "c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a0000000000000000000000000000000000000000000000000000000000000000";
-      expected = true;
-    };
-    {
-      (* accepts small A *)
-      message =
-        "9bd9f44f4dcc75bd531b56b2cd280b0bb38fc1cd6d1230e14861d861de092e79";
-      pub_key =
-        "c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa";
-      signature =
-        "f7badec5b8abeaf699583992219b7b223f1df3fbbea919844e3f7c554a43dd43a5bb704786be79fc476f91d3f3f89b03984d8068dcf1bb7dfc6637b45450ac04";
-      expected = true;
-    };
-    {
-      (* accepts small R *)
-      message =
-        "aebf3f2601a0c8c5d39cc7d8911642f740b78168218da8471772b35f9d35b9ab";
-      pub_key =
-        "f7badec5b8abeaf699583992219b7b223f1df3fbbea919844e3f7c554a43dd43";
-      signature =
-        "c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa8c4bd45aecaca5b24fb97bc10ac27ac8751a7dfe1baff8b953ec9f5833ca260e";
-      expected = true;
-    };
-    {
-      (* accepts mixed order A and R *)
-      message =
-        "9bd9f44f4dcc75bd531b56b2cd280b0bb38fc1cd6d1230e14861d861de092e79";
-      pub_key =
-        "cdb267ce40c5cd45306fa5d2f29731459387dbf9eb933b7bd5aed9a765b88d4d";
-      signature =
-        "9046a64750444938de19f227bb80485e92b83fdb4b6506c160484c016cc1852f87909e14428a7a1d62e9f22f3d3ad7802db02eb2e688b6c52fcd6648a98bd009";
-      expected = true;
-    };
-    {
-      (* cofactorless verification equation *)
-      message =
-        "e47d62c63f830dc7a6851a0b1f33ae4bb2f507fb6cffec4011eaccd55b53f56c";
-      pub_key =
-        "cdb267ce40c5cd45306fa5d2f29731459387dbf9eb933b7bd5aed9a765b88d4d";
-      signature =
-        "160a1cb0dc9c0258cd0a7d23e94d8fa878bcb1925f2c64246b2dee1796bed5125ec6bc982a269b723e0668e540911a9a6a58921d6925e434ab10aa7940551a09";
-      expected = false;
-    };
-    {
-      (* cofactorless verification equation *)
-      message =
-        "e47d62c63f830dc7a6851a0b1f33ae4bb2f507fb6cffec4011eaccd55b53f56c";
-      pub_key =
-        "cdb267ce40c5cd45306fa5d2f29731459387dbf9eb933b7bd5aed9a765b88d4d";
-      signature =
-        "21122a84e0b5fca4052f5b1235c80a537878b38f3142356b2c2384ebad4668b7e40bc836dac0f71076f9abe3a53f9c03c1ceeeddb658d0030494ace586687405";
-      expected = false;
-    };
-    {
-      (* rejects small scalar S *)
-      message =
-        "85e241a07d148b41e47d62c63f830dc7a6851a0b1f33ae4bb2f507fb6cffec40";
-      pub_key =
-        "442aad9f089ad9e14647b1ef9099a1ff4798d78589e66f28eca69c11f582a623";
-      signature =
-        "e96f66be976d82e60150baecff9906684aebb1ef181f67a7189ac78ea23b6c0e547f7690a0e2ddcd04d87dbc3490dc19b3b3052f7ff0538cb68afb369ba3a514";
-      expected = false;
-    };
-    {
-      (* rejects small scalar S *)
-      message =
-        "85e241a07d148b41e47d62c63f830dc7a6851a0b1f33ae4bb2f507fb6cffec40";
-      pub_key =
-        "442aad9f089ad9e14647b1ef9099a1ff4798d78589e66f28eca69c11f582a623";
-      signature =
-        "8ce5b96c8f26d0ab6c47958c9e68b937104cd36e13c33566acd2fe8d38aa19427e71f98a473474f2f13f06f97c20d58cc3f54b8bd0d272f42b695dd7e89a8c22";
-      expected = false;
-    };
-    {
-      (* rejects non-canonical R encoding *)
-      message =
-        "9bedc267423725d473888631ebf45988bad3db83851ee85c85e241a07d148b41";
-      pub_key =
-        "f7badec5b8abeaf699583992219b7b223f1df3fbbea919844e3f7c554a43dd43";
-      signature =
-        "ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03be9678ac102edcd92b0210bb34d7428d12ffc5df5f37e359941266a4e35f0f";
-      expected = false;
-    };
-    {
-      (* rejects non-canonical R encoding *)
-      message =
-        "9bedc267423725d473888631ebf45988bad3db83851ee85c85e241a07d148b41";
-      pub_key =
-        "f7badec5b8abeaf699583992219b7b223f1df3fbbea919844e3f7c554a43dd43";
-      signature =
-        "ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffca8c5b64cd208982aa38d4936621a4775aa233aa0505711d8fdcfdaa943d4908";
-      expected = false;
-    };
-    {
-      (* rejects non-canonical A encoding *)
-      message =
-        "e96b7021eb39c1a163b6da4e3093dcd3f21387da4cc4572be588fafae23c155b";
-      pub_key =
-        "ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff";
-      signature =
-        "a9d55260f765261eb9b84e106f665e00b867287a761990d7135963ee0a7d59dca5bb704786be79fc476f91d3f3f89b03984d8068dcf1bb7dfc6637b45450ac04";
-      expected = false;
-    };
-    {
-      (* rejects non-canonical A encoding *)
-      message =
-        "39a591f5321bbe07fd5a23dc2f39d025d74526615746727ceefd6e82ae65c06f";
-      pub_key =
-        "ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff";
-      signature =
-        "a9d55260f765261eb9b84e106f665e00b867287a761990d7135963ee0a7d59dca5bb704786be79fc476f91d3f3f89b03984d8068dcf1bb7dfc6637b45450ac04";
-      expected = false;
-    };
-  ]
-- 
2.34.1

