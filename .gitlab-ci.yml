variables:
  LIGO_REGISTRY_IMAGE_BASE_NAME: "${CI_PROJECT_PATH}/${CI_PROJECT_NAME}"
  WEBIDE_IMAGE_TAG: "registry.gitlab.com/${CI_PROJECT_PATH}/ligo_webide:${CI_COMMIT_SHORT_SHA}"
  LIGO_IMAGE_TAG: "ligo:${CI_COMMIT_SHORT_SHA}-${CI_PIPELINE_ID}"

stages:
  - esy
  - pretooling                      # changelog
  - docker-build                    # build, test, produces binaries/.deb/doc within docker
  - post-build-action               # Post build action
  - docker-extract                  # extract what have been built and expose them as artifact
  - tooling                         # build miscellaneous tooling-related things (website, changelog..)
  - push                            # deploy docker images, pages, releases (tag)
  - deploy                          # deploy web IDE, website preview
  - release                         # Manage branch matching ^release/*

include:
  # jobs for managing process around changelog generation
  - '/.ci/.gitlab-ci-changelog.yml'
  # jobs for building and testing LSP
  - '/tools/lsp/.gitlab-ci.yml'
  # jobs for managing process around release
  - '/.ci/.gitlab-ci-release.yml'

.submodule-clone:
  before_script:
    - sed -i 's;without-tests;prometheansacrifice/v12.0-ligo-windows-compat;' .git/modules/vendors/tezos-ligo/config
    - git submodule sync --recursive
    - git submodule update --init --recursive --remote
.nix:
  extends: .submodule-clone
  before_script:
    - find "$CI_PROJECT_DIR" -path "$CI_PROJECT_DIR/.git" -prune -o "(" -type d -a -not -perm -u=w ")" -exec chmod --verbose u+w {} ";"
    - export COMMIT_DATE="$(git show --no-patch --format=%ci)"

esy:
  tags:
    - windows
  stage: esy
  only:
  - merge_requests
  - dev
  - /^.*-run-dev$/
  - /^release/.*$/
  - /[0-9]+\.[0-9]+\.[0-9]+/
  script:
    - $env:GIT_CURL_VERBOSE = 1
    - $env:GIT_TRACE = 1
    - $env:GIT_TRACE_PACKET = 1
    - git config http.postBuffer 1048576000
    - npm i -g esy@beta --force
    - $env:PATH = 'C:\Users\gitlabrunner\AppData\Roaming\npm;' + $env:PATH
    - $env:HOME = 'C:/Users/gitlabrunner'
    - esy -vvv
    - rm -Recurse -Force _esy

changelog:
  stage: pretooling
  extends : .nix
  only:
    - merge_requests
    - dev
    - /^.*-run-dev$/
    - /^release/.*$/
    - /[0-9]+\.[0-9]+\.[0-9]+/
  script:
    - echo $CI_WORKFLOW
    - nix-build nix -A ligo-changelog
    - cp -L result/* .
  artifacts:
    paths:
      - changelog.md
      - changelog.txt
      - release-notes.md
      - release-notes.txt

to_dos:
  stage: pretooling
  only:
    - merge_requests
    - /^.*-run-dev$/
  script:
    - ./scripts/list-to-dos.sh > to-dos.html
  artifacts:
    paths:
      - to-dos.html

# TODO: https://docs.gitlab.com/ee/ci/yaml/#onlychangesexceptchanges ?
docker_build:
  extends: .submodule-clone
  stage: docker-build
  dependencies:
    - changelog
  only:
    - merge_requests
    - dev
    - /^.*-run-dev$/
    - /^release/.*$/
    - /[0-9]+\.[0-9]+\.[0-9]+/
  script:
    - docker build .
      --build-arg=ci_commit_tag=$CI_COMMIT_TAG
      --build-arg=ci_commit_sha=$CI_COMMIT_SHA
      --build-arg=ci_commit_timestamp=$CI_COMMIT_TIMESTAMP
      --build-arg=changelog_path=changelog.txt
      -t ${LIGO_IMAGE_TAG}
    - docker save -o ligo.tar.gz ${LIGO_IMAGE_TAG}
  after_script:
    - docker image rm "${LIGO_IMAGE_TAG}" >/dev/null 2>&1 || true
  artifacts:
    expose_as: "Ligo docker image - light -"
    paths:
      - ligo.tar.gz

docker_extract:
  stage: docker-extract
  only:
    - merge_requests
    - dev
    - /^.*-run-dev$/
    - /^release/.*$/
    - /[0-9]+\.[0-9]+\.[0-9]+/
  extends: .nix
  dependencies :
    - docker_build
  script:
    - docker load -i ligo.tar.gz
    - docker cp $(docker create ${LIGO_IMAGE_TAG}):/root/ligo .
    - chmod +rwx ligo
    # Check that the binary is truly static and has 0 dependencies
    - ldd ligo | grep 'statically' # TODO: there is maybe a better way to do that ?
    - docker cp $(docker create ${LIGO_IMAGE_TAG}):/root/coverage .
    - cat coverage/coverage-summary
    - docker cp -La $(docker create ${LIGO_IMAGE_TAG}):/root/doc .
    - nix-build nix -A ligo-deb
    - cp -L result/ligo.deb .
    - docker cp $(docker create ${LIGO_IMAGE_TAG}):/root/highlighting ./highlighting
  after_script:
    - docker image rm "${LIGO_IMAGE_TAG}" >/dev/null 2>&1 || true
  artifacts:
    paths:
      - ligo
      - ligo.deb
      - coverage
      - doc
      - highlighting

check-generated-highlighting:
  stage: tooling
  dependencies:
    - docker_extract
  script:
    - scripts/diff_dir.sh highlighting/emacs tools/emacs
    - scripts/diff_dir.sh highlighting/vim tools/vim/ligo/start/ligo/syntax
    - scripts/diff_dir.sh highlighting/vscode tools/lsp/vscode-plugin/syntaxes
    - scripts/diff_dir.sh highlighting/textmate tools/ligo-syntax-highlighting/textmate
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - tools/ligo-syntax-highlighting/**/*
      when: always

xrefcheck:
  stage: tooling
  only:
    - merge_requests
  script:
    # Should be replaced with
    # nix run github:serokell/xrefcheck
    # Once flakes roll out to stable
    # - nix run -f https://github.com/serokell/xrefcheck/archive/v0.1.1.2.tar.gz -c 'xrefcheck local-only'
    - curl -L https://github.com/serokell/xrefcheck/releases/download/v0.1.1/release.tar.gz | tar -zxf - xrefcheck/bin/xrefcheck
    - xrefcheck/bin/xrefcheck
  allow_failure: true #TODO could be better if we do not allow failure for realeases

docker:
  stage: tooling
  dependencies:
    - docker_build
  only:
    - merge_requests
    - dev
    - /^.*-run-dev$/
    - /[0-9]+\.[0-9]+\.[0-9]+/
  script:
    - ':'
  artifacts:
    paths:
      - ligo.tar.gz

.docker-image:
  stage: push
  image: docker:19.03.5
  services:
    - docker:19.03.5-dind

docker-push:
  stage: push
  extends: .docker-image
  dependencies:
    - docker_build
  needs:
    - docker_build
  only:
    - dev
    - /^.*-run-dev$/
    - /[0-9]+\.[0-9]+\.[0-9]+/
  script:
    - echo ${LIGO_REGISTRY_PASSWORD} | docker login -u ${LIGO_REGISTRY_USER} --password-stdin
    - docker load -i=./ligo.tar.gz
    - if test "$CI_COMMIT_REF_NAME" = "dev"; then export LIGO_TAG=next; else if echo "$CI_COMMIT_TAG" | grep -E "[0-9]+\.[0-9]+\.[0-9]+"; then export LIGO_TAG="$CI_COMMIT_TAG"; else export LIGO_TAG=next-attempt; fi; fi
    - export LIGO_REGISTRY_FULL_NAME="${LIGO_REGISTRY_IMAGE_BUILD:-ligolang/ligo}:$LIGO_TAG"
    - docker tag "${LIGO_IMAGE_TAG}" "${LIGO_REGISTRY_FULL_NAME}"
    - docker push "${LIGO_REGISTRY_FULL_NAME}"
  after_script:
    - docker image rm "${LIGO_IMAGE_TAG}" >/dev/null 2>&1 || true

# docker-large-push: ?
#   extends: docker-push
#   dependencies:
#     - docker-large
#   needs:
#     - docker-large
#   script:
#     - echo "${LIGO_REGISTRY_PASSWORD}" | docker login -u "${LIGO_REGISTRY_USER}" --password-stdin
#     - docker load -i=./ligo.tar.gz
#     - if test "$CI_COMMIT_REF_NAME" = "dev"; then export LIGO_TAG=next-large; else if echo "$CI_COMMIT_TAG" | grep -E "[0-9]+\.[0-9]+\.[0-9]+"; then export LIGO_TAG="$CI_COMMIT_TAG-large"; else export LIGO_TAG=next-attempt-large; fi; fi
#     - export LIGO_REGISTRY_FULL_NAME="${LIGO_REGISTRY_IMAGE_BUILD:-ligolang/ligo}:$LIGO_TAG"
#     - docker tag ligo "${LIGO_REGISTRY_FULL_NAME}"
#     - docker push "${LIGO_REGISTRY_FULL_NAME}"

webide-backend-build-and-push-backend:
  extends: .docker-image
  stage: deploy
  rules:
    # Only deploy docker when from the dev branch or a merge request AND on the canonical ligolang/ligo repository
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_PROJECT_PATH == "ligolang/ligo"'
      changes:
        - tools/webide/**/*
        - src/test/examples/**/*
      when: always
    - if: '$CI_COMMIT_REF_NAME == "dev" && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
  script:
    - echo "${CI_BUILD_TOKEN}" | docker login -u gitlab-ci-token --password-stdin registry.gitlab.com
    - cp -r src/test/examples tools/webide/packages/client/examples
    - docker build tools/webide --build-arg EXAMPLES_DIR_SRC=packages/client/examples -t ${WEBIDE_IMAGE_TAG}
    - docker push "${WEBIDE_IMAGE_TAG}"
  after_script:
    - docker image rm "${WEBIDE_IMAGE_TAG}" >/dev/null 2>&1 || true

.website:
  stage: push
  extends: .nix
  dependencies:
    - docker_extract
    - to_dos
  script:
    - nix-build nix -A ligo-website
    - cp -Lr --no-preserve=mode,ownership,timestamps result/ public
    - touch to-dos.html; cp to-dos.html public/to-dos.html
  artifacts:
    paths:
      - public

pages:
  extends: .website
  rules:
    - if: '$CI_COMMIT_REF_NAME == "dev" && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
    - if: '$CI_COMMIT_TAG =~ /[0-9]+\.[0-9]+\.[0-9]+/'
      when: always

pages-attempt:
  extends: .website
  only:
    - merge_requests
    - /^.*-run-dev$/

deploy_website_preview:
  stage: deploy
  image: node:12.20.0-buster
  tags:
    - docker
  dependencies:
    - pages-attempt
  script: 
    - apt-get update
    - apt-get install -y --no-install-recommends jq
    - npm install netlify-cli
    - npx netlify deploy --site $NETLIFY_SITE_ID_LIGOLANG --dir=./public --auth $NETLIFY_AUTH_TOKEN --json --alias="$CI_MERGE_REQUEST_IID-$CI_COMMIT_SHORT_SHA" > netlify.json  
    - export NETLIFY_DEPLOY_URL=$(jq -r .deploy_url netlify.json)
    - export NETLIFY_DEPLOY_LOGS=$(jq -r .logs netlify.json)
    - echo "The URL for this deployment is $NETLIFY_DEPLOY_URL"
    - echo "Logs for this deployment can be found at $NETLIFY_DEPLOY_LOGS"
    - '[ ! -z "$CI_MERGE_REQUEST_IID" ] && curl POST https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes -d "{\"body\": \"A new deploy preview is available on Netlify at $NETLIFY_DEPLOY_URL, you can view the logs at $NETLIFY_DEPLOY_LOGS\"}" --header "Content-Type: application/json" --header "Private-Token: $GITLAB_PERSONAL_API_PRIVATE_TOKEN"'  
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - gitlab-pages/**/*
      when: on_success

# This job will deploy the web-ide docker container to the test server.
deploy-handoff-feature:
  # Handoff deployment duties to private repo.
  stage: deploy
  variables:
    APP_NAME: "web-ide-backend"
    NEW_VERSION: "${CI_COMMIT_SHORT_SHA}"
    ENV: "dev"
  trigger: 
    project: ligolang/kubernetes-infrastructure
  rules:
    # Only deploy handoff when from an MR AND on the canonical ligolang/ligo repository.
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_PROJECT_PATH == "ligolang/ligo"'
      changes:
        - tools/webide/**/*
        - src/test/examples/**/*
      when: always

deploy-handoff:
  # Handoff deployment duties to private repo
  stage: deploy
  variables:
    APP_NAME: "web-ide-backend"
    NEW_VERSION: "${CI_COMMIT_SHORT_SHA}"
    ENV: "prod"
  trigger: 
    project: ligolang/kubernetes-infrastructure
  rules:
    # Only deploy handoff when from the dev branch AND on the canonical ligolang/ligo repository
    - if: '$CI_COMMIT_REF_NAME == "dev" && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always

# This job builds the ligo-webide front-end from the tools/webide/ directory and deploys it as a Branch Deploy to Netlify using the netlify-cli tool.
# After the deployment is done a comment is posted to the MR with the draft site URL as well as the Netlify logs
build-preview-ligo-webide-front-end:
  stage: deploy
  image: node:12.20.0-buster
  tags:
    - docker
  script:
    - apt-get update
    - apt-get install -y --no-install-recommends jq
    - cd ./tools/webide/
    - sed -i "s/temphost/$CI_MERGE_REQUEST_IID-$CI_COMMIT_SHORT_SHA/g" ./packages/client/feature-netlify.toml
    - cat ./packages/client/feature-netlify.toml
    - mv ./packages/client/feature-netlify.toml ./packages/client/netlify.toml
    - yarn install
    - CI= yarn workspaces run build
    - cd ./packages/client
    - npm install netlify-cli
    - npx netlify deploy --site $NETLIFY_SITE_ID --auth $NETLIFY_AUTH_TOKEN --json --alias="$CI_MERGE_REQUEST_IID-$CI_COMMIT_SHORT_SHA" > netlify.json
    - export NETLIFY_DEPLOY_URL=$(jq -r .deploy_url netlify.json)
    - export NETLIFY_DEPLOY_LOGS=$(jq -r .logs netlify.json)
    - echo "The URL for this deployment is $NETLIFY_DEPLOY_URL"
    - echo "Logs for this deployment can be found at $NETLIFY_DEPLOY_LOGS"
    - '[ ! -z "$CI_MERGE_REQUEST_IID" ] && curl POST https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes -d "{\"body\": \"A new deploy preview is available on Netlify at $NETLIFY_DEPLOY_URL, you can view the logs at $NETLIFY_DEPLOY_LOGS\"}" --header "Content-Type: application/json" --header "Private-Token: $GITLAB_PERSONAL_API_PRIVATE_TOKEN"'
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - tools/webide/**/*
        - src/test/examples/**/*
      when: always

# This job builds the ligo-webide front-end from the tools/webide/ directory and does a production deployment to Netlify and publishes the site using the netlify-cli tool.
build-ligo-webide-front-end:
  stage: deploy
  image: node:12.20.0-buster
  tags:
    - docker
  script:
    - apt-get update
    - cd ./tools/webide/
    - mv ./packages/client/prod-netlify.toml ./packages/client/netlify.toml
    - yarn install
    - CI= yarn workspaces run build
    - cd ./packages/client
    - npm install netlify-cli
    - npx netlify deploy --site $NETLIFY_SITE_ID --auth $NETLIFY_AUTH_TOKEN --json --prod > netlify.json
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev"'
      changes:
        - tools/webide/**/*
        - src/test/examples/**/*
      when: always
