
author: melwyn95
description: "\\nThe new `Proxy_ticket` module available in the LIGO std_lib provides a way to test contrast with tickets\\n\\n#### For example\\n\\nIf we want to originate a contract with ticket values as its initial storage, we can do\\n\\n\\n```ocaml\\ntype storage = (bytes ticket) option\\ntype unforged_storage = (bytes unforged_ticket) option\\n\\nlet main (() : unit) (s : storage) : operation list * storage =\\n  [] , (\\n    match s with\\n    | Some ticket ->\\n      let (_ , t) = Tezos.read_ticket ticket in\\n      Some t\\n    | None -> None\\n  )\\n\\nlet test_originate_contract =\\n  let mk_storage = fun (t : bytes ticket) -> Some t in\\n  let ticket_info = (0x0202, 15n) in\\n  let addr = Test.Proxy_ticket.originate ticket_info mk_storage main in\\n  let storage : michelson_program = Test.get_storage_of_address addr in\\n  let unforged_storage = (Test.decompile storage : unforged_storage) in\\n\\n  (* the ticket 'unforged_storage' can be manipulated freely without caring about ticket linearity *)\\n\\n  match unforged_storage with\\n  | Some { ticketer=_ ; value ; amount } ->\\n    let () = Test.log (\"unforged_ticket\", unforged_storage) in\\n    let () = assert (value = ticket_info.0) in\\n    let () = assert (amount = ticket_info.1) in\\n    ()\\n  | None -> failwith \"impossible\"\\n\\n```\\n\\n#### Result\\n\\n\\n```bash\\n$  ligo run test x.mligo\\n(\"unforged_ticket\" , Some ({amount = 15n ; ticketer = KT1GAXjgbyNsXRj4trR23YRzQdLQV3uA2oXG ; value = 0x0202}))\\nEverything at the top-level was executed.\\n- test_originate_contract exited with value ().\\n\\n```\\n\\n"
merge_request: '2528'
title: "Add `Proxy_ticket` to std_lib"
type: added
            