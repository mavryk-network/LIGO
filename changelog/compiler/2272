
author: rinderkn
description: "\\nSemicolons can now be used in describing objects (records), as well as commas. Discriminated unions can now have a leading vertical bar.\\n\\n#### For a contract like\\n\\n\\n```ts\\ntype planetType =\\n  | { kind: \"Tellurian\" }\\n  | { kind: \"Gaseous\" }\\n  | { kind: \"Other\" };\\n\\ntype planet = {\\n  name: string;\\n  planetType: planetType;\\n  lord: option<address>;\\n};\\n\\n\\nconst main = (p: planet, _: int): [list<operation>, int] => {\\n    let state = 0;\\n    let planetType = p.planetType;\\n    switch(planetType.kind) {\\n    case \"Tellurian\":\\n      state += 1;\\n      break\\n    case \"Gaseous\":\\n      state -= 2;\\n      break\\n    case \"Other\":\\n      state = 0;\\n      break\\n    }\\n    return [list([]), state]\\n} \\n\\n```\\n\\n#### Before\\n\\n\\n```bash\\n$ ligo.59 compile contract y.jsligo \\nFile \"y.jsligo\", line 2, characters 4-5:\\n  1 | type planetType =\\n  2 |   | { kind: \"Tellurian\" }\\n  3 |   | { kind: \"Gaseous\" }\\nIll-formed variant of a sum type.\\nAt this point, one of the following is expected:\\n  * attributes for the variant;\\n  * an opening bracket '[' followed by a data constructor as a string.\\n\\n```\\n\\n#### After\\n\\n\\n```bash\\n$ ligo compile contract  y.jsligo  \\n{ parameter\\n    (pair (pair (option %lord address) (string %name))\\n          (or %planetType (or (unit %gaseous) (unit %other)) (unit %tellurian))) ;\\n  storage int ;\\n  code { CAR ;\\n         PUSH int 0 ;\\n         SWAP ;\\n         CDR ;\\n         IF_LEFT\\n           { IF_LEFT { DROP ; PUSH int 2 ; SWAP ; SUB } { DROP 2 ; PUSH int 0 } }\\n           { DROP ; PUSH int 1 ; ADD } ;\\n         NIL operation ;\\n         PAIR } }\\n\\n```\\n\\n"
merge_request: '2272'
title: "Small syntactic fixes to JsLIGO grammar to get closer to TS"
type: added
            