
author: er433
description: "\\nNew primitives for doing mutation testing on module/namespace contracts in `Test`:\\n\\n```\\nlet originate_module_and_mutate : (contract: module_contract<'p, 's>, init: 's, balance: tez, (tester: (originated_address: typed_address<'p, 's>, code: michelson_contract, size: int) => 'b)) => option<['b, mutation]>\\n\\nlet originate_module_and_mutate_all : (contract: module_contract<'p, 's>, init: 's, balance: tez, (tester: (originated_address: typed_address<'p, 's>, code: michelson_contract, size: int) => 'b)) => list<['b, mutation]>\\n\\n```\\n\\n#### Example in JsLIGO\\n\\n\\n```\\n#import \"./contract_under_test/module_adder.mligo\" \"Adder\"\\n\\nconst _tester = (a : typed_address<parameter_of Adder, int>, _ : michelson_contract, _ : int) : unit => {\\n  let c : contract<parameter_of Adder> = Test.to_contract(a);\\n  /* Test 1 */\\n  let _ = Test.transfer_to_contract_exn(c, Add(0), (0 as tez));\\n  Test.assert(Test.get_storage(a) == 0);\\n  /* Test 2 */\\n  let _ = Test.transfer_to_contract_exn(c, Add(1), (0 as tez));\\n  Test.assert(Test.get_storage(a) == 1);\\n};\\n\\nconst test = (() : unit => {\\n    let l = Test.originate_module_and_mutate_all(contract_of(Adder), 0, (0 as tez), _tester);\\n    Test.log(l);\\n})();\\n\\n```\\n\\n#### Example in CameLIGO\\n\\n\\n```\\n#import \"./contract_under_test/module_adder.mligo\" \"Adder\"\\n\\nlet _tester (a : (Adder parameter_of, int) typed_address) (_ : michelson_contract) (_ : int) : unit =\\n  let c : (Adder parameter_of) contract = Test.to_contract a in\\n  (* Test 1 *)\\n  let _ = Test.transfer_to_contract_exn c (Add 0) 0tez in\\n  let () = assert (Test.get_storage a = 0) in\\n  ()\\n\\nlet test =\\n    Test.originate_module_and_mutate_all (contract_of Adder) 0 0tez _tester\\n\\n```\\n\\n"
merge_request: '2526'
title: "Testing framework: add support for mutation of modules"
type: added
            