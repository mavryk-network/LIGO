type dup<a> = [a, a];

let diag : <T>((x : T) => dup<T>) = (x : T) => [x, x];

let _rev : <T>((p : [list<T>, list<T>]) => list<T>) = ([xs, acc] : [list<T>, list<T>]) : list<T> =>
  match(xs, list([
  ([] : list<T>) => acc,
  ([x,... xs] : list<T>) => _rev([xs, list([x,...acc])])
  ]));

let rev : <T>((xs : list<T>) => list<T>) = (xs : list<T>) : list<T> => _rev([xs, (list([]) as list<T>)]);


let _zip : <T,U>((p : [list<T>, list<U>, list<[T, U]>]) => list<[T, U]>) = ([xs, ys, acc] : [list<T>, list<U>, list<[T, U]>]) : list<[T, U]> =>
  match(xs, list([
  ([] : list<T>) =>
       match(ys, list([
       ([] : list<U>) => acc,
       ([_y, ..._ys] : list<U>)  => (failwith ("oops") as list<[T, U]>)
       ])),
  ([x, ...xs] : list<T>) =>
        match(ys, list([
        ([] : list<U>) => (failwith ("oops") as list<[T, U]>),
        ([y, ...ys] : list<U>) => _zip([xs, ys, list([[x, y], ...acc])])
        ]))
  ]));

let zip : <T,U>((xs : list<T>) => ((ys : list<U>) => list<[T, U]>)) = (xs : list<T>) => ((ys : list<U>) : list<[T, U]> => rev (_zip ([xs, ys, (list([]) as list<[T, U]>)])));

let self_zip : <T>((xs : list<T>) => list<[T, T]>) = (xs : list<T>) : list<[T, T]> => {
  let [xs, ys] = diag(xs);
  return (zip(xs))(ys)
};

let v : list<[string, string]> = self_zip (list(["a","b"]));
let w : list<[int, nat]> = (zip (list([1,2,3])))(list([(4 as nat),(5 as nat),(6 as nat)]));
