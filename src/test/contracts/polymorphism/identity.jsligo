type storage = int;

type parameter = unit;

const id : <P>(x : P) => P = (x : P) => {
    const id_1 : <Q>(y : Q) => Q = (y : Q) => {
        let id_2 : <R>(z : R) => R = (z : R) => {
            let z = z;
            return z;
        };
        let y = y;
        return id_2(y);
    }
    return id_1(x);
};

const ident : <P>(x : P) => P = (x : P) => {
    const ident_1 : <P>(y : P) => P = (y : P) => {
        let ident_2 : <P>(z : P) => P = (z : P) => {
            let z = z;
            return z;
        };
        let y = y;
        return ident_2(y);
    }
    return ident_1(x);
};


const x : int = id(1) + ident(1);

type return_ = [list <operation>, storage];

const main = ([_, _] : [parameter, storage]) : return_ => {
 return [
   (list([]) as list <operation>), x
  ]
};

