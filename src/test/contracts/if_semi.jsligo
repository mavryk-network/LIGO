type storage = int;

type parameter =
  ["Increment", int]
| ["Decrement", int]
| ["Reset"];

const add = (store: storage, delta: int): storage => store + delta;
const sub = (store: storage, delta: int): storage => store - delta;


const main = (action: parameter, store: storage) : [ list<operation> , storage ] => {
  if (true) {
    return [
      list([]),    // No operations
      (match (action, {
        Increment: n => add (store, n),
        Decrement: n => sub (store, n),
        Reset:     ()  => 0}))
      ]
  }
  return failwith("Not Allowed");
};


const main2 = (action: parameter, store: storage) : [ list<operation> , storage ] => {
  if (true) {

 return [
   list([]),    // No operations
   (match (action, {
    Increment: n => add (store, n),
    Decrement: n => sub (store, n),
    Reset:     ()  => 0}))
  ]
  } // comment should also work
  return failwith("Not Allowed");
};


const main3 = (action: parameter, store: storage) : [ list<operation> , storage ] => {
  if (true) {

 return [
   list([]),    // No operations
   (match (action, {
    Increment: n => add (store, n),
    Decrement: n => sub (store, n),
    Reset:     ()  => 0}))
  ]
  } // Comment then else should be fine too
  else {
    return failwith("Not allowed");
  }
}


const main4 = (action: parameter, store: storage) : [ list<operation> , storage ] => {
  if (true) {

 return [
   list([]),    // No operations
   (match (action, {
    Increment: n => add (store, n),
    Decrement: n => sub (store, n),
    Reset:     ()  => 0}))
  ]
  } /* Block comments as well */
  // and even multiple comments
  return failwith("Not Allowed");
};

export const example = (x : int) : int => {
  if (x == 42) { return x; } // foo
  else {
    return x;
  }
}
