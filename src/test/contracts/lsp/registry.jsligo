#import "@ligo/bigarray/lib/bigarray.mligo" "Bigarray"
type storage = list<int>;

type return_ = [list<operation>, list<int>];

const eratosphen = (): list<int> => {
  const maxn = 1000000;
  let primes = Bigarray.fill(maxn)(1);
  primes = Bigarray.set_exn(primes)(0)(0);
  let i = 2;
  while (i < maxn) {
    if (Bigarray.get_exn(primes)(i) == 1) {
      let j = i * i;
      while (j < maxn) {
        primes = Bigarray.set_exn(primes)(j)(0);
        j += i
      }
    };
    i += 1
  };
  return primes
};

const arePrimes = (l: list<int>): list<int> => {
  const primes = eratosphen();
  return (
    List.map(
      (x: int): int => {
        if (Bigarray.get_exn(primes)(x) == 1) {
          return 1
        } else {
          return 0
        }
      },
      l
    )
  )
};

const main = ([_action, store]: [unit, storage]): return_ => {
  return [list([]) as list<operation>, arePrimes(store)]
};
