type storage = int

type parameter = ["Increment", int] | ["Decrement", int] | ["Reset"]

/* Two entrypoints */

function add (store: storage, delta: int) { return store + delta }

function sub (store: storage, delta: int) { return store - delta }

/* Main access point that dispatches to the entrypoints according to
   the smart contract parameter. */

@entry
function main (action: parameter, store: storage): [list<operation>, storage] {
  return [
    list([]), // No operations
    match(action) {
      when(Increment(n)): add(store, n)
      when(Decrement(n)): sub(store, n)
      when(Reset()): 0
    }
  ]
};

/* Tests for main access point */

const test_initial_storage =
  (
    () => {
      let initial_storage = 42;
      let [taddr, _code, _size] = Test.originate(main, initial_storage, 0tez);
      return assert(Test.get_storage(taddr) == initial_storage)
    }
  )();

const test_increment =
  (
    () => {
      let initial_storage = 42;
      let [taddr, _code, _size] = Test.originate(main, initial_storage, 0tez);
      let contr = Test.to_contract(taddr);
      Test.transfer_to_contract_exn(contr, (Increment(1)), 1mutez);
      return assert(Test.get_storage(taddr) == initial_storage + 1)
    }
  )();
