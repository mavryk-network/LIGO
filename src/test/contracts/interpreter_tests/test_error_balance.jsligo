type storage = int;

type parameter =
| ["Increment", int]
| ["Decrement", int]
| ["Reset"];

type return_ = [list <operation>, storage];

let add = ([store, delta] : [storage, int]) : storage => store + delta;
let sub = ([store, delta] : [storage, int]) : storage => store - delta;

let main = ([action, store] : [parameter, storage]) : return_ => {
 return [
   (list([]) as list <operation>),    // No operations
   (match (action, {
    Increment: (n: int) => add ([store, n]),
    Decrement: (n: int) => sub ([store, n]),
    Reset:     ()  => 0}))
  ]
};


let _test = () : test_exec_error_balance_too_low => {
  let initial_storage = 42 as int;
  let [taddr, _, _] = Test.originate(main, initial_storage, 0 as tez);
  let contr = Test.to_contract(taddr);
  let r = Test.transfer_to_contract(contr, (Increment (1)), 100000000 as tez);
  return match(r, {
    Success: (n : nat) => failwith("Success"),
    Fail: (e : test_exec_error) => 
     match (e, {
       Rejected: (x: [michelson_code, address]) => failwith("Rejected"),
       Balance_too_low : (x : test_exec_error_balance_too_low) => { Test.log(x.spend_request); Test.log(x.contract_balance); return x; },
       Other: (s: string) => failwith("Other")
     })
  });
};

let test = _test();
