type storage = int;

type parameter =
| ["Increment", int]
| ["Decrement", int]
| ["Reset"];

type return_ = [list <operation>, storage];

const add = ([store, delta] : [storage, int]) : storage => store + delta;
const sub = ([store, delta] : [storage, int]) : storage => store - delta;

const main = (action: parameter, store: storage) : return_ => {
 return [
   (list([]) as list <operation>),    // No operations
   (match (action) {
    when(Increment(n)): add ([store, n]);
    when(Decrement(n)): sub ([store, n]);
    when(Reset()): 0; })
  ]
};


const _test = () : test_exec_error_balance_too_low => {
  let initial_storage = 42 as int;
  let [taddr, _c, _s] = Test.originate(main, initial_storage, 0 as tez);
  let contr = Test.to_contract(taddr);
  let r = Test.transfer_to_contract(contr, (Increment (1)), 100000000 as tez);
  return match(r) {
    when(Success(_n)): failwith("Success");
    when(Fail(e)): match (e) {
       when(Rejected(_x)): failwith("Rejected");
       when(Balance_too_low(x)): ((x: test_exec_error_balance_too_low) => { Test.log(x.spend_request); Test.log(x.contract_balance); return x; })(x);
       when(Other(_s)): failwith("Other");
     };
  };
};

const test = _test();
