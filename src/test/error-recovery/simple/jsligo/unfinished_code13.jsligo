type sum_aggregator = { counter : int, sum : int };

let counter = (n : int) : int => {
  let initial = ({ counter: 0, sum: 0 }) as sum_aggregator;
  const aggregate : (x: sum_aggregator) => int =
    (prev : sum_aggregator) => /* TODO */
};

type sum_aggregator = { counter : int, sum : int };

let counter = (n : int) : int => {
  const initial : sum_aggregator = { counter: 0, sum: 0 };
  const aggregate : (x: sum_aggregator) => int =
    (prev : sum_aggregator) => {
      if (prev.counter <= n) {
        return aggregate({
                  counter: prev.counter + 1,
                  sum: prev.counter + prev.sum
               });
      } else {
        return prev.sum;
      }
    }
  return aggregate(initial);
};
