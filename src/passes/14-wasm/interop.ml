(* Do not change, this file is generated by the Rust `expose` macro. *)
module W = WasmObjectFile
open W.Source
open W.Ast

let at = no_region

let name s =
  try W.Utf8.decode s with W.Utf8.Utf8 -> failwith "invalid UTF-8 encoding"

let env : module_ =
  {
    it =
      {
        empty_module with
        types =
          [
            {
              it =
                {tname = "c_neg"; tdetails = FuncType ([I32Type; I32Type], [])};
              at;
            };
            {
              it =
                {
                  tname = "c_add";
                  tdetails = FuncType ([I32Type; I32Type; I32Type], []);
                };
              at;
            };
            {
              it =
                {
                  tname = "c_sub";
                  tdetails = FuncType ([I32Type; I32Type; I32Type], []);
                };
              at;
            };
            {
              it =
                {
                  tname = "c_mul";
                  tdetails = FuncType ([I32Type; I32Type; I32Type], []);
                };
              at;
            };
            {
              it =
                {
                  tname = "c_div";
                  tdetails = FuncType ([I32Type; I32Type; I32Type], []);
                };
              at;
            };
            {
              it =
                {
                  tname = "c_mod";
                  tdetails = FuncType ([I32Type; I32Type; I32Type], []);
                };
              at;
            };
            {
              it =
                {tname = "c_not"; tdetails = FuncType ([I32Type; I32Type], [])};
              at;
            };
            {
              it =
                {
                  tname = "c_and";
                  tdetails = FuncType ([I32Type; I32Type; I32Type], []);
                };
              at;
            };
            {
              it =
                {
                  tname = "c_or";
                  tdetails = FuncType ([I32Type; I32Type; I32Type], []);
                };
              at;
            };
            {
              it =
                {
                  tname = "c_lsl";
                  tdetails = FuncType ([I32Type; I32Type; I32Type], []);
                };
              at;
            };
            {
              it =
                {
                  tname = "c_lsr";
                  tdetails = FuncType ([I32Type; I32Type; I32Type], []);
                };
              at;
            };
            {
              it =
                {
                  tname = "c_list_iter";
                  tdetails = FuncType ([I32Type; I32Type; I32Type], []);
                };
              at;
            };
          ];
        imports =
          [
            {
              it =
                {
                  module_name = name "env";
                  item_name = name "c_neg";
                  idesc = {it = FuncImport "c_neg"; at};
                };
              at;
            };
            {
              it =
                {
                  module_name = name "env";
                  item_name = name "c_add";
                  idesc = {it = FuncImport "c_add"; at};
                };
              at;
            };
            {
              it =
                {
                  module_name = name "env";
                  item_name = name "c_sub";
                  idesc = {it = FuncImport "c_sub"; at};
                };
              at;
            };
            {
              it =
                {
                  module_name = name "env";
                  item_name = name "c_mul";
                  idesc = {it = FuncImport "c_mul"; at};
                };
              at;
            };
            {
              it =
                {
                  module_name = name "env";
                  item_name = name "c_div";
                  idesc = {it = FuncImport "c_div"; at};
                };
              at;
            };
            {
              it =
                {
                  module_name = name "env";
                  item_name = name "c_mod";
                  idesc = {it = FuncImport "c_mod"; at};
                };
              at;
            };
            {
              it =
                {
                  module_name = name "env";
                  item_name = name "c_not";
                  idesc = {it = FuncImport "c_not"; at};
                };
              at;
            };
            {
              it =
                {
                  module_name = name "env";
                  item_name = name "c_and";
                  idesc = {it = FuncImport "c_and"; at};
                };
              at;
            };
            {
              it =
                {
                  module_name = name "env";
                  item_name = name "c_or";
                  idesc = {it = FuncImport "c_or"; at};
                };
              at;
            };
            {
              it =
                {
                  module_name = name "env";
                  item_name = name "c_lsl";
                  idesc = {it = FuncImport "c_lsl"; at};
                };
              at;
            };
            {
              it =
                {
                  module_name = name "env";
                  item_name = name "c_lsr";
                  idesc = {it = FuncImport "c_lsr"; at};
                };
              at;
            };
            {
              it =
                {
                  module_name = name "env";
                  item_name = name "c_list_iter";
                  idesc = {it = FuncImport "c_list_iter"; at};
                };
              at;
            };
          ];
        symbols =
          [
            {
              it = {name = "c_neg"; details = Import ([I32Type; I32Type], [])};
              at;
            };
            {
              it =
                {
                  name = "c_add";
                  details = Import ([I32Type; I32Type; I32Type], []);
                };
              at;
            };
            {
              it =
                {
                  name = "c_sub";
                  details = Import ([I32Type; I32Type; I32Type], []);
                };
              at;
            };
            {
              it =
                {
                  name = "c_mul";
                  details = Import ([I32Type; I32Type; I32Type], []);
                };
              at;
            };
            {
              it =
                {
                  name = "c_div";
                  details = Import ([I32Type; I32Type; I32Type], []);
                };
              at;
            };
            {
              it =
                {
                  name = "c_mod";
                  details = Import ([I32Type; I32Type; I32Type], []);
                };
              at;
            };
            {
              it = {name = "c_not"; details = Import ([I32Type; I32Type], [])};
              at;
            };
            {
              it =
                {
                  name = "c_and";
                  details = Import ([I32Type; I32Type; I32Type], []);
                };
              at;
            };
            {
              it =
                {
                  name = "c_or";
                  details = Import ([I32Type; I32Type; I32Type], []);
                };
              at;
            };
            {
              it =
                {
                  name = "c_lsl";
                  details = Import ([I32Type; I32Type; I32Type], []);
                };
              at;
            };
            {
              it =
                {
                  name = "c_lsr";
                  details = Import ([I32Type; I32Type; I32Type], []);
                };
              at;
            };
            {
              it =
                {
                  name = "c_list_iter";
                  details = Import ([I32Type; I32Type; I32Type], []);
                };
              at;
            };
          ];
      };
    at;
  }
