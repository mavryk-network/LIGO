;; Build of the parser for ReasonLIGO

(menhir
 (merge_into Parser)
 (modules ParToken Parser)
 (flags -la 1 --table --strict --explain --inspection --cmly
   --external-tokens Lexing_reasonligo.Token))

(rule
 (targets RecoverParser.ml)
 (deps Parser.cmly)
 (action
  (with-stdout-to
   %{targets}
   (run menhir-recover --external-tokens Lexing_reasonligo.Token Parser.cmly))))

;; Build of the ReasonLIGO parser as a library

(library
 (name parsing_reasonligo)
 (public_name ligo.parsing.reasonligo)
 (instrumentation
  (backend bisect_ppx))
 (modules Parser ParErr Pretty RecoverParser)
 (libraries
  ;; LIGO
  lexing_reasonligo
  lexing_shared
  cst_reasonligo
  ;; Vendors
  simple-utils
  ParserLib
  ;; Third party
  pprint
  terminal_size
  menhirLib
  hex)
 (flags
  (:standard \ -open Core)
  (-open Cst_reasonligo ;; for CST in Parser.mli
   -open Lexing_shared)))

;; for Attr, Wrap in Parser.mli

;; Local build of a standalone parser for ReasonLIGO

(executable
 (name ParserMain)
 (libraries
  ;; LIGO
  preprocessing_reasonligo
  lexing_reasonligo
  parsing_shared
  parsing_reasonligo
  cst_reasonligo
  ;; Third party
  hex)
 (modules ParserMain)
 (flags
  (:standard \ -open Core)))

;; Error messages

(rule
 (targets errors.msg)
 (deps Parser.mly ParToken.mly errors.msg.in)
 (action
  (with-stdout-to
   %{targets}
   (run menhir --unused-tokens --update-errors errors.msg.in --table --strict
     --external-tokens Lexer_reasonligo.Token --base Parser.mly ParToken.mly
     Parser.mly))))

(rule
 (target errors.msg.new)
 (deps Parser.mly ParToken.mly errors.msg.in)
 (action
  (with-stdout-to
   %{target}
   (run menhir --unused-tokens --list-errors --table --strict
     --external-tokens Lexer_reasonligo.Token --base Parser.mly ParToken.mly
     Parser.mly))))

(rule
 (alias runtest)
 (deps errors.msg errors.msg.new)
 (action
  (run menhir --unused-tokens --table --strict --external-tokens
    Lexer_reasonligo.Token --base Parser.mly ParToken.mly Parser.mly
    --compare-errors errors.msg.new --compare-errors errors.msg)))

(rule
 (targets ParErr.ml)
 (deps Parser.mly ParToken.mly errors.msg.in)
 (action
  (with-stdout-to
   %{targets}
   (run menhir --unused-tokens --table --strict --external-tokens
     Lexer_reasonligo.Token --base Parser.mly ParToken.mly Parser.mly
     --compile-errors errors.msg.in))))
