contract: ZWSP
##
## Ends in an error in state: 0.
##
## contract' -> . contract [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type ZWSP
##
## Ends in an error in state: 1.
##
## type_decl -> Type . Ident option(type_params) EQ type_expr [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident ZWSP
##
## Ends in an error in state: 2.
##
## type_decl -> Type Ident . option(type_params) EQ type_expr [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Type Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident LPAR ZWSP
##
## Ends in an error in state: 3.
##
## par(nsepseq(type_var,COMMA)) -> LPAR . nsepseq(type_var,COMMA) RPAR [ EQ ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON QUOTE ZWSP
##
## Ends in an error in state: 4.
##
## type_var -> QUOTE . Ident [ Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## QUOTE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident LPAR QUOTE Ident ZWSP
##
## Ends in an error in state: 6.
##
## nsepseq(type_var,COMMA) -> type_var . [ RPAR ]
## nsepseq(type_var,COMMA) -> type_var . COMMA nsepseq(type_var,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## type_var
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident LPAR QUOTE Ident COMMA ZWSP
##
## Ends in an error in state: 7.
##
## nsepseq(type_var,COMMA) -> type_var COMMA . nsepseq(type_var,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## type_var COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident LPAR QUOTE Ident RPAR ZWSP
##
## Ends in an error in state: 13.
##
## type_decl -> Type Ident option(type_params) . EQ type_expr [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Type Ident option(type_params)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ ZWSP
##
## Ends in an error in state: 14.
##
## type_decl -> Type Ident option(type_params) EQ . type_expr [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Type Ident option(type_params) EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON VBAR ZWSP
##
## Ends in an error in state: 16.
##
## sum_type -> VBAR . nsepseq(variant,VBAR) [ Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON VBAR UIdent ZWSP
##
## Ends in an error in state: 17.
##
## variant -> UIdent . [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
## variant -> UIdent . par(type_expr) [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## UIdent
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON UIdent LPAR ZWSP
##
## Ends in an error in state: 18.
##
## par(type_expr) -> LPAR . type_expr RPAR [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON UIdent ZWSP
##
## Ends in an error in state: 19.
##
## module_access_t -> UIdent . DOT module_var_t [ Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
## variant -> UIdent . [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
## variant -> UIdent . par(type_expr) [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## UIdent
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON UIdent DOT ZWSP
##
## Ends in an error in state: 20.
##
## module_access_t -> UIdent DOT . module_var_t [ Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## UIdent DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON ES6FUN UIdent ZWSP
##
## Ends in an error in state: 21.
##
## module_access_t -> UIdent . DOT module_var_t [ Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## UIdent
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON LPAR ZWSP
##
## Ends in an error in state: 27.
##
## par(tuple(type_expr)) -> LPAR . tuple(type_expr) RPAR [ Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
## par(type_expr) -> LPAR . type_expr RPAR [ Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON LBRACE ZWSP
##
## Ends in an error in state: 28.
##
## record_type -> LBRACE . sep_or_term_list(field_decl,COMMA) RBRACE [ Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON LBRACE Ident ZWSP
##
## Ends in an error in state: 29.
##
## field_decl -> Ident . [ RBRACE COMMA ]
## field_decl -> Ident . type_annotation [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON ZWSP
##
## Ends in an error in state: 30.
##
## type_annotation -> COLON . type_expr [ RPAR RBRACE EQ COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON Ident ZWSP
##
## Ends in an error in state: 32.
##
## core_type -> Ident . [ Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
## type_constr_app -> Ident . par(type_args) [ Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON Ident LPAR ZWSP
##
## Ends in an error in state: 33.
##
## par(type_args) -> LPAR . type_args RPAR [ Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON ES6FUN ZWSP
##
## Ends in an error in state: 34.
##
## fun_type_level -> ES6FUN . core_type ARROW fun_type_level [ Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## ES6FUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr ZWSP
##
## Ends in an error in state: 35.
##
## nseq(Attr) -> Attr . seq(Attr) [ VBAR UIdent Let LBRACE Ident ES6FUN ]
##
## The known suffix of the stack is as follows:
## Attr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr Attr ZWSP
##
## Ends in an error in state: 36.
##
## seq(Attr) -> Attr . seq(Attr) [ VBAR UIdent Let LBRACE Ident ES6FUN ]
##
## The known suffix of the stack is as follows:
## Attr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON ES6FUN Attr VBAR
##
## Ends in an error in state: 44.
##
## record_type -> nseq(Attr) . LBRACE sep_or_term_list(field_decl,COMMA) RBRACE [ Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 35, spurious reduction of production seq(Attr) ->
## In state 38, spurious reduction of production nseq(Attr) -> Attr seq(Attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON Attr LBRACE ZWSP
##
## Ends in an error in state: 45.
##
## record_type -> nseq(Attr) LBRACE . sep_or_term_list(field_decl,COMMA) RBRACE [ Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON LBRACE Attr VBAR
##
## Ends in an error in state: 49.
##
## field_decl -> nseq(Attr) . Ident [ RBRACE COMMA ]
## field_decl -> nseq(Attr) . Ident type_annotation [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 35, spurious reduction of production seq(Attr) ->
## In state 38, spurious reduction of production nseq(Attr) -> Attr seq(Attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON LBRACE Attr Ident ZWSP
##
## Ends in an error in state: 50.
##
## field_decl -> nseq(Attr) Ident . [ RBRACE COMMA ]
## field_decl -> nseq(Attr) Ident . type_annotation [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON LBRACE Ident COLON Ident Type
##
## Ends in an error in state: 53.
##
## nsepseq(field_decl,COMMA) -> field_decl . [ RBRACE ]
## nsepseq(field_decl,COMMA) -> field_decl . COMMA nsepseq(field_decl,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_decl,COMMA)) -> field_decl . COMMA seq(__anonymous_0(field_decl,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production core_type -> Ident
## In state 64, spurious reduction of production fun_type_level -> core_type
## In state 81, spurious reduction of production type_expr -> fun_type_level
## In state 87, spurious reduction of production type_annotation -> COLON type_expr
## In state 88, spurious reduction of production field_decl -> Ident type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON LBRACE Ident COMMA ZWSP
##
## Ends in an error in state: 54.
##
## nsepseq(field_decl,COMMA) -> field_decl COMMA . nsepseq(field_decl,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_decl,COMMA)) -> field_decl COMMA . seq(__anonymous_0(field_decl,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON LBRACE Ident COMMA Ident COLON Ident Type
##
## Ends in an error in state: 57.
##
## nsepseq(field_decl,COMMA) -> field_decl . [ RBRACE ]
## nsepseq(field_decl,COMMA) -> field_decl . COMMA nsepseq(field_decl,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_decl,COMMA)) -> field_decl . COMMA seq(__anonymous_0(field_decl,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production core_type -> Ident
## In state 64, spurious reduction of production fun_type_level -> core_type
## In state 81, spurious reduction of production type_expr -> fun_type_level
## In state 87, spurious reduction of production type_annotation -> COLON type_expr
## In state 88, spurious reduction of production field_decl -> Ident type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON LBRACE Ident COMMA Ident COMMA ZWSP
##
## Ends in an error in state: 58.
##
## nsepseq(field_decl,COMMA) -> field_decl COMMA . nsepseq(field_decl,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_decl,COMMA)) -> field_decl COMMA . seq(__anonymous_0(field_decl,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON ES6FUN Ident Type
##
## Ends in an error in state: 61.
##
## fun_type_level -> ES6FUN core_type . ARROW fun_type_level [ Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## ES6FUN core_type
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production core_type -> Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON ES6FUN Ident ARROW ZWSP
##
## Ends in an error in state: 62.
##
## fun_type_level -> ES6FUN core_type ARROW . fun_type_level [ Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## ES6FUN core_type ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON UIdent LPAR Ident RPAR ZWSP
##
## Ends in an error in state: 65.
##
## nsepseq(variant,VBAR) -> variant . [ Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
## nsepseq(variant,VBAR) -> variant . VBAR nsepseq(variant,VBAR) [ Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## variant
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON UIdent VBAR ZWSP
##
## Ends in an error in state: 66.
##
## nsepseq(variant,VBAR) -> variant VBAR . nsepseq(variant,VBAR) [ Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## variant VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON VBAR Attr VBAR
##
## Ends in an error in state: 67.
##
## variant -> nseq(Attr) . UIdent [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
## variant -> nseq(Attr) . UIdent par(type_expr) [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 35, spurious reduction of production seq(Attr) ->
## In state 38, spurious reduction of production nseq(Attr) -> Attr seq(Attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON Attr UIdent ZWSP
##
## Ends in an error in state: 68.
##
## variant -> nseq(Attr) UIdent . [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
## variant -> nseq(Attr) UIdent . par(type_expr) [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) UIdent
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON Ident LPAR Ident Type
##
## Ends in an error in state: 71.
##
## tuple(type_expr) -> type_expr . COMMA nsepseq(type_expr,COMMA) [ RPAR ]
## type_args -> type_expr . [ RPAR ]
##
## The known suffix of the stack is as follows:
## type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production core_type -> Ident
## In state 64, spurious reduction of production fun_type_level -> core_type
## In state 81, spurious reduction of production type_expr -> fun_type_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON LPAR Ident COMMA ZWSP
##
## Ends in an error in state: 72.
##
## tuple(type_expr) -> type_expr COMMA . nsepseq(type_expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## type_expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON LPAR Ident COMMA Ident Type
##
## Ends in an error in state: 73.
##
## nsepseq(type_expr,COMMA) -> type_expr . [ RPAR ]
## nsepseq(type_expr,COMMA) -> type_expr . COMMA nsepseq(type_expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production core_type -> Ident
## In state 64, spurious reduction of production fun_type_level -> core_type
## In state 81, spurious reduction of production type_expr -> fun_type_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON LPAR Ident COMMA Ident COMMA ZWSP
##
## Ends in an error in state: 74.
##
## nsepseq(type_expr,COMMA) -> type_expr COMMA . nsepseq(type_expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## type_expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON Attr Let
##
## Ends in an error in state: 76.
##
## record_type -> nseq(Attr) . LBRACE sep_or_term_list(field_decl,COMMA) RBRACE [ Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
## sum_type -> nseq(Attr) . VBAR nsepseq(variant,VBAR) [ Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
## variant -> nseq(Attr) . UIdent [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
## variant -> nseq(Attr) . UIdent par(type_expr) [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 35, spurious reduction of production seq(Attr) ->
## In state 38, spurious reduction of production nseq(Attr) -> Attr seq(Attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON Attr VBAR ZWSP
##
## Ends in an error in state: 77.
##
## sum_type -> nseq(Attr) VBAR . nsepseq(variant,VBAR) [ Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON LPAR Ident Type
##
## Ends in an error in state: 91.
##
## par(type_expr) -> LPAR type_expr . RPAR [ Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
## tuple(type_expr) -> type_expr . COMMA nsepseq(type_expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production core_type -> Ident
## In state 64, spurious reduction of production fun_type_level -> core_type
## In state 81, spurious reduction of production type_expr -> fun_type_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON UIdent LPAR Ident Type
##
## Ends in an error in state: 95.
##
## par(type_expr) -> LPAR type_expr . RPAR [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production core_type -> Ident
## In state 64, spurious reduction of production fun_type_level -> core_type
## In state 81, spurious reduction of production type_expr -> fun_type_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module ZWSP
##
## Ends in an error in state: 98.
##
## module_alias -> Module . UIdent EQ nsepseq(module_name,DOT) [ Type SEMI RBRACE Module Let EOF Directive Attr ]
## module_decl -> Module . UIdent EQ LBRACE module_ RBRACE [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Module
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module UIdent ZWSP
##
## Ends in an error in state: 99.
##
## module_alias -> Module UIdent . EQ nsepseq(module_name,DOT) [ Type SEMI RBRACE Module Let EOF Directive Attr ]
## module_decl -> Module UIdent . EQ LBRACE module_ RBRACE [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Module UIdent
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module UIdent EQ ZWSP
##
## Ends in an error in state: 100.
##
## module_alias -> Module UIdent EQ . nsepseq(module_name,DOT) [ Type SEMI RBRACE Module Let EOF Directive Attr ]
## module_decl -> Module UIdent EQ . LBRACE module_ RBRACE [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Module UIdent EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module UIdent EQ UIdent ZWSP
##
## Ends in an error in state: 101.
##
## nsepseq(module_name,DOT) -> UIdent . [ Type SEMI RBRACE Module Let EOF Directive Attr ]
## nsepseq(module_name,DOT) -> UIdent . DOT nsepseq(module_name,DOT) [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## UIdent
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module UIdent EQ UIdent DOT ZWSP
##
## Ends in an error in state: 102.
##
## nsepseq(module_name,DOT) -> UIdent DOT . nsepseq(module_name,DOT) [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## UIdent DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module UIdent EQ LBRACE ZWSP
##
## Ends in an error in state: 104.
##
## module_decl -> Module UIdent EQ LBRACE . module_ RBRACE [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Module UIdent EQ LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let ZWSP
##
## Ends in an error in state: 105.
##
## let_declaration -> Let . let_binding [ Type SEMI RBRACE Module Let EOF Directive Attr ]
## let_declaration -> Let . Rec let_binding [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Rec ZWSP
##
## Ends in an error in state: 107.
##
## let_declaration -> Let Rec . let_binding [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Let Rec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR ZWSP
##
## Ends in an error in state: 108.
##
## par(closed_irrefutable) -> LPAR . closed_irrefutable RPAR [ RPAR RBRACE EQ COMMA COLON ]
## unit -> LPAR . RPAR [ RPAR RBRACE EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR LPAR ZWSP
##
## Ends in an error in state: 111.
##
## par(closed_irrefutable) -> LPAR . closed_irrefutable RPAR [ RPAR COMMA COLON ]
## par(non_const_constr_irrefutable) -> LPAR . non_const_constr_irrefutable RPAR [ RPAR ]
## unit -> LPAR . RPAR [ RPAR COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR LPAR UIdent ZWSP
##
## Ends in an error in state: 112.
##
## constant_constr_pattern -> UIdent . [ RPAR ]
## non_const_constr_irrefutable -> UIdent . sub_irrefutable [ RPAR ]
##
## The known suffix of the stack is as follows:
## UIdent
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE ZWSP
##
## Ends in an error in state: 113.
##
## record_pattern(sub_irrefutable) -> LBRACE . sep_or_term_list(field_pattern(sub_irrefutable),COMMA) RBRACE [ RPAR RBRACE EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident ZWSP
##
## Ends in an error in state: 114.
##
## field_pattern(sub_irrefutable) -> Ident . [ RBRACE COMMA ]
## field_pattern(sub_irrefutable) -> Ident . COLON sub_irrefutable [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident COLON ZWSP
##
## Ends in an error in state: 115.
##
## field_pattern(sub_irrefutable) -> Ident COLON . sub_irrefutable [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Attr VBAR
##
## Ends in an error in state: 122.
##
## var_pattern -> nseq(Attr) . Ident [ RPAR RBRACKET RBRACE EQ COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 35, spurious reduction of production seq(Attr) ->
## In state 38, spurious reduction of production nseq(Attr) -> Attr seq(Attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident COLON Ident ZWSP
##
## Ends in an error in state: 128.
##
## nsepseq(field_pattern(sub_irrefutable),COMMA) -> field_pattern(sub_irrefutable) . [ RBRACE ]
## nsepseq(field_pattern(sub_irrefutable),COMMA) -> field_pattern(sub_irrefutable) . COMMA nsepseq(field_pattern(sub_irrefutable),COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_pattern(sub_irrefutable),COMMA)) -> field_pattern(sub_irrefutable) . COMMA seq(__anonymous_0(field_pattern(sub_irrefutable),COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern(sub_irrefutable)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident COMMA ZWSP
##
## Ends in an error in state: 129.
##
## nsepseq(field_pattern(sub_irrefutable),COMMA) -> field_pattern(sub_irrefutable) COMMA . nsepseq(field_pattern(sub_irrefutable),COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_pattern(sub_irrefutable),COMMA)) -> field_pattern(sub_irrefutable) COMMA . seq(__anonymous_0(field_pattern(sub_irrefutable),COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern(sub_irrefutable) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident COMMA Ident COLON Ident ZWSP
##
## Ends in an error in state: 132.
##
## nsepseq(field_pattern(sub_irrefutable),COMMA) -> field_pattern(sub_irrefutable) . [ RBRACE ]
## nsepseq(field_pattern(sub_irrefutable),COMMA) -> field_pattern(sub_irrefutable) . COMMA nsepseq(field_pattern(sub_irrefutable),COMMA) [ RBRACE ]
## seq(__anonymous_0(field_pattern(sub_irrefutable),COMMA)) -> field_pattern(sub_irrefutable) . COMMA seq(__anonymous_0(field_pattern(sub_irrefutable),COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern(sub_irrefutable)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident COMMA Ident COMMA ZWSP
##
## Ends in an error in state: 133.
##
## nsepseq(field_pattern(sub_irrefutable),COMMA) -> field_pattern(sub_irrefutable) COMMA . nsepseq(field_pattern(sub_irrefutable),COMMA) [ RBRACE ]
## seq(__anonymous_0(field_pattern(sub_irrefutable),COMMA)) -> field_pattern(sub_irrefutable) COMMA . seq(__anonymous_0(field_pattern(sub_irrefutable),COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern(sub_irrefutable) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident ZWSP
##
## Ends in an error in state: 138.
##
## irrefutable -> sub_irrefutable . [ RPAR EQ COLON ]
## tuple(sub_irrefutable) -> sub_irrefutable . COMMA nsepseq(sub_irrefutable,COMMA) [ RPAR EQ COLON ]
##
## The known suffix of the stack is as follows:
## sub_irrefutable
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COMMA ZWSP
##
## Ends in an error in state: 139.
##
## tuple(sub_irrefutable) -> sub_irrefutable COMMA . nsepseq(sub_irrefutable,COMMA) [ RPAR EQ COLON ]
##
## The known suffix of the stack is as follows:
## sub_irrefutable COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COMMA Ident ZWSP
##
## Ends in an error in state: 140.
##
## nsepseq(sub_irrefutable,COMMA) -> sub_irrefutable . [ RPAR EQ COLON ]
## nsepseq(sub_irrefutable,COMMA) -> sub_irrefutable . COMMA nsepseq(sub_irrefutable,COMMA) [ RPAR EQ COLON ]
##
## The known suffix of the stack is as follows:
## sub_irrefutable
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COMMA Ident COMMA ZWSP
##
## Ends in an error in state: 141.
##
## nsepseq(sub_irrefutable,COMMA) -> sub_irrefutable COMMA . nsepseq(sub_irrefutable,COMMA) [ RPAR EQ COLON ]
##
## The known suffix of the stack is as follows:
## sub_irrefutable COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR LPAR UIdent Ident ZWSP
##
## Ends in an error in state: 145.
##
## par(non_const_constr_irrefutable) -> LPAR non_const_constr_irrefutable . RPAR [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR non_const_constr_irrefutable
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR Ident EQ
##
## Ends in an error in state: 147.
##
## closed_irrefutable -> irrefutable . [ RPAR ]
## typed_pattern(irrefutable) -> irrefutable . COLON type_expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## irrefutable
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 138, spurious reduction of production irrefutable -> sub_irrefutable
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR Ident COLON ZWSP
##
## Ends in an error in state: 148.
##
## typed_pattern(irrefutable) -> irrefutable COLON . type_expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## irrefutable COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR UIdent Type
##
## Ends in an error in state: 152.
##
## par(closed_irrefutable) -> LPAR closed_irrefutable . RPAR [ RPAR RBRACE EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAR closed_irrefutable
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident RPAR
##
## Ends in an error in state: 155.
##
## let_binding -> irrefutable . option(type_annotation) EQ expr [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## irrefutable
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 138, spurious reduction of production irrefutable -> sub_irrefutable
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident COLON Ident Type
##
## Ends in an error in state: 157.
##
## let_binding -> irrefutable option(type_annotation) . EQ expr [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## irrefutable option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production core_type -> Ident
## In state 64, spurious reduction of production fun_type_level -> core_type
## In state 81, spurious reduction of production type_expr -> fun_type_level
## In state 87, spurious reduction of production type_annotation -> COLON type_expr
## In state 156, spurious reduction of production option(type_annotation) -> type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident EQ ZWSP
##
## Ends in an error in state: 158.
##
## let_binding -> irrefutable option(type_annotation) EQ . expr [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## irrefutable option(type_annotation) EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent ZWSP
##
## Ends in an error in state: 160.
##
## constant_constr_expr -> UIdent . [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## constr_expr -> UIdent . argument [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## module_access_e -> UIdent . DOT module_var_e [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## UIdent
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent UIdent ZWSP
##
## Ends in an error in state: 161.
##
## constant_constr_expr -> UIdent . [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## module_access_e -> UIdent . DOT module_var_e [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## UIdent
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent DOT ZWSP
##
## Ends in an error in state: 162.
##
## module_access_e -> UIdent DOT . module_var_e [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## UIdent DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch UIdent ZWSP
##
## Ends in an error in state: 163.
##
## module_access_e -> UIdent . DOT module_var_e [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## UIdent
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent DOT Ident ZWSP
##
## Ends in an error in state: 165.
##
## module_var_e -> Ident . [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## projection -> Ident . selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident LBRACKET ZWSP
##
## Ends in an error in state: 166.
##
## selection -> LBRACKET . Int RBRACKET selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## selection -> LBRACKET . Int RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident LBRACKET Int ZWSP
##
## Ends in an error in state: 167.
##
## selection -> LBRACKET Int . RBRACKET selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## selection -> LBRACKET Int . RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET Int
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident LBRACKET Int RBRACKET ZWSP
##
## Ends in an error in state: 168.
##
## selection -> LBRACKET Int RBRACKET . selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## selection -> LBRACKET Int RBRACKET . [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET Int RBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident DOT ZWSP
##
## Ends in an error in state: 169.
##
## selection -> DOT . Ident selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## selection -> DOT . Ident [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident DOT Ident ZWSP
##
## Ends in an error in state: 170.
##
## selection -> DOT Ident . selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## selection -> DOT Ident . [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## DOT Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Lang ZWSP
##
## Ends in an error in state: 180.
##
## code_inj -> Lang . expr RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## Lang
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch ZWSP
##
## Ends in an error in state: 181.
##
## switch_expr -> Switch . core_expr LBRACE cases RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## Switch
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR ZWSP
##
## Ends in an error in state: 182.
##
## par(annot_expr) -> LPAR . annot_expr RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## par(tuple(annot_expr)) -> LPAR . tuple(annot_expr) RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## unit -> LPAR . RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: NOT ZWSP
##
## Ends in an error in state: 183.
##
## unary_expr_level -> NOT . call_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## NOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET ZWSP
##
## Ends in an error in state: 184.
##
## list_of(expr) -> LBRACKET . option(sep_or_term_list(expr,COMMA)) RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## spread -> LBRACKET . expr COMMA ELLIPSIS expr RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: MINUS ZWSP
##
## Ends in an error in state: 185.
##
## unary_expr_level -> MINUS . call_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ZWSP
##
## Ends in an error in state: 186.
##
## record_expr -> LBRACE . field_assignment option(more_field_assignments) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## record_expr -> LBRACE . Ident more_field_assignments RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## sequence -> LBRACE . series RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## update_record -> LBRACE . ELLIPSIS path COMMA sep_or_term_list(field_path_assignment,COMMA) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Let ZWSP
##
## Ends in an error in state: 187.
##
## let_in_sequence -> Let . let_binding SEMI series [ RBRACE ]
## let_in_sequence -> Let . Rec let_binding SEMI series [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Let Rec ZWSP
##
## Ends in an error in state: 188.
##
## let_in_sequence -> Let Rec . let_binding SEMI series [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Let Rec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Let Rec Ident EQ UIdent VBAR
##
## Ends in an error in state: 189.
##
## let_in_sequence -> Let Rec let_binding . SEMI series [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 160, spurious reduction of production constant_constr_expr -> UIdent
## In state 248, spurious reduction of production constr_expr -> constant_constr_expr
## In state 247, spurious reduction of production call_expr_level -> constr_expr
## In state 250, spurious reduction of production unary_expr_level -> call_expr_level
## In state 222, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 238, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 244, spurious reduction of production add_expr_level -> mult_expr_level
## In state 292, spurious reduction of production cat_expr_level -> add_expr_level
## In state 311, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 318, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 322, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production expr -> disj_expr_level
## In state 627, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Let Rec Ident EQ UIdent SEMI ZWSP
##
## Ends in an error in state: 190.
##
## let_in_sequence -> Let Rec let_binding SEMI . series [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Let Rec let_binding SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If ZWSP
##
## Ends in an error in state: 192.
##
## if_then -> If . test_expr branch [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## if_then_else -> If . test_expr branch Else branch [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## If
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR ZWSP
##
## Ends in an error in state: 193.
##
## par(expr) -> LPAR . expr RPAR [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Let ZWSP
##
## Ends in an error in state: 194.
##
## let_expr -> Let . let_binding SEMI expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## let_expr -> Let . Rec let_binding SEMI expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Let Rec ZWSP
##
## Ends in an error in state: 195.
##
## let_expr -> Let Rec . let_binding SEMI expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## Let Rec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Let Rec Ident EQ UIdent VBAR
##
## Ends in an error in state: 196.
##
## let_expr -> Let Rec let_binding . SEMI expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 160, spurious reduction of production constant_constr_expr -> UIdent
## In state 248, spurious reduction of production constr_expr -> constant_constr_expr
## In state 247, spurious reduction of production call_expr_level -> constr_expr
## In state 250, spurious reduction of production unary_expr_level -> call_expr_level
## In state 222, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 238, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 244, spurious reduction of production add_expr_level -> mult_expr_level
## In state 292, spurious reduction of production cat_expr_level -> add_expr_level
## In state 311, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 318, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 322, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production expr -> disj_expr_level
## In state 627, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Let Rec Ident EQ UIdent SEMI ZWSP
##
## Ends in an error in state: 197.
##
## let_expr -> Let Rec let_binding SEMI . expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## Let Rec let_binding SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident ZWSP
##
## Ends in an error in state: 198.
##
## core_expr -> Ident . [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## projection -> Ident . selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN ZWSP
##
## Ends in an error in state: 199.
##
## fun_expr(expr) -> ES6FUN . single_fun_arg ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## fun_expr(expr) -> ES6FUN . unit option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## fun_expr(expr) -> ES6FUN . LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## fun_expr(expr) -> ES6FUN . LPAR type_generics nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR ZWSP
##
## Ends in an error in state: 200.
##
## fun_expr(expr) -> ES6FUN LPAR . nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## fun_expr(expr) -> ES6FUN LPAR . type_generics nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## unit -> LPAR . RPAR [ COLON ARROW ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR Type ZWSP
##
## Ends in an error in state: 201.
##
## type_generics -> Type . Ident COMMA [ WILD LPAR LBRACE Ident Attr ]
## type_generics -> Type . par(nsepseq(type_name,COMMA)) COMMA [ WILD LPAR LBRACE Ident Attr ]
##
## The known suffix of the stack is as follows:
## Type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR Type LPAR ZWSP
##
## Ends in an error in state: 202.
##
## par(nsepseq(type_name,COMMA)) -> LPAR . nsepseq(type_name,COMMA) RPAR [ COMMA ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR Type LPAR Ident ZWSP
##
## Ends in an error in state: 203.
##
## nsepseq(type_name,COMMA) -> Ident . [ RPAR ]
## nsepseq(type_name,COMMA) -> Ident . COMMA nsepseq(type_name,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR Type LPAR Ident COMMA ZWSP
##
## Ends in an error in state: 204.
##
## nsepseq(type_name,COMMA) -> Ident COMMA . nsepseq(type_name,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## Ident COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR Type Ident ZWSP
##
## Ends in an error in state: 208.
##
## type_generics -> Type Ident . COMMA [ WILD LPAR LBRACE Ident Attr ]
##
## The known suffix of the stack is as follows:
## Type Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR Type LPAR Ident RPAR ZWSP
##
## Ends in an error in state: 210.
##
## type_generics -> Type par(nsepseq(type_name,COMMA)) . COMMA [ WILD LPAR LBRACE Ident Attr ]
##
## The known suffix of the stack is as follows:
## Type par(nsepseq(type_name,COMMA))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR Type Ident COMMA ZWSP
##
## Ends in an error in state: 212.
##
## fun_expr(expr) -> ES6FUN LPAR type_generics . nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR type_generics
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR Ident ZWSP
##
## Ends in an error in state: 213.
##
## fun_arg -> sub_irrefutable . option(type_annotation) [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## sub_irrefutable
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR Type Ident COMMA Ident RPAR ZWSP
##
## Ends in an error in state: 216.
##
## fun_expr(expr) -> ES6FUN LPAR type_generics nsepseq(fun_arg,COMMA) RPAR . option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR type_generics nsepseq(fun_arg,COMMA) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR Type Ident COMMA Ident RPAR COLON Ident Type
##
## Ends in an error in state: 217.
##
## fun_expr(expr) -> ES6FUN LPAR type_generics nsepseq(fun_arg,COMMA) RPAR option(type_annotation) . ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR type_generics nsepseq(fun_arg,COMMA) RPAR option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production core_type -> Ident
## In state 64, spurious reduction of production fun_type_level -> core_type
## In state 81, spurious reduction of production type_expr -> fun_type_level
## In state 87, spurious reduction of production type_annotation -> COLON type_expr
## In state 156, spurious reduction of production option(type_annotation) -> type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR Type Ident COMMA Ident RPAR ARROW ZWSP
##
## Ends in an error in state: 218.
##
## fun_expr(expr) -> ES6FUN LPAR type_generics nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW . expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR type_generics nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent Bytes ZWSP
##
## Ends in an error in state: 222.
##
## bin_op(unary_expr_level,Lsl,shift_expr_level) -> unary_expr_level . Lsl shift_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## bin_op(unary_expr_level,Lsr,shift_expr_level) -> unary_expr_level . Lsr shift_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## shift_expr_level -> unary_expr_level . [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## unary_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent Lsr ZWSP
##
## Ends in an error in state: 223.
##
## bin_op(unary_expr_level,Lsr,shift_expr_level) -> unary_expr_level Lsr . shift_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## unary_expr_level Lsr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Bytes ZWSP
##
## Ends in an error in state: 233.
##
## call_expr -> core_expr . par(nsepseq(annot_expr,COMMA)) [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## call_expr -> core_expr . unit [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## call_expr_level -> core_expr . [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## core_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Bytes LPAR ZWSP
##
## Ends in an error in state: 234.
##
## par(nsepseq(annot_expr,COMMA)) -> LPAR . nsepseq(annot_expr,COMMA) RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## unit -> LPAR . RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Type Ident EQ Ident Type
##
## Ends in an error in state: 235.
##
## local_type_decl(expr) -> type_decl . SEMI expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## type_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production core_type -> Ident
## In state 64, spurious reduction of production fun_type_level -> core_type
## In state 81, spurious reduction of production type_expr -> fun_type_level
## In state 97, spurious reduction of production type_decl -> Type Ident option(type_params) EQ type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Type Ident EQ Ident SEMI ZWSP
##
## Ends in an error in state: 236.
##
## local_type_decl(expr) -> type_decl SEMI . expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## type_decl SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr VBAR
##
## Ends in an error in state: 239.
##
## fun_expr(expr) -> nseq(Attr) . ES6FUN single_fun_arg ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## fun_expr(expr) -> nseq(Attr) . ES6FUN unit option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## fun_expr(expr) -> nseq(Attr) . ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## fun_expr(expr) -> nseq(Attr) . ES6FUN LPAR type_generics nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## let_expr -> nseq(Attr) . Let let_binding SEMI expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## let_expr -> nseq(Attr) . Let Rec let_binding SEMI expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 35, spurious reduction of production seq(Attr) ->
## In state 38, spurious reduction of production nseq(Attr) -> Attr seq(Attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr Let ZWSP
##
## Ends in an error in state: 240.
##
## let_expr -> nseq(Attr) Let . let_binding SEMI expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## let_expr -> nseq(Attr) Let . Rec let_binding SEMI expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr Let Rec ZWSP
##
## Ends in an error in state: 241.
##
## let_expr -> nseq(Attr) Let Rec . let_binding SEMI expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Let Rec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr Let Rec Ident EQ UIdent VBAR
##
## Ends in an error in state: 242.
##
## let_expr -> nseq(Attr) Let Rec let_binding . SEMI expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 160, spurious reduction of production constant_constr_expr -> UIdent
## In state 248, spurious reduction of production constr_expr -> constant_constr_expr
## In state 247, spurious reduction of production call_expr_level -> constr_expr
## In state 250, spurious reduction of production unary_expr_level -> call_expr_level
## In state 222, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 238, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 244, spurious reduction of production add_expr_level -> mult_expr_level
## In state 292, spurious reduction of production cat_expr_level -> add_expr_level
## In state 311, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 318, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 322, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production expr -> disj_expr_level
## In state 627, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr Let Rec Ident EQ UIdent SEMI ZWSP
##
## Ends in an error in state: 243.
##
## let_expr -> nseq(Attr) Let Rec let_binding SEMI . expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Let Rec let_binding SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent TIMES ZWSP
##
## Ends in an error in state: 245.
##
## bin_op(mult_expr_level,TIMES,shift_expr_level) -> mult_expr_level TIMES . shift_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## mult_expr_level TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent SLASH ZWSP
##
## Ends in an error in state: 254.
##
## bin_op(mult_expr_level,SLASH,shift_expr_level) -> mult_expr_level SLASH . shift_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## mult_expr_level SLASH
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent Mod ZWSP
##
## Ends in an error in state: 256.
##
## bin_op(mult_expr_level,Mod,shift_expr_level) -> mult_expr_level Mod . shift_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## mult_expr_level Mod
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent Lxor ZWSP
##
## Ends in an error in state: 258.
##
## bin_op(mult_expr_level,Lxor,shift_expr_level) -> mult_expr_level Lxor . shift_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## mult_expr_level Lxor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent Lor ZWSP
##
## Ends in an error in state: 260.
##
## bin_op(mult_expr_level,Lor,shift_expr_level) -> mult_expr_level Lor . shift_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## mult_expr_level Lor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent Land ZWSP
##
## Ends in an error in state: 262.
##
## bin_op(mult_expr_level,Land,shift_expr_level) -> mult_expr_level Land . shift_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## mult_expr_level Land
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Module UIdent EQ LBRACE Directive RBRACE ZWSP
##
## Ends in an error in state: 264.
##
## local_module_decl(expr) -> module_decl . SEMI expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## module_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Module UIdent EQ LBRACE Directive RBRACE SEMI ZWSP
##
## Ends in an error in state: 265.
##
## local_module_decl(expr) -> module_decl SEMI . expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## module_decl SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Module UIdent EQ UIdent Type
##
## Ends in an error in state: 266.
##
## local_module_alias(expr) -> module_alias . SEMI expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## module_alias
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 101, spurious reduction of production nsepseq(module_name,DOT) -> UIdent
## In state 650, spurious reduction of production module_alias -> Module UIdent EQ nsepseq(module_name,DOT)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Module UIdent EQ UIdent SEMI ZWSP
##
## Ends in an error in state: 267.
##
## local_module_alias(expr) -> module_alias SEMI . expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## module_alias SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent Or ZWSP
##
## Ends in an error in state: 277.
##
## bin_op(disj_expr_level,Or,conj_expr_level) -> disj_expr_level Or . conj_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or Module Let EOF Directive COMMA COLON BOOL_OR Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level Or
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent BOOL_AND ZWSP
##
## Ends in an error in state: 279.
##
## bin_op(conj_expr_level,BOOL_AND,comp_expr_level) -> conj_expr_level BOOL_AND . comp_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or Module Let EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## conj_expr_level BOOL_AND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent NE ZWSP
##
## Ends in an error in state: 281.
##
## bin_op(comp_expr_level,NE,cat_expr_level) -> comp_expr_level NE . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Module Let LT LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level NE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent PLUS2 ZWSP
##
## Ends in an error in state: 293.
##
## bin_op(add_expr_level,PLUS2,cat_expr_level) -> add_expr_level PLUS2 . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Module Let LT LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## add_expr_level PLUS2
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent PLUS ZWSP
##
## Ends in an error in state: 295.
##
## bin_op(add_expr_level,PLUS,mult_expr_level) -> add_expr_level PLUS . mult_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module MINUS Let LT LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## add_expr_level PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent MINUS ZWSP
##
## Ends in an error in state: 297.
##
## bin_op(add_expr_level,MINUS,mult_expr_level) -> add_expr_level MINUS . mult_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module MINUS Let LT LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## add_expr_level MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent LT ZWSP
##
## Ends in an error in state: 299.
##
## bin_op(comp_expr_level,LT,cat_expr_level) -> comp_expr_level LT . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Module Let LT LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent LE ZWSP
##
## Ends in an error in state: 301.
##
## bin_op(comp_expr_level,LE,cat_expr_level) -> comp_expr_level LE . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Module Let LT LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level LE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent GT WILD
##
## Ends in an error in state: 303.
##
## bin_op(comp_expr_level,GT,cat_expr_level) -> comp_expr_level GT . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Module Let LT LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## ge -> GT . ZWSP EQ [ Verbatim UIdent String Nat NOT Mutez MINUS Lang LPAR LBRACKET LBRACE Int Ident Bytes ]
##
## The known suffix of the stack is as follows:
## comp_expr_level GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent GT ZWSP ZWSP
##
## Ends in an error in state: 304.
##
## ge -> GT ZWSP . EQ [ Verbatim UIdent String Nat NOT Mutez MINUS Lang LPAR LBRACKET LBRACE Int Ident Bytes ]
##
## The known suffix of the stack is as follows:
## GT ZWSP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent EQ2 ZWSP
##
## Ends in an error in state: 307.
##
## bin_op(comp_expr_level,EQ2,cat_expr_level) -> comp_expr_level EQ2 . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Module Let LT LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level EQ2
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent GT ZWSP EQ ZWSP
##
## Ends in an error in state: 309.
##
## bin_op(comp_expr_level,ge,cat_expr_level) -> comp_expr_level ge . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Module Let LT LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level ge
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent BOOL_OR ZWSP
##
## Ends in an error in state: 320.
##
## bin_op(disj_expr_level,BOOL_OR,conj_expr_level) -> disj_expr_level BOOL_OR . conj_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or Module Let EOF Directive COMMA COLON BOOL_OR Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level BOOL_OR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr Let Ident EQ UIdent VBAR
##
## Ends in an error in state: 328.
##
## let_expr -> nseq(Attr) Let let_binding . SEMI expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 160, spurious reduction of production constant_constr_expr -> UIdent
## In state 248, spurious reduction of production constr_expr -> constant_constr_expr
## In state 247, spurious reduction of production call_expr_level -> constr_expr
## In state 250, spurious reduction of production unary_expr_level -> call_expr_level
## In state 222, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 238, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 244, spurious reduction of production add_expr_level -> mult_expr_level
## In state 292, spurious reduction of production cat_expr_level -> add_expr_level
## In state 311, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 318, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 322, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production expr -> disj_expr_level
## In state 627, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr Let Ident EQ UIdent SEMI ZWSP
##
## Ends in an error in state: 329.
##
## let_expr -> nseq(Attr) Let let_binding SEMI . expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Let let_binding SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr ES6FUN ZWSP
##
## Ends in an error in state: 331.
##
## fun_expr(expr) -> nseq(Attr) ES6FUN . single_fun_arg ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## fun_expr(expr) -> nseq(Attr) ES6FUN . unit option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## fun_expr(expr) -> nseq(Attr) ES6FUN . LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## fun_expr(expr) -> nseq(Attr) ES6FUN . LPAR type_generics nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr ES6FUN LPAR ZWSP
##
## Ends in an error in state: 332.
##
## fun_expr(expr) -> nseq(Attr) ES6FUN LPAR . nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## fun_expr(expr) -> nseq(Attr) ES6FUN LPAR . type_generics nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## unit -> LPAR . RPAR [ COLON ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr ES6FUN LPAR Type Ident COMMA ZWSP
##
## Ends in an error in state: 333.
##
## fun_expr(expr) -> nseq(Attr) ES6FUN LPAR type_generics . nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN LPAR type_generics
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr ES6FUN LPAR Type Ident COMMA Ident RPAR ZWSP
##
## Ends in an error in state: 335.
##
## fun_expr(expr) -> nseq(Attr) ES6FUN LPAR type_generics nsepseq(fun_arg,COMMA) RPAR . option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN LPAR type_generics nsepseq(fun_arg,COMMA) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr ES6FUN LPAR Type Ident COMMA Ident RPAR COLON Ident Type
##
## Ends in an error in state: 336.
##
## fun_expr(expr) -> nseq(Attr) ES6FUN LPAR type_generics nsepseq(fun_arg,COMMA) RPAR option(type_annotation) . ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN LPAR type_generics nsepseq(fun_arg,COMMA) RPAR option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production core_type -> Ident
## In state 64, spurious reduction of production fun_type_level -> core_type
## In state 81, spurious reduction of production type_expr -> fun_type_level
## In state 87, spurious reduction of production type_annotation -> COLON type_expr
## In state 156, spurious reduction of production option(type_annotation) -> type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr ES6FUN LPAR Type Ident COMMA Ident RPAR ARROW ZWSP
##
## Ends in an error in state: 337.
##
## fun_expr(expr) -> nseq(Attr) ES6FUN LPAR type_generics nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW . expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN LPAR type_generics nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR Ident COLON Ident Type
##
## Ends in an error in state: 339.
##
## nsepseq(fun_arg,COMMA) -> fun_arg . [ RPAR ]
## nsepseq(fun_arg,COMMA) -> fun_arg . COMMA nsepseq(fun_arg,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## fun_arg
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production core_type -> Ident
## In state 64, spurious reduction of production fun_type_level -> core_type
## In state 81, spurious reduction of production type_expr -> fun_type_level
## In state 87, spurious reduction of production type_annotation -> COLON type_expr
## In state 156, spurious reduction of production option(type_annotation) -> type_annotation
## In state 214, spurious reduction of production fun_arg -> sub_irrefutable option(type_annotation)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR Ident COMMA ZWSP
##
## Ends in an error in state: 340.
##
## nsepseq(fun_arg,COMMA) -> fun_arg COMMA . nsepseq(fun_arg,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## fun_arg COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr ES6FUN LPAR Ident RPAR ZWSP
##
## Ends in an error in state: 343.
##
## fun_expr(expr) -> nseq(Attr) ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR . option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr ES6FUN LPAR Ident RPAR COLON Ident Type
##
## Ends in an error in state: 344.
##
## fun_expr(expr) -> nseq(Attr) ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) . ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production core_type -> Ident
## In state 64, spurious reduction of production fun_type_level -> core_type
## In state 81, spurious reduction of production type_expr -> fun_type_level
## In state 87, spurious reduction of production type_annotation -> COLON type_expr
## In state 156, spurious reduction of production option(type_annotation) -> type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr ES6FUN LPAR Ident RPAR ARROW ZWSP
##
## Ends in an error in state: 345.
##
## fun_expr(expr) -> nseq(Attr) ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW . expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN Ident ZWSP
##
## Ends in an error in state: 347.
##
## single_fun_arg -> var_pattern . COLON type_expr [ ARROW ]
## single_fun_arg -> var_pattern . [ ARROW ]
##
## The known suffix of the stack is as follows:
## var_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN Ident COLON ZWSP
##
## Ends in an error in state: 348.
##
## single_fun_arg -> var_pattern COLON . type_expr [ ARROW ]
##
## The known suffix of the stack is as follows:
## var_pattern COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr ES6FUN LPAR RPAR ZWSP
##
## Ends in an error in state: 350.
##
## fun_expr(expr) -> nseq(Attr) ES6FUN unit . option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN unit
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr ES6FUN LPAR RPAR COLON Ident Type
##
## Ends in an error in state: 351.
##
## fun_expr(expr) -> nseq(Attr) ES6FUN unit option(type_annotation) . ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN unit option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production core_type -> Ident
## In state 64, spurious reduction of production fun_type_level -> core_type
## In state 81, spurious reduction of production type_expr -> fun_type_level
## In state 87, spurious reduction of production type_annotation -> COLON type_expr
## In state 156, spurious reduction of production option(type_annotation) -> type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr ES6FUN LPAR RPAR ARROW ZWSP
##
## Ends in an error in state: 352.
##
## fun_expr(expr) -> nseq(Attr) ES6FUN unit option(type_annotation) ARROW . expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN unit option(type_annotation) ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr ES6FUN Ident COLON Ident Type
##
## Ends in an error in state: 354.
##
## fun_expr(expr) -> nseq(Attr) ES6FUN single_fun_arg . ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN single_fun_arg
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production core_type -> Ident
## In state 64, spurious reduction of production fun_type_level -> core_type
## In state 81, spurious reduction of production type_expr -> fun_type_level
## In state 349, spurious reduction of production single_fun_arg -> var_pattern COLON type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr ES6FUN Ident ARROW ZWSP
##
## Ends in an error in state: 355.
##
## fun_expr(expr) -> nseq(Attr) ES6FUN single_fun_arg ARROW . expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN single_fun_arg ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR UIdent VBAR
##
## Ends in an error in state: 360.
##
## annot_expr -> expr . option(type_annotation) [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 160, spurious reduction of production constant_constr_expr -> UIdent
## In state 248, spurious reduction of production constr_expr -> constant_constr_expr
## In state 247, spurious reduction of production call_expr_level -> constr_expr
## In state 250, spurious reduction of production unary_expr_level -> call_expr_level
## In state 222, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 238, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 244, spurious reduction of production add_expr_level -> mult_expr_level
## In state 292, spurious reduction of production cat_expr_level -> add_expr_level
## In state 311, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 318, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 322, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production expr -> disj_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Bytes LPAR UIdent COLON Ident Type
##
## Ends in an error in state: 362.
##
## nsepseq(annot_expr,COMMA) -> annot_expr . [ RPAR ]
## nsepseq(annot_expr,COMMA) -> annot_expr . COMMA nsepseq(annot_expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## annot_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production core_type -> Ident
## In state 64, spurious reduction of production fun_type_level -> core_type
## In state 81, spurious reduction of production type_expr -> fun_type_level
## In state 87, spurious reduction of production type_annotation -> COLON type_expr
## In state 156, spurious reduction of production option(type_annotation) -> type_annotation
## In state 361, spurious reduction of production annot_expr -> expr option(type_annotation)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Bytes LPAR UIdent COMMA ZWSP
##
## Ends in an error in state: 363.
##
## nsepseq(annot_expr,COMMA) -> annot_expr COMMA . nsepseq(annot_expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## annot_expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent Lsl ZWSP
##
## Ends in an error in state: 367.
##
## bin_op(unary_expr_level,Lsl,shift_expr_level) -> unary_expr_level Lsl . shift_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## unary_expr_level Lsl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR Ident RPAR ZWSP
##
## Ends in an error in state: 371.
##
## fun_expr(expr) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR . option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR Ident RPAR COLON Ident Type
##
## Ends in an error in state: 372.
##
## fun_expr(expr) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) . ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production core_type -> Ident
## In state 64, spurious reduction of production fun_type_level -> core_type
## In state 81, spurious reduction of production type_expr -> fun_type_level
## In state 87, spurious reduction of production type_annotation -> COLON type_expr
## In state 156, spurious reduction of production option(type_annotation) -> type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR Ident RPAR ARROW ZWSP
##
## Ends in an error in state: 373.
##
## fun_expr(expr) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW . expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR RPAR ZWSP
##
## Ends in an error in state: 375.
##
## fun_expr(expr) -> ES6FUN unit . option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN unit
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR RPAR COLON Ident Type
##
## Ends in an error in state: 376.
##
## fun_expr(expr) -> ES6FUN unit option(type_annotation) . ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN unit option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production core_type -> Ident
## In state 64, spurious reduction of production fun_type_level -> core_type
## In state 81, spurious reduction of production type_expr -> fun_type_level
## In state 87, spurious reduction of production type_annotation -> COLON type_expr
## In state 156, spurious reduction of production option(type_annotation) -> type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR RPAR ARROW ZWSP
##
## Ends in an error in state: 377.
##
## fun_expr(expr) -> ES6FUN unit option(type_annotation) ARROW . expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN unit option(type_annotation) ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN Ident COLON Ident Type
##
## Ends in an error in state: 379.
##
## fun_expr(expr) -> ES6FUN single_fun_arg . ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN single_fun_arg
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production core_type -> Ident
## In state 64, spurious reduction of production fun_type_level -> core_type
## In state 81, spurious reduction of production type_expr -> fun_type_level
## In state 349, spurious reduction of production single_fun_arg -> var_pattern COLON type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN Ident ARROW ZWSP
##
## Ends in an error in state: 380.
##
## fun_expr(expr) -> ES6FUN single_fun_arg ARROW . expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN single_fun_arg ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Let Ident EQ UIdent VBAR
##
## Ends in an error in state: 383.
##
## let_expr -> Let let_binding . SEMI expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 160, spurious reduction of production constant_constr_expr -> UIdent
## In state 248, spurious reduction of production constr_expr -> constant_constr_expr
## In state 247, spurious reduction of production call_expr_level -> constr_expr
## In state 250, spurious reduction of production unary_expr_level -> call_expr_level
## In state 222, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 238, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 244, spurious reduction of production add_expr_level -> mult_expr_level
## In state 292, spurious reduction of production cat_expr_level -> add_expr_level
## In state 311, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 318, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 322, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production expr -> disj_expr_level
## In state 627, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Let Ident EQ UIdent SEMI ZWSP
##
## Ends in an error in state: 384.
##
## let_expr -> Let let_binding SEMI . expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## Let let_binding SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR UIdent VBAR
##
## Ends in an error in state: 386.
##
## par(expr) -> LPAR expr . RPAR [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 160, spurious reduction of production constant_constr_expr -> UIdent
## In state 248, spurious reduction of production constr_expr -> constant_constr_expr
## In state 247, spurious reduction of production call_expr_level -> constr_expr
## In state 250, spurious reduction of production unary_expr_level -> call_expr_level
## In state 222, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 238, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 244, spurious reduction of production add_expr_level -> mult_expr_level
## In state 292, spurious reduction of production cat_expr_level -> add_expr_level
## In state 311, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 318, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 322, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production expr -> disj_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LBRACE ZWSP
##
## Ends in an error in state: 388.
##
## braces(expr) -> LBRACE . expr RBRACE [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LBRACE UIdent VBAR
##
## Ends in an error in state: 389.
##
## braces(expr) -> LBRACE expr . RBRACE [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LBRACE expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 160, spurious reduction of production constant_constr_expr -> UIdent
## In state 248, spurious reduction of production constr_expr -> constant_constr_expr
## In state 247, spurious reduction of production call_expr_level -> constr_expr
## In state 250, spurious reduction of production unary_expr_level -> call_expr_level
## In state 222, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 238, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 244, spurious reduction of production add_expr_level -> mult_expr_level
## In state 292, spurious reduction of production cat_expr_level -> add_expr_level
## In state 311, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 318, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 322, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production expr -> disj_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LBRACE UIdent RBRACE ZWSP
##
## Ends in an error in state: 391.
##
## if_then -> If test_expr . branch [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## if_then_else -> If test_expr . branch Else branch [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## If test_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LBRACE UIdent RBRACE LBRACE ZWSP
##
## Ends in an error in state: 392.
##
## braces(__anonymous_2) -> LBRACE . expr option(SEMI) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let Else EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LBRACE UIdent RBRACE LBRACE UIdent VBAR
##
## Ends in an error in state: 393.
##
## braces(__anonymous_2) -> LBRACE expr . option(SEMI) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let Else EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 160, spurious reduction of production constant_constr_expr -> UIdent
## In state 248, spurious reduction of production constr_expr -> constant_constr_expr
## In state 247, spurious reduction of production call_expr_level -> constr_expr
## In state 250, spurious reduction of production unary_expr_level -> call_expr_level
## In state 222, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 238, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 244, spurious reduction of production add_expr_level -> mult_expr_level
## In state 292, spurious reduction of production cat_expr_level -> add_expr_level
## In state 311, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 318, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 322, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production expr -> disj_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LBRACE UIdent RBRACE LBRACE UIdent SEMI ZWSP
##
## Ends in an error in state: 395.
##
## braces(__anonymous_2) -> LBRACE expr option(SEMI) . RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let Else EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE expr option(SEMI)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LBRACE UIdent RBRACE LBRACE UIdent RBRACE ZWSP
##
## Ends in an error in state: 397.
##
## if_then -> If test_expr branch . [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## if_then_else -> If test_expr branch . Else branch [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## If test_expr branch
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LBRACE UIdent RBRACE LBRACE UIdent RBRACE Else ZWSP
##
## Ends in an error in state: 398.
##
## if_then_else -> If test_expr branch Else . branch [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## If test_expr branch Else
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN ZWSP
##
## Ends in an error in state: 403.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN . single_fun_arg ARROW last_expr_opt_semi [ RBRACE ]
## fun_expr(last_expr_opt_semi) -> ES6FUN . unit option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
## fun_expr(last_expr_opt_semi) -> ES6FUN . LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
## fun_expr(last_expr_opt_semi) -> ES6FUN . LPAR type_generics nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN LPAR ZWSP
##
## Ends in an error in state: 404.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN LPAR . nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
## fun_expr(last_expr_opt_semi) -> ES6FUN LPAR . type_generics nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
## unit -> LPAR . RPAR [ COLON ARROW ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN LPAR Type Ident COMMA ZWSP
##
## Ends in an error in state: 405.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN LPAR type_generics . nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR type_generics
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN LPAR Type Ident COMMA Ident RPAR ZWSP
##
## Ends in an error in state: 407.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN LPAR type_generics nsepseq(fun_arg,COMMA) RPAR . option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR type_generics nsepseq(fun_arg,COMMA) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN LPAR Type Ident COMMA Ident RPAR COLON Ident Type
##
## Ends in an error in state: 408.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN LPAR type_generics nsepseq(fun_arg,COMMA) RPAR option(type_annotation) . ARROW last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR type_generics nsepseq(fun_arg,COMMA) RPAR option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production core_type -> Ident
## In state 64, spurious reduction of production fun_type_level -> core_type
## In state 81, spurious reduction of production type_expr -> fun_type_level
## In state 87, spurious reduction of production type_annotation -> COLON type_expr
## In state 156, spurious reduction of production option(type_annotation) -> type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN LPAR Type Ident COMMA Ident RPAR ARROW ZWSP
##
## Ends in an error in state: 409.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN LPAR type_generics nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW . last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR type_generics nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Type Ident EQ Ident Type
##
## Ends in an error in state: 410.
##
## local_type_decl(last_expr_opt_semi) -> type_decl . SEMI last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## type_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production core_type -> Ident
## In state 64, spurious reduction of production fun_type_level -> core_type
## In state 81, spurious reduction of production type_expr -> fun_type_level
## In state 97, spurious reduction of production type_decl -> Type Ident option(type_params) EQ type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Type Ident EQ Ident SEMI ZWSP
##
## Ends in an error in state: 411.
##
## local_type_decl(last_expr_opt_semi) -> type_decl SEMI . last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## type_decl SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Switch Bytes LBRACE VBAR UIdent ARROW UIdent RBRACE ZWSP
##
## Ends in an error in state: 412.
##
## last_expr_inner -> switch_expr . option(SEMI) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## switch_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN Ident ARROW If LBRACE UIdent RBRACE LBRACE UIdent RBRACE VBAR
##
## Ends in an error in state: 414.
##
## last_expr_opt_semi -> seq_expr . option(SEMI) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## seq_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 397, spurious reduction of production if_then -> If test_expr branch
## In state 273, spurious reduction of production conditional -> if_then
## In state 438, spurious reduction of production seq_expr -> conditional
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr VBAR
##
## Ends in an error in state: 416.
##
## fun_expr(last_expr_opt_semi) -> nseq(Attr) . ES6FUN single_fun_arg ARROW last_expr_opt_semi [ RBRACE ]
## fun_expr(last_expr_opt_semi) -> nseq(Attr) . ES6FUN unit option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
## fun_expr(last_expr_opt_semi) -> nseq(Attr) . ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
## fun_expr(last_expr_opt_semi) -> nseq(Attr) . ES6FUN LPAR type_generics nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
## let_in_sequence -> nseq(Attr) . Let let_binding SEMI series [ RBRACE ]
## let_in_sequence -> nseq(Attr) . Let Rec let_binding SEMI series [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 35, spurious reduction of production seq(Attr) ->
## In state 38, spurious reduction of production nseq(Attr) -> Attr seq(Attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr Let ZWSP
##
## Ends in an error in state: 417.
##
## let_in_sequence -> nseq(Attr) Let . let_binding SEMI series [ RBRACE ]
## let_in_sequence -> nseq(Attr) Let . Rec let_binding SEMI series [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr Let Rec ZWSP
##
## Ends in an error in state: 418.
##
## let_in_sequence -> nseq(Attr) Let Rec . let_binding SEMI series [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Let Rec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr Let Rec Ident EQ UIdent VBAR
##
## Ends in an error in state: 419.
##
## let_in_sequence -> nseq(Attr) Let Rec let_binding . SEMI series [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 160, spurious reduction of production constant_constr_expr -> UIdent
## In state 248, spurious reduction of production constr_expr -> constant_constr_expr
## In state 247, spurious reduction of production call_expr_level -> constr_expr
## In state 250, spurious reduction of production unary_expr_level -> call_expr_level
## In state 222, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 238, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 244, spurious reduction of production add_expr_level -> mult_expr_level
## In state 292, spurious reduction of production cat_expr_level -> add_expr_level
## In state 311, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 318, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 322, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production expr -> disj_expr_level
## In state 627, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr Let Rec Ident EQ UIdent SEMI ZWSP
##
## Ends in an error in state: 420.
##
## let_in_sequence -> nseq(Attr) Let Rec let_binding SEMI . series [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Let Rec let_binding SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE If LBRACE UIdent RBRACE LBRACE UIdent RBRACE VBAR
##
## Ends in an error in state: 422.
##
## last_expr -> seq_expr . [ RBRACE ]
## series -> seq_expr . SEMI option(series) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## seq_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 397, spurious reduction of production if_then -> If test_expr branch
## In state 273, spurious reduction of production conditional -> if_then
## In state 438, spurious reduction of production seq_expr -> conditional
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE UIdent SEMI ZWSP
##
## Ends in an error in state: 423.
##
## series -> seq_expr SEMI . option(series) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## seq_expr SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Module UIdent EQ LBRACE Directive RBRACE ZWSP
##
## Ends in an error in state: 426.
##
## local_module_decl(last_expr_opt_semi) -> module_decl . SEMI last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## module_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Module UIdent EQ LBRACE Directive RBRACE SEMI ZWSP
##
## Ends in an error in state: 427.
##
## local_module_decl(last_expr_opt_semi) -> module_decl SEMI . last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## module_decl SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Module UIdent EQ UIdent Type
##
## Ends in an error in state: 428.
##
## local_module_alias(last_expr_opt_semi) -> module_alias . SEMI last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## module_alias
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 101, spurious reduction of production nsepseq(module_name,DOT) -> UIdent
## In state 650, spurious reduction of production module_alias -> Module UIdent EQ nsepseq(module_name,DOT)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Module UIdent EQ UIdent SEMI ZWSP
##
## Ends in an error in state: 429.
##
## local_module_alias(last_expr_opt_semi) -> module_alias SEMI . last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## module_alias SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE UIdent VBAR
##
## Ends in an error in state: 437.
##
## bin_op(disj_expr_level,BOOL_OR,conj_expr_level) -> disj_expr_level . BOOL_OR conj_expr_level [ SEMI RBRACE Or BOOL_OR ]
## bin_op(disj_expr_level,Or,conj_expr_level) -> disj_expr_level . Or conj_expr_level [ SEMI RBRACE Or BOOL_OR ]
## seq_expr -> disj_expr_level . [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## disj_expr_level
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 160, spurious reduction of production constant_constr_expr -> UIdent
## In state 248, spurious reduction of production constr_expr -> constant_constr_expr
## In state 247, spurious reduction of production call_expr_level -> constr_expr
## In state 250, spurious reduction of production unary_expr_level -> call_expr_level
## In state 222, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 238, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 244, spurious reduction of production add_expr_level -> mult_expr_level
## In state 292, spurious reduction of production cat_expr_level -> add_expr_level
## In state 311, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 318, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 322, spurious reduction of production disj_expr_level -> conj_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr Let Ident EQ UIdent VBAR
##
## Ends in an error in state: 442.
##
## let_in_sequence -> nseq(Attr) Let let_binding . SEMI series [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 160, spurious reduction of production constant_constr_expr -> UIdent
## In state 248, spurious reduction of production constr_expr -> constant_constr_expr
## In state 247, spurious reduction of production call_expr_level -> constr_expr
## In state 250, spurious reduction of production unary_expr_level -> call_expr_level
## In state 222, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 238, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 244, spurious reduction of production add_expr_level -> mult_expr_level
## In state 292, spurious reduction of production cat_expr_level -> add_expr_level
## In state 311, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 318, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 322, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production expr -> disj_expr_level
## In state 627, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr Let Ident EQ UIdent SEMI ZWSP
##
## Ends in an error in state: 443.
##
## let_in_sequence -> nseq(Attr) Let let_binding SEMI . series [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Let let_binding SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr ES6FUN ZWSP
##
## Ends in an error in state: 445.
##
## fun_expr(last_expr_opt_semi) -> nseq(Attr) ES6FUN . single_fun_arg ARROW last_expr_opt_semi [ RBRACE ]
## fun_expr(last_expr_opt_semi) -> nseq(Attr) ES6FUN . unit option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
## fun_expr(last_expr_opt_semi) -> nseq(Attr) ES6FUN . LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
## fun_expr(last_expr_opt_semi) -> nseq(Attr) ES6FUN . LPAR type_generics nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr ES6FUN LPAR ZWSP
##
## Ends in an error in state: 446.
##
## fun_expr(last_expr_opt_semi) -> nseq(Attr) ES6FUN LPAR . nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
## fun_expr(last_expr_opt_semi) -> nseq(Attr) ES6FUN LPAR . type_generics nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
## unit -> LPAR . RPAR [ COLON ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr ES6FUN LPAR Type Ident COMMA ZWSP
##
## Ends in an error in state: 447.
##
## fun_expr(last_expr_opt_semi) -> nseq(Attr) ES6FUN LPAR type_generics . nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN LPAR type_generics
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr ES6FUN LPAR Type Ident COMMA Ident RPAR ZWSP
##
## Ends in an error in state: 449.
##
## fun_expr(last_expr_opt_semi) -> nseq(Attr) ES6FUN LPAR type_generics nsepseq(fun_arg,COMMA) RPAR . option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN LPAR type_generics nsepseq(fun_arg,COMMA) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr ES6FUN LPAR Type Ident COMMA Ident RPAR COLON Ident Type
##
## Ends in an error in state: 450.
##
## fun_expr(last_expr_opt_semi) -> nseq(Attr) ES6FUN LPAR type_generics nsepseq(fun_arg,COMMA) RPAR option(type_annotation) . ARROW last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN LPAR type_generics nsepseq(fun_arg,COMMA) RPAR option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production core_type -> Ident
## In state 64, spurious reduction of production fun_type_level -> core_type
## In state 81, spurious reduction of production type_expr -> fun_type_level
## In state 87, spurious reduction of production type_annotation -> COLON type_expr
## In state 156, spurious reduction of production option(type_annotation) -> type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr ES6FUN LPAR Type Ident COMMA Ident RPAR ARROW ZWSP
##
## Ends in an error in state: 451.
##
## fun_expr(last_expr_opt_semi) -> nseq(Attr) ES6FUN LPAR type_generics nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW . last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN LPAR type_generics nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr ES6FUN LPAR Ident RPAR ZWSP
##
## Ends in an error in state: 454.
##
## fun_expr(last_expr_opt_semi) -> nseq(Attr) ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR . option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr ES6FUN LPAR Ident RPAR COLON Ident Type
##
## Ends in an error in state: 455.
##
## fun_expr(last_expr_opt_semi) -> nseq(Attr) ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) . ARROW last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production core_type -> Ident
## In state 64, spurious reduction of production fun_type_level -> core_type
## In state 81, spurious reduction of production type_expr -> fun_type_level
## In state 87, spurious reduction of production type_annotation -> COLON type_expr
## In state 156, spurious reduction of production option(type_annotation) -> type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr ES6FUN LPAR Ident RPAR ARROW ZWSP
##
## Ends in an error in state: 456.
##
## fun_expr(last_expr_opt_semi) -> nseq(Attr) ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW . last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr ES6FUN LPAR RPAR ZWSP
##
## Ends in an error in state: 458.
##
## fun_expr(last_expr_opt_semi) -> nseq(Attr) ES6FUN unit . option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN unit
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr ES6FUN LPAR RPAR COLON Ident Type
##
## Ends in an error in state: 459.
##
## fun_expr(last_expr_opt_semi) -> nseq(Attr) ES6FUN unit option(type_annotation) . ARROW last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN unit option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production core_type -> Ident
## In state 64, spurious reduction of production fun_type_level -> core_type
## In state 81, spurious reduction of production type_expr -> fun_type_level
## In state 87, spurious reduction of production type_annotation -> COLON type_expr
## In state 156, spurious reduction of production option(type_annotation) -> type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr ES6FUN LPAR RPAR ARROW ZWSP
##
## Ends in an error in state: 460.
##
## fun_expr(last_expr_opt_semi) -> nseq(Attr) ES6FUN unit option(type_annotation) ARROW . last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN unit option(type_annotation) ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr ES6FUN Ident COLON Ident Type
##
## Ends in an error in state: 462.
##
## fun_expr(last_expr_opt_semi) -> nseq(Attr) ES6FUN single_fun_arg . ARROW last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN single_fun_arg
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production core_type -> Ident
## In state 64, spurious reduction of production fun_type_level -> core_type
## In state 81, spurious reduction of production type_expr -> fun_type_level
## In state 349, spurious reduction of production single_fun_arg -> var_pattern COLON type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr ES6FUN Ident ARROW ZWSP
##
## Ends in an error in state: 463.
##
## fun_expr(last_expr_opt_semi) -> nseq(Attr) ES6FUN single_fun_arg ARROW . last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN single_fun_arg ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN LPAR Ident RPAR ZWSP
##
## Ends in an error in state: 468.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR . option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN LPAR Ident RPAR COLON Ident Type
##
## Ends in an error in state: 469.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) . ARROW last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production core_type -> Ident
## In state 64, spurious reduction of production fun_type_level -> core_type
## In state 81, spurious reduction of production type_expr -> fun_type_level
## In state 87, spurious reduction of production type_annotation -> COLON type_expr
## In state 156, spurious reduction of production option(type_annotation) -> type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN LPAR Ident RPAR ARROW ZWSP
##
## Ends in an error in state: 470.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW . last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN LPAR RPAR ZWSP
##
## Ends in an error in state: 472.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN unit . option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN unit
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN LPAR RPAR COLON Ident Type
##
## Ends in an error in state: 473.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN unit option(type_annotation) . ARROW last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN unit option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production core_type -> Ident
## In state 64, spurious reduction of production fun_type_level -> core_type
## In state 81, spurious reduction of production type_expr -> fun_type_level
## In state 87, spurious reduction of production type_annotation -> COLON type_expr
## In state 156, spurious reduction of production option(type_annotation) -> type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN LPAR RPAR ARROW ZWSP
##
## Ends in an error in state: 474.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN unit option(type_annotation) ARROW . last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN unit option(type_annotation) ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN Ident COLON Ident Type
##
## Ends in an error in state: 476.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN single_fun_arg . ARROW last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN single_fun_arg
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production core_type -> Ident
## In state 64, spurious reduction of production fun_type_level -> core_type
## In state 81, spurious reduction of production type_expr -> fun_type_level
## In state 349, spurious reduction of production single_fun_arg -> var_pattern COLON type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN Ident ARROW ZWSP
##
## Ends in an error in state: 477.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN single_fun_arg ARROW . last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN single_fun_arg ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Let Ident EQ UIdent VBAR
##
## Ends in an error in state: 480.
##
## let_in_sequence -> Let let_binding . SEMI series [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 160, spurious reduction of production constant_constr_expr -> UIdent
## In state 248, spurious reduction of production constr_expr -> constant_constr_expr
## In state 247, spurious reduction of production call_expr_level -> constr_expr
## In state 250, spurious reduction of production unary_expr_level -> call_expr_level
## In state 222, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 238, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 244, spurious reduction of production add_expr_level -> mult_expr_level
## In state 292, spurious reduction of production cat_expr_level -> add_expr_level
## In state 311, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 318, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 322, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production expr -> disj_expr_level
## In state 627, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Let Ident EQ UIdent SEMI ZWSP
##
## Ends in an error in state: 481.
##
## let_in_sequence -> Let let_binding SEMI . series [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Let let_binding SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident ZWSP
##
## Ends in an error in state: 483.
##
## core_expr -> Ident . [ TIMES SLASH SEMI RBRACE PLUS2 PLUS Or NE Mod MINUS Lxor Lsr Lsl Lor Land LT LPAR LE GT EQ2 BOOL_OR BOOL_AND ]
## field_assignment -> Ident . COLON expr [ RBRACE COMMA ]
## projection -> Ident . selection [ TIMES SLASH SEMI RBRACE PLUS2 PLUS Or NE Mod MINUS Lxor Lsr Lsl Lor Land LT LPAR LE GT EQ2 BOOL_OR BOOL_AND ]
## record_expr -> LBRACE Ident . more_field_assignments RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA ZWSP
##
## Ends in an error in state: 484.
##
## more_field_assignments -> COMMA . sep_or_term_list(field_assignment_punning,COMMA) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA Ident ZWSP
##
## Ends in an error in state: 485.
##
## field_assignment -> Ident . COLON expr [ RBRACE COMMA ]
## field_assignment_punning -> Ident . [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COLON ZWSP
##
## Ends in an error in state: 486.
##
## field_assignment -> Ident COLON . expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA Ident COLON UIdent VBAR
##
## Ends in an error in state: 491.
##
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning . [ RBRACE ]
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning . COMMA nsepseq(field_assignment_punning,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_assignment_punning,COMMA)) -> field_assignment_punning . COMMA seq(__anonymous_0(field_assignment_punning,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment_punning
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 160, spurious reduction of production constant_constr_expr -> UIdent
## In state 248, spurious reduction of production constr_expr -> constant_constr_expr
## In state 247, spurious reduction of production call_expr_level -> constr_expr
## In state 250, spurious reduction of production unary_expr_level -> call_expr_level
## In state 222, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 238, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 244, spurious reduction of production add_expr_level -> mult_expr_level
## In state 292, spurious reduction of production cat_expr_level -> add_expr_level
## In state 311, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 318, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 322, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production expr -> disj_expr_level
## In state 487, spurious reduction of production field_assignment -> Ident COLON expr
## In state 498, spurious reduction of production field_assignment_punning -> field_assignment
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA Ident COMMA ZWSP
##
## Ends in an error in state: 492.
##
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning COMMA . nsepseq(field_assignment_punning,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_assignment_punning,COMMA)) -> field_assignment_punning COMMA . seq(__anonymous_0(field_assignment_punning,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment_punning COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA Ident COMMA Ident COLON UIdent VBAR
##
## Ends in an error in state: 495.
##
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning . [ RBRACE ]
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning . COMMA nsepseq(field_assignment_punning,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_assignment_punning,COMMA)) -> field_assignment_punning . COMMA seq(__anonymous_0(field_assignment_punning,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment_punning
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 160, spurious reduction of production constant_constr_expr -> UIdent
## In state 248, spurious reduction of production constr_expr -> constant_constr_expr
## In state 247, spurious reduction of production call_expr_level -> constr_expr
## In state 250, spurious reduction of production unary_expr_level -> call_expr_level
## In state 222, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 238, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 244, spurious reduction of production add_expr_level -> mult_expr_level
## In state 292, spurious reduction of production cat_expr_level -> add_expr_level
## In state 311, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 318, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 322, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production expr -> disj_expr_level
## In state 487, spurious reduction of production field_assignment -> Ident COLON expr
## In state 498, spurious reduction of production field_assignment_punning -> field_assignment
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA Ident COMMA Ident COMMA ZWSP
##
## Ends in an error in state: 496.
##
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning COMMA . nsepseq(field_assignment_punning,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_assignment_punning,COMMA)) -> field_assignment_punning COMMA . seq(__anonymous_0(field_assignment_punning,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment_punning COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS ZWSP
##
## Ends in an error in state: 501.
##
## update_record -> LBRACE ELLIPSIS . path COMMA sep_or_term_list(field_path_assignment,COMMA) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE ELLIPSIS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident ZWSP
##
## Ends in an error in state: 502.
##
## path -> Ident . [ COMMA COLON ]
## projection -> Ident . selection [ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COLON
##
## Ends in an error in state: 504.
##
## update_record -> LBRACE ELLIPSIS path . COMMA sep_or_term_list(field_path_assignment,COMMA) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE ELLIPSIS path
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 502, spurious reduction of production path -> Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA ZWSP
##
## Ends in an error in state: 505.
##
## update_record -> LBRACE ELLIPSIS path COMMA . sep_or_term_list(field_path_assignment,COMMA) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE ELLIPSIS path COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COMMA
##
## Ends in an error in state: 508.
##
## field_path_assignment -> path . COLON expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## path
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 502, spurious reduction of production path -> Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COLON ZWSP
##
## Ends in an error in state: 509.
##
## field_path_assignment -> path COLON . expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## path COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COLON UIdent VBAR
##
## Ends in an error in state: 513.
##
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment . [ RBRACE ]
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment . COMMA nsepseq(field_path_assignment,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_path_assignment,COMMA)) -> field_path_assignment . COMMA seq(__anonymous_0(field_path_assignment,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 160, spurious reduction of production constant_constr_expr -> UIdent
## In state 248, spurious reduction of production constr_expr -> constant_constr_expr
## In state 247, spurious reduction of production call_expr_level -> constr_expr
## In state 250, spurious reduction of production unary_expr_level -> call_expr_level
## In state 222, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 238, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 244, spurious reduction of production add_expr_level -> mult_expr_level
## In state 292, spurious reduction of production cat_expr_level -> add_expr_level
## In state 311, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 318, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 322, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production expr -> disj_expr_level
## In state 510, spurious reduction of production field_path_assignment -> path COLON expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COLON UIdent COMMA ZWSP
##
## Ends in an error in state: 514.
##
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment COMMA . nsepseq(field_path_assignment,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_path_assignment,COMMA)) -> field_path_assignment COMMA . seq(__anonymous_0(field_path_assignment,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COLON UIdent COMMA Ident COLON UIdent VBAR
##
## Ends in an error in state: 517.
##
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment . [ RBRACE ]
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment . COMMA nsepseq(field_path_assignment,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_path_assignment,COMMA)) -> field_path_assignment . COMMA seq(__anonymous_0(field_path_assignment,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 160, spurious reduction of production constant_constr_expr -> UIdent
## In state 248, spurious reduction of production constr_expr -> constant_constr_expr
## In state 247, spurious reduction of production call_expr_level -> constr_expr
## In state 250, spurious reduction of production unary_expr_level -> call_expr_level
## In state 222, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 238, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 244, spurious reduction of production add_expr_level -> mult_expr_level
## In state 292, spurious reduction of production cat_expr_level -> add_expr_level
## In state 311, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 318, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 322, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production expr -> disj_expr_level
## In state 510, spurious reduction of production field_path_assignment -> path COLON expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COLON UIdent COMMA Ident COLON UIdent COMMA ZWSP
##
## Ends in an error in state: 518.
##
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment COMMA . nsepseq(field_path_assignment,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_path_assignment,COMMA)) -> field_path_assignment COMMA . seq(__anonymous_0(field_path_assignment,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN Ident ARROW UIdent SEMI ZWSP
##
## Ends in an error in state: 520.
##
## sequence -> LBRACE series . RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE series
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COLON UIdent VBAR
##
## Ends in an error in state: 522.
##
## record_expr -> LBRACE field_assignment . option(more_field_assignments) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE field_assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 160, spurious reduction of production constant_constr_expr -> UIdent
## In state 248, spurious reduction of production constr_expr -> constant_constr_expr
## In state 247, spurious reduction of production call_expr_level -> constr_expr
## In state 250, spurious reduction of production unary_expr_level -> call_expr_level
## In state 222, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 238, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 244, spurious reduction of production add_expr_level -> mult_expr_level
## In state 292, spurious reduction of production cat_expr_level -> add_expr_level
## In state 311, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 318, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 322, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production expr -> disj_expr_level
## In state 487, spurious reduction of production field_assignment -> Ident COLON expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET UIdent VBAR
##
## Ends in an error in state: 532.
##
## nsepseq(expr,COMMA) -> expr . [ RBRACKET ]
## nsepseq(expr,COMMA) -> expr . COMMA nsepseq(expr,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(expr,COMMA)) -> expr . COMMA seq(__anonymous_0(expr,COMMA)) [ RBRACKET ]
## spread -> LBRACKET expr . COMMA ELLIPSIS expr RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 160, spurious reduction of production constant_constr_expr -> UIdent
## In state 248, spurious reduction of production constr_expr -> constant_constr_expr
## In state 247, spurious reduction of production call_expr_level -> constr_expr
## In state 250, spurious reduction of production unary_expr_level -> call_expr_level
## In state 222, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 238, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 244, spurious reduction of production add_expr_level -> mult_expr_level
## In state 292, spurious reduction of production cat_expr_level -> add_expr_level
## In state 311, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 318, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 322, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production expr -> disj_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET UIdent COMMA ZWSP
##
## Ends in an error in state: 533.
##
## nsepseq(expr,COMMA) -> expr COMMA . nsepseq(expr,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(expr,COMMA)) -> expr COMMA . seq(__anonymous_0(expr,COMMA)) [ RBRACKET ]
## spread -> LBRACKET expr COMMA . ELLIPSIS expr RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET UIdent COMMA ELLIPSIS ZWSP
##
## Ends in an error in state: 534.
##
## spread -> LBRACKET expr COMMA ELLIPSIS . expr RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET expr COMMA ELLIPSIS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET UIdent COMMA ELLIPSIS UIdent VBAR
##
## Ends in an error in state: 535.
##
## spread -> LBRACKET expr COMMA ELLIPSIS expr . RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET expr COMMA ELLIPSIS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 160, spurious reduction of production constant_constr_expr -> UIdent
## In state 248, spurious reduction of production constr_expr -> constant_constr_expr
## In state 247, spurious reduction of production call_expr_level -> constr_expr
## In state 250, spurious reduction of production unary_expr_level -> call_expr_level
## In state 222, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 238, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 244, spurious reduction of production add_expr_level -> mult_expr_level
## In state 292, spurious reduction of production cat_expr_level -> add_expr_level
## In state 311, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 318, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 322, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production expr -> disj_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET UIdent COMMA UIdent VBAR
##
## Ends in an error in state: 539.
##
## nsepseq(expr,COMMA) -> expr . [ RBRACKET ]
## nsepseq(expr,COMMA) -> expr . COMMA nsepseq(expr,COMMA) [ RBRACKET ]
## seq(__anonymous_0(expr,COMMA)) -> expr . COMMA seq(__anonymous_0(expr,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 160, spurious reduction of production constant_constr_expr -> UIdent
## In state 248, spurious reduction of production constr_expr -> constant_constr_expr
## In state 247, spurious reduction of production call_expr_level -> constr_expr
## In state 250, spurious reduction of production unary_expr_level -> call_expr_level
## In state 222, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 238, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 244, spurious reduction of production add_expr_level -> mult_expr_level
## In state 292, spurious reduction of production cat_expr_level -> add_expr_level
## In state 311, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 318, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 322, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production expr -> disj_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET UIdent COMMA UIdent COMMA ZWSP
##
## Ends in an error in state: 540.
##
## nsepseq(expr,COMMA) -> expr COMMA . nsepseq(expr,COMMA) [ RBRACKET ]
## seq(__anonymous_0(expr,COMMA)) -> expr COMMA . seq(__anonymous_0(expr,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR UIdent COLON Ident Type
##
## Ends in an error in state: 545.
##
## par(annot_expr) -> LPAR annot_expr . RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## tuple(annot_expr) -> annot_expr . COMMA nsepseq(annot_expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR annot_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production core_type -> Ident
## In state 64, spurious reduction of production fun_type_level -> core_type
## In state 81, spurious reduction of production type_expr -> fun_type_level
## In state 87, spurious reduction of production type_annotation -> COLON type_expr
## In state 156, spurious reduction of production option(type_annotation) -> type_annotation
## In state 361, spurious reduction of production annot_expr -> expr option(type_annotation)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR UIdent COMMA ZWSP
##
## Ends in an error in state: 547.
##
## tuple(annot_expr) -> annot_expr COMMA . nsepseq(annot_expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## annot_expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes ZWSP
##
## Ends in an error in state: 549.
##
## switch_expr -> Switch core_expr . LBRACE cases RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## Switch core_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE ZWSP
##
## Ends in an error in state: 550.
##
## switch_expr -> Switch core_expr LBRACE . cases RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## Switch core_expr LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR ZWSP
##
## Ends in an error in state: 551.
##
## case_clause -> VBAR . pattern ARROW expr option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR UIdent ZWSP
##
## Ends in an error in state: 554.
##
## constr_pattern -> UIdent . [ RPAR RBRACKET RBRACE COMMA COLON ARROW ]
## constr_pattern -> UIdent . core_pattern [ RPAR RBRACKET RBRACE COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## UIdent
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR LPAR ZWSP
##
## Ends in an error in state: 557.
##
## par(pattern) -> LPAR . pattern RPAR [ RPAR RBRACKET RBRACE COMMA COLON ARROW ]
## unit -> LPAR . RPAR [ RPAR RBRACKET RBRACE COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR LBRACKET ZWSP
##
## Ends in an error in state: 558.
##
## list_of(core_pattern) -> LBRACKET . option(sep_or_term_list(core_pattern,COMMA)) RBRACKET [ RPAR RBRACKET RBRACE COMMA COLON ARROW ]
## list_pattern -> LBRACKET . core_pattern COMMA ELLIPSIS pattern RBRACKET [ RPAR RBRACKET RBRACE COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR LBRACE ZWSP
##
## Ends in an error in state: 559.
##
## record_pattern(core_pattern) -> LBRACE . sep_or_term_list(field_pattern(core_pattern),COMMA) RBRACE [ RPAR RBRACKET RBRACE COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR LBRACE Ident ZWSP
##
## Ends in an error in state: 560.
##
## field_pattern(core_pattern) -> Ident . [ RBRACE COMMA ]
## field_pattern(core_pattern) -> Ident . COLON core_pattern [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR LBRACE Ident COLON ZWSP
##
## Ends in an error in state: 561.
##
## field_pattern(core_pattern) -> Ident COLON . core_pattern [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR LBRACE Ident COLON UIdent RPAR
##
## Ends in an error in state: 576.
##
## nsepseq(field_pattern(core_pattern),COMMA) -> field_pattern(core_pattern) . [ RBRACE ]
## nsepseq(field_pattern(core_pattern),COMMA) -> field_pattern(core_pattern) . COMMA nsepseq(field_pattern(core_pattern),COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_pattern(core_pattern),COMMA)) -> field_pattern(core_pattern) . COMMA seq(__anonymous_0(field_pattern(core_pattern),COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern(core_pattern)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 554, spurious reduction of production constr_pattern -> UIdent
## In state 571, spurious reduction of production core_pattern -> constr_pattern
## In state 570, spurious reduction of production field_pattern(core_pattern) -> Ident COLON core_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR LBRACE Ident COMMA ZWSP
##
## Ends in an error in state: 577.
##
## nsepseq(field_pattern(core_pattern),COMMA) -> field_pattern(core_pattern) COMMA . nsepseq(field_pattern(core_pattern),COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_pattern(core_pattern),COMMA)) -> field_pattern(core_pattern) COMMA . seq(__anonymous_0(field_pattern(core_pattern),COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern(core_pattern) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR LBRACE Ident COMMA Ident COLON UIdent RPAR
##
## Ends in an error in state: 580.
##
## nsepseq(field_pattern(core_pattern),COMMA) -> field_pattern(core_pattern) . [ RBRACE ]
## nsepseq(field_pattern(core_pattern),COMMA) -> field_pattern(core_pattern) . COMMA nsepseq(field_pattern(core_pattern),COMMA) [ RBRACE ]
## seq(__anonymous_0(field_pattern(core_pattern),COMMA)) -> field_pattern(core_pattern) . COMMA seq(__anonymous_0(field_pattern(core_pattern),COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern(core_pattern)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 554, spurious reduction of production constr_pattern -> UIdent
## In state 571, spurious reduction of production core_pattern -> constr_pattern
## In state 570, spurious reduction of production field_pattern(core_pattern) -> Ident COLON core_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR LBRACE Ident COMMA Ident COMMA ZWSP
##
## Ends in an error in state: 581.
##
## nsepseq(field_pattern(core_pattern),COMMA) -> field_pattern(core_pattern) COMMA . nsepseq(field_pattern(core_pattern),COMMA) [ RBRACE ]
## seq(__anonymous_0(field_pattern(core_pattern),COMMA)) -> field_pattern(core_pattern) COMMA . seq(__anonymous_0(field_pattern(core_pattern),COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern(core_pattern) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR LBRACKET UIdent RPAR
##
## Ends in an error in state: 588.
##
## list_pattern -> LBRACKET core_pattern . COMMA ELLIPSIS pattern RBRACKET [ RPAR RBRACKET RBRACE COMMA COLON ARROW ]
## nsepseq(core_pattern,COMMA) -> core_pattern . [ RBRACKET ]
## nsepseq(core_pattern,COMMA) -> core_pattern . COMMA nsepseq(core_pattern,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(core_pattern,COMMA)) -> core_pattern . COMMA seq(__anonymous_0(core_pattern,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## LBRACKET core_pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 554, spurious reduction of production constr_pattern -> UIdent
## In state 571, spurious reduction of production core_pattern -> constr_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR LBRACKET UIdent COMMA ZWSP
##
## Ends in an error in state: 589.
##
## list_pattern -> LBRACKET core_pattern COMMA . ELLIPSIS pattern RBRACKET [ RPAR RBRACKET RBRACE COMMA COLON ARROW ]
## nsepseq(core_pattern,COMMA) -> core_pattern COMMA . nsepseq(core_pattern,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(core_pattern,COMMA)) -> core_pattern COMMA . seq(__anonymous_0(core_pattern,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## LBRACKET core_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR LBRACKET UIdent COMMA ELLIPSIS ZWSP
##
## Ends in an error in state: 590.
##
## list_pattern -> LBRACKET core_pattern COMMA ELLIPSIS . pattern RBRACKET [ RPAR RBRACKET RBRACE COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET core_pattern COMMA ELLIPSIS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR LBRACKET UIdent COMMA ELLIPSIS UIdent RPAR
##
## Ends in an error in state: 594.
##
## list_pattern -> LBRACKET core_pattern COMMA ELLIPSIS pattern . RBRACKET [ RPAR RBRACKET RBRACE COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET core_pattern COMMA ELLIPSIS pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 554, spurious reduction of production constr_pattern -> UIdent
## In state 571, spurious reduction of production core_pattern -> constr_pattern
## In state 596, spurious reduction of production pattern -> core_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR UIdent RBRACE
##
## Ends in an error in state: 596.
##
## pattern -> core_pattern . [ RPAR RBRACKET ARROW ]
## tuple(core_pattern) -> core_pattern . COMMA nsepseq(core_pattern,COMMA) [ RPAR RBRACKET ARROW ]
## typed_pattern(core_pattern) -> core_pattern . COLON type_expr [ RPAR RBRACKET ARROW ]
##
## The known suffix of the stack is as follows:
## core_pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 554, spurious reduction of production constr_pattern -> UIdent
## In state 571, spurious reduction of production core_pattern -> constr_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR UIdent COMMA ZWSP
##
## Ends in an error in state: 597.
##
## tuple(core_pattern) -> core_pattern COMMA . nsepseq(core_pattern,COMMA) [ RPAR RBRACKET ARROW ]
##
## The known suffix of the stack is as follows:
## core_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR UIdent COMMA UIdent RBRACE
##
## Ends in an error in state: 599.
##
## nsepseq(core_pattern,COMMA) -> core_pattern . [ RPAR RBRACKET ARROW ]
## nsepseq(core_pattern,COMMA) -> core_pattern . COMMA nsepseq(core_pattern,COMMA) [ RPAR RBRACKET ARROW ]
##
## The known suffix of the stack is as follows:
## core_pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 554, spurious reduction of production constr_pattern -> UIdent
## In state 571, spurious reduction of production core_pattern -> constr_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR UIdent COMMA UIdent COMMA ZWSP
##
## Ends in an error in state: 600.
##
## nsepseq(core_pattern,COMMA) -> core_pattern COMMA . nsepseq(core_pattern,COMMA) [ RPAR RBRACKET ARROW ]
##
## The known suffix of the stack is as follows:
## core_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR UIdent COLON ZWSP
##
## Ends in an error in state: 602.
##
## typed_pattern(core_pattern) -> core_pattern COLON . type_expr [ RPAR RBRACKET ARROW ]
##
## The known suffix of the stack is as follows:
## core_pattern COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR LBRACKET UIdent COMMA UIdent RPAR
##
## Ends in an error in state: 605.
##
## nsepseq(core_pattern,COMMA) -> core_pattern . [ RBRACKET ]
## nsepseq(core_pattern,COMMA) -> core_pattern . COMMA nsepseq(core_pattern,COMMA) [ RBRACKET ]
## seq(__anonymous_0(core_pattern,COMMA)) -> core_pattern . COMMA seq(__anonymous_0(core_pattern,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## core_pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 554, spurious reduction of production constr_pattern -> UIdent
## In state 571, spurious reduction of production core_pattern -> constr_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR LBRACKET UIdent COMMA UIdent COMMA ZWSP
##
## Ends in an error in state: 606.
##
## nsepseq(core_pattern,COMMA) -> core_pattern COMMA . nsepseq(core_pattern,COMMA) [ RBRACKET ]
## seq(__anonymous_0(core_pattern,COMMA)) -> core_pattern COMMA . seq(__anonymous_0(core_pattern,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## core_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR LPAR UIdent ARROW
##
## Ends in an error in state: 608.
##
## par(pattern) -> LPAR pattern . RPAR [ RPAR RBRACKET RBRACE COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 554, spurious reduction of production constr_pattern -> UIdent
## In state 571, spurious reduction of production core_pattern -> constr_pattern
## In state 596, spurious reduction of production pattern -> core_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR UIdent RPAR
##
## Ends in an error in state: 611.
##
## case_clause -> VBAR pattern . ARROW expr option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 554, spurious reduction of production constr_pattern -> UIdent
## In state 571, spurious reduction of production core_pattern -> constr_pattern
## In state 596, spurious reduction of production pattern -> core_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR UIdent ARROW ZWSP
##
## Ends in an error in state: 612.
##
## case_clause -> VBAR pattern ARROW . expr option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR pattern ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR UIdent ARROW UIdent Type
##
## Ends in an error in state: 613.
##
## case_clause -> VBAR pattern ARROW expr . option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR pattern ARROW expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 160, spurious reduction of production constant_constr_expr -> UIdent
## In state 248, spurious reduction of production constr_expr -> constant_constr_expr
## In state 247, spurious reduction of production call_expr_level -> constr_expr
## In state 250, spurious reduction of production unary_expr_level -> call_expr_level
## In state 222, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 238, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 244, spurious reduction of production add_expr_level -> mult_expr_level
## In state 292, spurious reduction of production cat_expr_level -> add_expr_level
## In state 311, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 318, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 322, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production expr -> disj_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR UIdent ARROW UIdent SEMI ZWSP
##
## Ends in an error in state: 618.
##
## nseq(case_clause) -> case_clause . seq(case_clause) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## case_clause
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Bytes LBRACE VBAR UIdent ARROW UIdent VBAR UIdent ARROW UIdent SEMI ZWSP
##
## Ends in an error in state: 620.
##
## seq(case_clause) -> case_clause . seq(case_clause) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## case_clause
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Lang UIdent VBAR
##
## Ends in an error in state: 622.
##
## code_inj -> Lang expr . RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## Lang expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 160, spurious reduction of production constant_constr_expr -> UIdent
## In state 248, spurious reduction of production constr_expr -> constant_constr_expr
## In state 247, spurious reduction of production call_expr_level -> constr_expr
## In state 250, spurious reduction of production unary_expr_level -> call_expr_level
## In state 222, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 238, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 244, spurious reduction of production add_expr_level -> mult_expr_level
## In state 292, spurious reduction of production cat_expr_level -> add_expr_level
## In state 311, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 318, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 322, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production expr -> disj_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Ident RPAR
##
## Ends in an error in state: 630.
##
## declaration -> type_decl . option(SEMI) [ Type RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## type_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 32, spurious reduction of production core_type -> Ident
## In state 64, spurious reduction of production fun_type_level -> core_type
## In state 81, spurious reduction of production type_expr -> fun_type_level
## In state 97, spurious reduction of production type_decl -> Type Ident option(type_params) EQ type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr VBAR
##
## Ends in an error in state: 633.
##
## let_declaration -> nseq(Attr) . Let let_binding [ Type SEMI RBRACE Module Let EOF Directive Attr ]
## let_declaration -> nseq(Attr) . Let Rec let_binding [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 35, spurious reduction of production seq(Attr) ->
## In state 38, spurious reduction of production nseq(Attr) -> Attr seq(Attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr Let ZWSP
##
## Ends in an error in state: 634.
##
## let_declaration -> nseq(Attr) Let . let_binding [ Type SEMI RBRACE Module Let EOF Directive Attr ]
## let_declaration -> nseq(Attr) Let . Rec let_binding [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr Let Rec ZWSP
##
## Ends in an error in state: 635.
##
## let_declaration -> nseq(Attr) Let Rec . let_binding [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Let Rec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module UIdent EQ LBRACE Directive RBRACE ZWSP
##
## Ends in an error in state: 638.
##
## declaration -> module_decl . option(SEMI) [ Type RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## module_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module UIdent EQ LBRACE Directive EOF
##
## Ends in an error in state: 642.
##
## module_decl -> Module UIdent EQ LBRACE module_ . RBRACE [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Module UIdent EQ LBRACE module_
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 646, spurious reduction of production seq(declaration) ->
## In state 647, spurious reduction of production nseq(declaration) -> declaration seq(declaration)
## In state 632, spurious reduction of production module_ -> nseq(declaration)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Ident EQ UIdent VBAR
##
## Ends in an error in state: 644.
##
## declaration -> let_declaration . option(SEMI) [ Type RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## let_declaration
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 160, spurious reduction of production constant_constr_expr -> UIdent
## In state 248, spurious reduction of production constr_expr -> constant_constr_expr
## In state 247, spurious reduction of production call_expr_level -> constr_expr
## In state 250, spurious reduction of production unary_expr_level -> call_expr_level
## In state 222, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 238, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 244, spurious reduction of production add_expr_level -> mult_expr_level
## In state 292, spurious reduction of production cat_expr_level -> add_expr_level
## In state 311, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 318, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 322, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production expr -> disj_expr_level
## In state 627, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr
## In state 628, spurious reduction of production let_declaration -> Let let_binding
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Directive ZWSP
##
## Ends in an error in state: 646.
##
## nseq(declaration) -> declaration . seq(declaration) [ RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## declaration
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Directive Directive ZWSP
##
## Ends in an error in state: 648.
##
## seq(declaration) -> declaration . seq(declaration) [ RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## declaration
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Directive RBRACE
##
## Ends in an error in state: 651.
##
## contract -> nseq(declaration) . EOF [ # ]
##
## The known suffix of the stack is as follows:
## nseq(declaration)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 646, spurious reduction of production seq(declaration) ->
## In state 647, spurious reduction of production nseq(declaration) -> declaration seq(declaration)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ZWSP
##
## Ends in an error in state: 654.
##
## interactive_expr' -> . interactive_expr [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent VBAR
##
## Ends in an error in state: 656.
##
## interactive_expr -> expr . EOF [ # ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 160, spurious reduction of production constant_constr_expr -> UIdent
## In state 248, spurious reduction of production constr_expr -> constant_constr_expr
## In state 247, spurious reduction of production call_expr_level -> constr_expr
## In state 250, spurious reduction of production unary_expr_level -> call_expr_level
## In state 222, spurious reduction of production shift_expr_level -> unary_expr_level
## In state 238, spurious reduction of production mult_expr_level -> shift_expr_level
## In state 244, spurious reduction of production add_expr_level -> mult_expr_level
## In state 292, spurious reduction of production cat_expr_level -> add_expr_level
## In state 311, spurious reduction of production comp_expr_level -> cat_expr_level
## In state 318, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 322, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 276, spurious reduction of production expr -> disj_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

