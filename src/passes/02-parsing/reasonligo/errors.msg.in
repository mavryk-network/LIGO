interactive_expr: Attr ES6FUN Ident ARROW WILD
##
## Ends in an error in state: 366.
##
## fun_expr(expr) -> nseq(Attr) ES6FUN single_fun_arg ARROW . expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN single_fun_arg ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr ES6FUN Ident COLON Int WILD
##
## Ends in an error in state: 365.
##
## fun_expr(expr) -> nseq(Attr) ES6FUN single_fun_arg . ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN single_fun_arg
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr ES6FUN LPAR RPAR ARROW WILD
##
## Ends in an error in state: 363.
##
## fun_expr(expr) -> nseq(Attr) ES6FUN unit option(type_annotation) ARROW . expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN unit option(type_annotation) ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr ES6FUN LPAR RPAR COLON Int WILD
##
## Ends in an error in state: 362.
##
## fun_expr(expr) -> nseq(Attr) ES6FUN unit option(type_annotation) . ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN unit option(type_annotation)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr ES6FUN LPAR RPAR WILD
##
## Ends in an error in state: 361.
##
## fun_expr(expr) -> nseq(Attr) ES6FUN unit . option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN unit
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr ES6FUN LPAR Verbatim
##
## Ends in an error in state: 349.
##
## fun_expr(expr) -> nseq(Attr) ES6FUN LPAR . nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## unit -> LPAR . RPAR [ COLON ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr ES6FUN LPAR WILD RPAR ARROW WILD
##
## Ends in an error in state: 353.
##
## fun_expr(expr) -> nseq(Attr) ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW . expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr ES6FUN LPAR WILD RPAR COLON Int WILD
##
## Ends in an error in state: 352.
##
## fun_expr(expr) -> nseq(Attr) ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) . ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr ES6FUN LPAR WILD RPAR WILD
##
## Ends in an error in state: 351.
##
## fun_expr(expr) -> nseq(Attr) ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR . option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr ES6FUN WILD
##
## Ends in an error in state: 348.
##
## fun_expr(expr) -> nseq(Attr) ES6FUN . single_fun_arg ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## fun_expr(expr) -> nseq(Attr) ES6FUN . unit option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## fun_expr(expr) -> nseq(Attr) ES6FUN . LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr Let Rec Verbatim
##
## Ends in an error in state: 260.
##
## let_expr -> nseq(Attr) Let Rec . let_binding SEMI expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Let Rec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr Let Rec WILD EQ Bytes SEMI WILD
##
## Ends in an error in state: 262.
##
## let_expr -> nseq(Attr) Let Rec let_binding SEMI . expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Let Rec let_binding SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr Let Rec WILD EQ Bytes VBAR
##
## Ends in an error in state: 261.
##
## let_expr -> nseq(Attr) Let Rec let_binding . SEMI expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 252, spurious reduction of production call_expr_level -> core_expr 
## In state 269, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 241, spurious reduction of production shift_expr_level -> unary_expr_level 
## In state 257, spurious reduction of production mult_expr_level -> shift_expr_level 
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 311, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 328, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 335, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 339, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 295, spurious reduction of production expr -> disj_expr_level 
## In state 571, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr Let Verbatim
##
## Ends in an error in state: 259.
##
## let_expr -> nseq(Attr) Let . let_binding SEMI expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## let_expr -> nseq(Attr) Let . Rec let_binding SEMI expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr Let WILD EQ Bytes SEMI WILD
##
## Ends in an error in state: 346.
##
## let_expr -> nseq(Attr) Let let_binding SEMI . expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Let let_binding SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr Let WILD EQ Bytes VBAR
##
## Ends in an error in state: 345.
##
## let_expr -> nseq(Attr) Let let_binding . SEMI expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 252, spurious reduction of production call_expr_level -> core_expr 
## In state 269, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 241, spurious reduction of production shift_expr_level -> unary_expr_level 
## In state 257, spurious reduction of production mult_expr_level -> shift_expr_level 
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 311, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 328, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 335, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 339, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 295, spurious reduction of production expr -> disj_expr_level 
## In state 571, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr VBAR
##
## Ends in an error in state: 258.
##
## fun_expr(expr) -> nseq(Attr) . ES6FUN single_fun_arg ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## fun_expr(expr) -> nseq(Attr) . ES6FUN unit option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## fun_expr(expr) -> nseq(Attr) . ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## let_expr -> nseq(Attr) . Let let_binding SEMI expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## let_expr -> nseq(Attr) . Let Rec let_binding SEMI expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 35, spurious reduction of production seq(Attr) -> 
## In state 38, spurious reduction of production nseq(Attr) -> Attr seq(Attr) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN Ident ARROW WILD
##
## Ends in an error in state: 386.
##
## fun_expr(expr) -> ES6FUN single_fun_arg ARROW . expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN single_fun_arg ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN Ident COLON Int WILD
##
## Ends in an error in state: 385.
##
## fun_expr(expr) -> ES6FUN single_fun_arg . ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN single_fun_arg
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN Ident COLON Verbatim
##
## Ends in an error in state: 359.
##
## single_fun_arg -> var_pattern COLON . type_expr [ ARROW ]
##
## The known suffix of the stack is as follows:
## var_pattern COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN Ident WILD
##
## Ends in an error in state: 358.
##
## single_fun_arg -> var_pattern . COLON type_expr [ ARROW ]
## single_fun_arg -> var_pattern . [ ARROW ]
##
## The known suffix of the stack is as follows:
## var_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR RPAR ARROW WILD
##
## Ends in an error in state: 383.
##
## fun_expr(expr) -> ES6FUN unit option(type_annotation) ARROW . expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN unit option(type_annotation) ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR RPAR COLON Int WILD
##
## Ends in an error in state: 382.
##
## fun_expr(expr) -> ES6FUN unit option(type_annotation) . ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN unit option(type_annotation)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR RPAR WILD
##
## Ends in an error in state: 381.
##
## fun_expr(expr) -> ES6FUN unit . option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN unit
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR Verbatim
##
## Ends in an error in state: 231.
##
## fun_expr(expr) -> ES6FUN LPAR . nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## unit -> LPAR . RPAR [ COLON ARROW ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR WILD COLON Int WILD
##
## Ends in an error in state: 355.
##
## nsepseq(fun_arg,COMMA) -> fun_arg . [ RPAR ]
## nsepseq(fun_arg,COMMA) -> fun_arg . COMMA nsepseq(fun_arg,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## fun_arg
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR WILD COMMA Verbatim
##
## Ends in an error in state: 356.
##
## nsepseq(fun_arg,COMMA) -> fun_arg COMMA . nsepseq(fun_arg,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## fun_arg COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR WILD RPAR ARROW WILD
##
## Ends in an error in state: 237.
##
## fun_expr(expr) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW . expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR WILD RPAR COLON Int WILD
##
## Ends in an error in state: 236.
##
## fun_expr(expr) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) . ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR WILD RPAR WILD
##
## Ends in an error in state: 235.
##
## fun_expr(expr) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR . option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR WILD WILD
##
## Ends in an error in state: 232.
##
## fun_arg -> sub_irrefutable . option(type_annotation) [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## sub_irrefutable
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN WILD
##
## Ends in an error in state: 230.
##
## fun_expr(expr) -> ES6FUN . single_fun_arg ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## fun_expr(expr) -> ES6FUN . unit option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## fun_expr(expr) -> ES6FUN . LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident DOT Ident WILD
##
## Ends in an error in state: 201.
##
## selection -> DOT Ident . selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## selection -> DOT Ident . [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## DOT Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident DOT WILD
##
## Ends in an error in state: 200.
##
## selection -> DOT . Ident selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## selection -> DOT . Ident [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident LBRACKET Int RBRACKET WILD
##
## Ends in an error in state: 199.
##
## selection -> LBRACKET Int RBRACKET . selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## selection -> LBRACKET Int RBRACKET . [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET Int RBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident LBRACKET Int WILD
##
## Ends in an error in state: 198.
##
## selection -> LBRACKET Int . RBRACKET selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## selection -> LBRACKET Int . RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET Int
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident LBRACKET WILD
##
## Ends in an error in state: 197.
##
## selection -> LBRACKET . Int RBRACKET selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## selection -> LBRACKET . Int RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident WILD
##
## Ends in an error in state: 229.
##
## core_expr -> Ident . [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## projection -> Ident . selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LBRACE Verbatim VBAR
##
## Ends in an error in state: 395.
##
## braces(expr) -> LBRACE expr . RBRACE [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LBRACE expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 252, spurious reduction of production call_expr_level -> core_expr 
## In state 269, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 241, spurious reduction of production shift_expr_level -> unary_expr_level 
## In state 257, spurious reduction of production mult_expr_level -> shift_expr_level 
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 311, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 328, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 335, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 339, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 295, spurious reduction of production expr -> disj_expr_level 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LBRACE WILD
##
## Ends in an error in state: 394.
##
## braces(expr) -> LBRACE . expr RBRACE [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Verbatim RPAR LBRACE Verbatim RBRACE Else WILD
##
## Ends in an error in state: 404.
##
## if_then_else -> If test_expr branch Else . branch [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## If test_expr branch Else
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Verbatim RPAR LBRACE Verbatim RBRACE WILD
##
## Ends in an error in state: 403.
##
## if_then -> If test_expr branch . [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## if_then_else -> If test_expr branch . Else branch [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## If test_expr branch
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Verbatim RPAR LBRACE Verbatim SEMI QUOTE
##
## Ends in an error in state: 401.
##
## braces(__anonymous_2) -> LBRACE expr option(SEMI) . RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let Else EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE expr option(SEMI)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Verbatim RPAR LBRACE Verbatim VBAR
##
## Ends in an error in state: 399.
##
## braces(__anonymous_2) -> LBRACE expr . option(SEMI) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let Else EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 252, spurious reduction of production call_expr_level -> core_expr 
## In state 269, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 241, spurious reduction of production shift_expr_level -> unary_expr_level 
## In state 257, spurious reduction of production mult_expr_level -> shift_expr_level 
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 311, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 328, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 335, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 339, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 295, spurious reduction of production expr -> disj_expr_level 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Verbatim RPAR LBRACE WILD
##
## Ends in an error in state: 398.
##
## braces(__anonymous_2) -> LBRACE . expr option(SEMI) RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let Else EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Verbatim RPAR WILD
##
## Ends in an error in state: 397.
##
## if_then -> If test_expr . branch [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## if_then_else -> If test_expr . branch Else branch [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## If test_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR Verbatim VBAR
##
## Ends in an error in state: 392.
##
## par(expr) -> LPAR expr . RPAR [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 252, spurious reduction of production call_expr_level -> core_expr 
## In state 269, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 241, spurious reduction of production shift_expr_level -> unary_expr_level 
## In state 257, spurious reduction of production mult_expr_level -> shift_expr_level 
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 311, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 328, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 335, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 339, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 295, spurious reduction of production expr -> disj_expr_level 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If LPAR WILD
##
## Ends in an error in state: 224.
##
## par(expr) -> LPAR . expr RPAR [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: If WILD
##
## Ends in an error in state: 223.
##
## if_then -> If . test_expr branch [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## if_then_else -> If . test_expr branch Else branch [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## If
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr ES6FUN Ident ARROW WILD
##
## Ends in an error in state: 462.
##
## fun_expr(last_expr_opt_semi) -> nseq(Attr) ES6FUN single_fun_arg ARROW . last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN single_fun_arg ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr ES6FUN Ident COLON Int WILD
##
## Ends in an error in state: 461.
##
## fun_expr(last_expr_opt_semi) -> nseq(Attr) ES6FUN single_fun_arg . ARROW last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN single_fun_arg
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr ES6FUN LPAR RPAR ARROW WILD
##
## Ends in an error in state: 459.
##
## fun_expr(last_expr_opt_semi) -> nseq(Attr) ES6FUN unit option(type_annotation) ARROW . last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN unit option(type_annotation) ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr ES6FUN LPAR RPAR COLON Int WILD
##
## Ends in an error in state: 458.
##
## fun_expr(last_expr_opt_semi) -> nseq(Attr) ES6FUN unit option(type_annotation) . ARROW last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN unit option(type_annotation)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr ES6FUN LPAR RPAR WILD
##
## Ends in an error in state: 457.
##
## fun_expr(last_expr_opt_semi) -> nseq(Attr) ES6FUN unit . option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN unit
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr ES6FUN LPAR Verbatim
##
## Ends in an error in state: 451.
##
## fun_expr(last_expr_opt_semi) -> nseq(Attr) ES6FUN LPAR . nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
## unit -> LPAR . RPAR [ COLON ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr ES6FUN LPAR WILD RPAR ARROW WILD
##
## Ends in an error in state: 455.
##
## fun_expr(last_expr_opt_semi) -> nseq(Attr) ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW . last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr ES6FUN LPAR WILD RPAR COLON Int WILD
##
## Ends in an error in state: 454.
##
## fun_expr(last_expr_opt_semi) -> nseq(Attr) ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) . ARROW last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr ES6FUN LPAR WILD RPAR WILD
##
## Ends in an error in state: 453.
##
## fun_expr(last_expr_opt_semi) -> nseq(Attr) ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR . option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr ES6FUN WILD
##
## Ends in an error in state: 450.
##
## fun_expr(last_expr_opt_semi) -> nseq(Attr) ES6FUN . single_fun_arg ARROW last_expr_opt_semi [ RBRACE ]
## fun_expr(last_expr_opt_semi) -> nseq(Attr) ES6FUN . unit option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
## fun_expr(last_expr_opt_semi) -> nseq(Attr) ES6FUN . LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) ES6FUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr Let Rec Verbatim
##
## Ends in an error in state: 423.
##
## let_in_sequence -> nseq(Attr) Let Rec . let_binding SEMI series [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Let Rec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr Let Rec WILD EQ Bytes SEMI WILD
##
## Ends in an error in state: 425.
##
## let_in_sequence -> nseq(Attr) Let Rec let_binding SEMI . series [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Let Rec let_binding SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr Let Rec WILD EQ Bytes VBAR
##
## Ends in an error in state: 424.
##
## let_in_sequence -> nseq(Attr) Let Rec let_binding . SEMI series [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 252, spurious reduction of production call_expr_level -> core_expr 
## In state 269, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 241, spurious reduction of production shift_expr_level -> unary_expr_level 
## In state 257, spurious reduction of production mult_expr_level -> shift_expr_level 
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 311, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 328, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 335, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 339, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 295, spurious reduction of production expr -> disj_expr_level 
## In state 571, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr Let Verbatim
##
## Ends in an error in state: 422.
##
## let_in_sequence -> nseq(Attr) Let . let_binding SEMI series [ RBRACE ]
## let_in_sequence -> nseq(Attr) Let . Rec let_binding SEMI series [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr Let WILD EQ Bytes SEMI WILD
##
## Ends in an error in state: 448.
##
## let_in_sequence -> nseq(Attr) Let let_binding SEMI . series [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Let let_binding SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr Let WILD EQ Bytes VBAR
##
## Ends in an error in state: 447.
##
## let_in_sequence -> nseq(Attr) Let let_binding . SEMI series [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 252, spurious reduction of production call_expr_level -> core_expr 
## In state 269, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 241, spurious reduction of production shift_expr_level -> unary_expr_level 
## In state 257, spurious reduction of production mult_expr_level -> shift_expr_level 
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 311, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 328, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 335, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 339, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 295, spurious reduction of production expr -> disj_expr_level 
## In state 571, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr VBAR
##
## Ends in an error in state: 421.
##
## fun_expr(last_expr_opt_semi) -> nseq(Attr) . ES6FUN single_fun_arg ARROW last_expr_opt_semi [ RBRACE ]
## fun_expr(last_expr_opt_semi) -> nseq(Attr) . ES6FUN unit option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
## fun_expr(last_expr_opt_semi) -> nseq(Attr) . ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
## let_in_sequence -> nseq(Attr) . Let let_binding SEMI series [ RBRACE ]
## let_in_sequence -> nseq(Attr) . Let Rec let_binding SEMI series [ RBRACE ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 35, spurious reduction of production seq(Attr) -> 
## In state 38, spurious reduction of production nseq(Attr) -> Attr seq(Attr) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COLON
##
## Ends in an error in state: 498.
##
## update_record -> LBRACE ELLIPSIS path . COMMA sep_or_term_list(field_path_assignment,COMMA) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE ELLIPSIS path
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 496, spurious reduction of production path -> Ident 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COLON Bytes COMMA Ident COLON Bytes COMMA WILD
##
## Ends in an error in state: 512.
##
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment COMMA . nsepseq(field_path_assignment,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_path_assignment,COMMA)) -> field_path_assignment COMMA . seq(__anonymous_0(field_path_assignment,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COLON Bytes COMMA Ident COLON Bytes VBAR
##
## Ends in an error in state: 511.
##
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment . [ RBRACE ]
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment . COMMA nsepseq(field_path_assignment,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_path_assignment,COMMA)) -> field_path_assignment . COMMA seq(__anonymous_0(field_path_assignment,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 252, spurious reduction of production call_expr_level -> core_expr 
## In state 269, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 241, spurious reduction of production shift_expr_level -> unary_expr_level 
## In state 257, spurious reduction of production mult_expr_level -> shift_expr_level 
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 311, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 328, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 335, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 339, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 295, spurious reduction of production expr -> disj_expr_level 
## In state 504, spurious reduction of production field_path_assignment -> path COLON expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COLON Bytes COMMA WILD
##
## Ends in an error in state: 508.
##
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment COMMA . nsepseq(field_path_assignment,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_path_assignment,COMMA)) -> field_path_assignment COMMA . seq(__anonymous_0(field_path_assignment,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COLON Bytes VBAR
##
## Ends in an error in state: 507.
##
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment . [ RBRACE ]
## nsepseq(field_path_assignment,COMMA) -> field_path_assignment . COMMA nsepseq(field_path_assignment,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_path_assignment,COMMA)) -> field_path_assignment . COMMA seq(__anonymous_0(field_path_assignment,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_path_assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 252, spurious reduction of production call_expr_level -> core_expr 
## In state 269, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 241, spurious reduction of production shift_expr_level -> unary_expr_level 
## In state 257, spurious reduction of production mult_expr_level -> shift_expr_level 
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 311, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 328, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 335, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 339, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 295, spurious reduction of production expr -> disj_expr_level 
## In state 504, spurious reduction of production field_path_assignment -> path COLON expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COLON WILD
##
## Ends in an error in state: 503.
##
## field_path_assignment -> path COLON . expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## path COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA Ident COMMA
##
## Ends in an error in state: 502.
##
## field_path_assignment -> path . COLON expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## path
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 496, spurious reduction of production path -> Ident 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident COMMA WILD
##
## Ends in an error in state: 499.
##
## update_record -> LBRACE ELLIPSIS path COMMA . sep_or_term_list(field_path_assignment,COMMA) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE ELLIPSIS path COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS Ident WILD
##
## Ends in an error in state: 496.
##
## path -> Ident . [ COMMA COLON ]
## projection -> Ident . selection [ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS WILD
##
## Ends in an error in state: 495.
##
## update_record -> LBRACE ELLIPSIS . path COMMA sep_or_term_list(field_path_assignment,COMMA) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE ELLIPSIS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN Ident ARROW Bytes SEMI WILD
##
## Ends in an error in state: 514.
##
## sequence -> LBRACE series . RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE series
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN Ident ARROW If LBRACE Verbatim RBRACE LBRACE Verbatim RBRACE VBAR
##
## Ends in an error in state: 419.
##
## last_expr_opt_semi -> seq_expr . option(SEMI) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## seq_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 403, spurious reduction of production if_then -> If test_expr branch 
## In state 292, spurious reduction of production conditional -> if_then 
## In state 443, spurious reduction of production seq_expr -> conditional 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN Ident ARROW WILD
##
## Ends in an error in state: 471.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN single_fun_arg ARROW . last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN single_fun_arg ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN Ident COLON Int WILD
##
## Ends in an error in state: 470.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN single_fun_arg . ARROW last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN single_fun_arg
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN LPAR RPAR ARROW WILD
##
## Ends in an error in state: 468.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN unit option(type_annotation) ARROW . last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN unit option(type_annotation) ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN LPAR RPAR COLON Int WILD
##
## Ends in an error in state: 467.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN unit option(type_annotation) . ARROW last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN unit option(type_annotation)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN LPAR RPAR WILD
##
## Ends in an error in state: 466.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN unit . option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN unit
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN LPAR Verbatim
##
## Ends in an error in state: 410.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN LPAR . nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
## unit -> LPAR . RPAR [ COLON ARROW ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN LPAR WILD RPAR ARROW WILD
##
## Ends in an error in state: 414.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW . last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN LPAR WILD RPAR COLON Int WILD
##
## Ends in an error in state: 413.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) . ARROW last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN LPAR WILD RPAR WILD
##
## Ends in an error in state: 412.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR . option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR nsepseq(fun_arg,COMMA) RPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ES6FUN WILD
##
## Ends in an error in state: 409.
##
## fun_expr(last_expr_opt_semi) -> ES6FUN . single_fun_arg ARROW last_expr_opt_semi [ RBRACE ]
## fun_expr(last_expr_opt_semi) -> ES6FUN . unit option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
## fun_expr(last_expr_opt_semi) -> ES6FUN . LPAR nsepseq(fun_arg,COMMA) RPAR option(type_annotation) ARROW last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ES6FUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COLON Bytes VBAR
##
## Ends in an error in state: 516.
##
## record_expr -> LBRACE field_assignment . option(more_field_assignments) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE field_assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 252, spurious reduction of production call_expr_level -> core_expr 
## In state 269, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 241, spurious reduction of production shift_expr_level -> unary_expr_level 
## In state 257, spurious reduction of production mult_expr_level -> shift_expr_level 
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 311, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 328, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 335, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 339, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 295, spurious reduction of production expr -> disj_expr_level 
## In state 481, spurious reduction of production field_assignment -> Ident COLON expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COLON WILD
##
## Ends in an error in state: 480.
##
## field_assignment -> Ident COLON . expr [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA Ident COLON Bytes VBAR
##
## Ends in an error in state: 485.
##
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning . [ RBRACE ]
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning . COMMA nsepseq(field_assignment_punning,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_assignment_punning,COMMA)) -> field_assignment_punning . COMMA seq(__anonymous_0(field_assignment_punning,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment_punning
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 252, spurious reduction of production call_expr_level -> core_expr 
## In state 269, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 241, spurious reduction of production shift_expr_level -> unary_expr_level 
## In state 257, spurious reduction of production mult_expr_level -> shift_expr_level 
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 311, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 328, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 335, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 339, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 295, spurious reduction of production expr -> disj_expr_level 
## In state 481, spurious reduction of production field_assignment -> Ident COLON expr 
## In state 492, spurious reduction of production field_assignment_punning -> field_assignment 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA Ident COMMA Ident COLON Bytes VBAR
##
## Ends in an error in state: 489.
##
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning . [ RBRACE ]
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning . COMMA nsepseq(field_assignment_punning,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_assignment_punning,COMMA)) -> field_assignment_punning . COMMA seq(__anonymous_0(field_assignment_punning,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment_punning
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 252, spurious reduction of production call_expr_level -> core_expr 
## In state 269, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 241, spurious reduction of production shift_expr_level -> unary_expr_level 
## In state 257, spurious reduction of production mult_expr_level -> shift_expr_level 
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 311, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 328, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 335, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 339, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 295, spurious reduction of production expr -> disj_expr_level 
## In state 481, spurious reduction of production field_assignment -> Ident COLON expr 
## In state 492, spurious reduction of production field_assignment_punning -> field_assignment 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA Ident COMMA Ident COMMA WILD
##
## Ends in an error in state: 490.
##
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning COMMA . nsepseq(field_assignment_punning,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_assignment_punning,COMMA)) -> field_assignment_punning COMMA . seq(__anonymous_0(field_assignment_punning,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment_punning COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA Ident COMMA WILD
##
## Ends in an error in state: 486.
##
## nsepseq(field_assignment_punning,COMMA) -> field_assignment_punning COMMA . nsepseq(field_assignment_punning,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_assignment_punning,COMMA)) -> field_assignment_punning COMMA . seq(__anonymous_0(field_assignment_punning,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_assignment_punning COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA Ident WILD
##
## Ends in an error in state: 479.
##
## field_assignment -> Ident . COLON expr [ RBRACE COMMA ]
## field_assignment_punning -> Ident . [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA WILD
##
## Ends in an error in state: 478.
##
## more_field_assignments -> COMMA . sep_or_term_list(field_assignment_punning,COMMA) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident WILD
##
## Ends in an error in state: 477.
##
## core_expr -> Ident . [ TIMES SLASH SEMI RBRACE PLUS2 PLUS Or NE Mod MINUS Lxor Lsr Lsl Lor Land LT LPAR LE GT GE EQ2 BOOL_OR BOOL_AND ]
## field_assignment -> Ident . COLON expr [ RBRACE COMMA ]
## projection -> Ident . selection [ TIMES SLASH SEMI RBRACE PLUS2 PLUS Or NE Mod MINUS Lxor Lsr Lsl Lor Land LT LPAR LE GT GE EQ2 BOOL_OR BOOL_AND ]
## record_expr -> LBRACE Ident . more_field_assignments RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE If LBRACE Verbatim RBRACE LBRACE Verbatim RBRACE VBAR
##
## Ends in an error in state: 427.
##
## last_expr -> seq_expr . [ RBRACE ]
## series -> seq_expr . SEMI option(series) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## seq_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 403, spurious reduction of production if_then -> If test_expr branch 
## In state 292, spurious reduction of production conditional -> if_then 
## In state 443, spurious reduction of production seq_expr -> conditional 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Let Rec Verbatim
##
## Ends in an error in state: 219.
##
## let_in_sequence -> Let Rec . let_binding SEMI series [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Let Rec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Let Rec WILD EQ Bytes SEMI WILD
##
## Ends in an error in state: 221.
##
## let_in_sequence -> Let Rec let_binding SEMI . series [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Let Rec let_binding SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Let Rec WILD EQ Bytes VBAR
##
## Ends in an error in state: 220.
##
## let_in_sequence -> Let Rec let_binding . SEMI series [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 252, spurious reduction of production call_expr_level -> core_expr 
## In state 269, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 241, spurious reduction of production shift_expr_level -> unary_expr_level 
## In state 257, spurious reduction of production mult_expr_level -> shift_expr_level 
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 311, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 328, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 335, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 339, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 295, spurious reduction of production expr -> disj_expr_level 
## In state 571, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Let Verbatim
##
## Ends in an error in state: 218.
##
## let_in_sequence -> Let . let_binding SEMI series [ RBRACE ]
## let_in_sequence -> Let . Rec let_binding SEMI series [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Let WILD EQ Bytes SEMI WILD
##
## Ends in an error in state: 475.
##
## let_in_sequence -> Let let_binding SEMI . series [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Let let_binding SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Let WILD EQ Bytes VBAR
##
## Ends in an error in state: 474.
##
## let_in_sequence -> Let let_binding . SEMI series [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 252, spurious reduction of production call_expr_level -> core_expr 
## In state 269, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 241, spurious reduction of production shift_expr_level -> unary_expr_level 
## In state 257, spurious reduction of production mult_expr_level -> shift_expr_level 
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 311, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 328, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 335, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 339, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 295, spurious reduction of production expr -> disj_expr_level 
## In state 571, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Module UIdent EQ LBRACE Directive RBRACE SEMI WILD
##
## Ends in an error in state: 432.
##
## local_module_decl(last_expr_opt_semi) -> module_decl SEMI . last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## module_decl SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Module UIdent EQ LBRACE Directive RBRACE WILD
##
## Ends in an error in state: 431.
##
## local_module_decl(last_expr_opt_semi) -> module_decl . SEMI last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## module_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Module UIdent EQ UIdent SEMI WILD
##
## Ends in an error in state: 434.
##
## local_module_alias(last_expr_opt_semi) -> module_alias SEMI . last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## module_alias SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Module UIdent EQ UIdent Type
##
## Ends in an error in state: 433.
##
## local_module_alias(last_expr_opt_semi) -> module_alias . SEMI last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## module_alias
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 101, spurious reduction of production nsepseq(module_name,DOT) -> UIdent 
## In state 594, spurious reduction of production module_alias -> Module UIdent EQ nsepseq(module_name,DOT) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Switch Bytes LBRACE VBAR WILD ARROW Bytes RBRACE WILD
##
## Ends in an error in state: 417.
##
## last_expr_inner -> switch_expr . option(SEMI) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## switch_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Type Ident EQ Ident SEMI WILD
##
## Ends in an error in state: 416.
##
## local_type_decl(last_expr_opt_semi) -> type_decl SEMI . last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## type_decl SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Type Ident EQ Int WILD
##
## Ends in an error in state: 415.
##
## local_type_decl(last_expr_opt_semi) -> type_decl . SEMI last_expr_opt_semi [ RBRACE ]
##
## The known suffix of the stack is as follows:
## type_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Verbatim SEMI WILD
##
## Ends in an error in state: 428.
##
## series -> seq_expr SEMI . option(series) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## seq_expr SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Verbatim VBAR
##
## Ends in an error in state: 442.
##
## bin_op(disj_expr_level,BOOL_OR,conj_expr_level) -> disj_expr_level . BOOL_OR conj_expr_level [ SEMI RBRACE Or BOOL_OR ]
## bin_op(disj_expr_level,Or,conj_expr_level) -> disj_expr_level . Or conj_expr_level [ SEMI RBRACE Or BOOL_OR ]
## seq_expr -> disj_expr_level . [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## disj_expr_level
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 252, spurious reduction of production call_expr_level -> core_expr 
## In state 269, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 241, spurious reduction of production shift_expr_level -> unary_expr_level 
## In state 257, spurious reduction of production mult_expr_level -> shift_expr_level 
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 311, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 328, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 335, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 339, spurious reduction of production disj_expr_level -> conj_expr_level 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE WILD
##
## Ends in an error in state: 217.
##
## record_expr -> LBRACE . field_assignment option(more_field_assignments) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## record_expr -> LBRACE . Ident more_field_assignments RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## sequence -> LBRACE . series RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## update_record -> LBRACE . ELLIPSIS path COMMA sep_or_term_list(field_path_assignment,COMMA) RBRACE [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET Verbatim COMMA ELLIPSIS Verbatim VBAR
##
## Ends in an error in state: 529.
##
## spread -> LBRACKET expr COMMA ELLIPSIS expr . RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET expr COMMA ELLIPSIS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 252, spurious reduction of production call_expr_level -> core_expr 
## In state 269, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 241, spurious reduction of production shift_expr_level -> unary_expr_level 
## In state 257, spurious reduction of production mult_expr_level -> shift_expr_level 
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 311, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 328, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 335, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 339, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 295, spurious reduction of production expr -> disj_expr_level 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET Verbatim COMMA ELLIPSIS WILD
##
## Ends in an error in state: 528.
##
## spread -> LBRACKET expr COMMA ELLIPSIS . expr RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET expr COMMA ELLIPSIS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET Verbatim COMMA Verbatim COMMA WILD
##
## Ends in an error in state: 534.
##
## nsepseq(expr,COMMA) -> expr COMMA . nsepseq(expr,COMMA) [ RBRACKET ]
## seq(__anonymous_0(expr,COMMA)) -> expr COMMA . seq(__anonymous_0(expr,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET Verbatim COMMA Verbatim VBAR
##
## Ends in an error in state: 533.
##
## nsepseq(expr,COMMA) -> expr . [ RBRACKET ]
## nsepseq(expr,COMMA) -> expr . COMMA nsepseq(expr,COMMA) [ RBRACKET ]
## seq(__anonymous_0(expr,COMMA)) -> expr . COMMA seq(__anonymous_0(expr,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 252, spurious reduction of production call_expr_level -> core_expr 
## In state 269, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 241, spurious reduction of production shift_expr_level -> unary_expr_level 
## In state 257, spurious reduction of production mult_expr_level -> shift_expr_level 
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 311, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 328, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 335, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 339, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 295, spurious reduction of production expr -> disj_expr_level 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET Verbatim COMMA WILD
##
## Ends in an error in state: 527.
##
## nsepseq(expr,COMMA) -> expr COMMA . nsepseq(expr,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(expr,COMMA)) -> expr COMMA . seq(__anonymous_0(expr,COMMA)) [ RBRACKET ]
## spread -> LBRACKET expr COMMA . ELLIPSIS expr RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET Verbatim VBAR
##
## Ends in an error in state: 526.
##
## nsepseq(expr,COMMA) -> expr . [ RBRACKET ]
## nsepseq(expr,COMMA) -> expr . COMMA nsepseq(expr,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(expr,COMMA)) -> expr . COMMA seq(__anonymous_0(expr,COMMA)) [ RBRACKET ]
## spread -> LBRACKET expr . COMMA ELLIPSIS expr RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 252, spurious reduction of production call_expr_level -> core_expr 
## In state 269, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 241, spurious reduction of production shift_expr_level -> unary_expr_level 
## In state 257, spurious reduction of production mult_expr_level -> shift_expr_level 
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 311, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 328, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 335, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 339, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 295, spurious reduction of production expr -> disj_expr_level 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET WILD
##
## Ends in an error in state: 215.
##
## list_of(expr) -> LBRACKET . option(sep_or_term_list(expr,COMMA)) RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## spread -> LBRACKET . expr COMMA ELLIPSIS expr RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR Verbatim COLON Int WILD
##
## Ends in an error in state: 539.
##
## par(annot_expr) -> LPAR annot_expr . RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## tuple(annot_expr) -> annot_expr . COMMA nsepseq(annot_expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR annot_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR Verbatim COMMA WILD
##
## Ends in an error in state: 541.
##
## tuple(annot_expr) -> annot_expr COMMA . nsepseq(annot_expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## annot_expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR Verbatim VBAR
##
## Ends in an error in state: 371.
##
## annot_expr -> expr . option(type_annotation) [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 252, spurious reduction of production call_expr_level -> core_expr 
## In state 269, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 241, spurious reduction of production shift_expr_level -> unary_expr_level 
## In state 257, spurious reduction of production mult_expr_level -> shift_expr_level 
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 311, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 328, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 335, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 339, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 295, spurious reduction of production expr -> disj_expr_level 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR WILD
##
## Ends in an error in state: 213.
##
## par(annot_expr) -> LPAR . annot_expr RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## par(tuple(annot_expr)) -> LPAR . tuple(annot_expr) RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## unit -> LPAR . RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Lang Verbatim VBAR
##
## Ends in an error in state: 566.
##
## code_inj -> Lang expr . RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## Lang expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 252, spurious reduction of production call_expr_level -> core_expr 
## In state 269, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 241, spurious reduction of production shift_expr_level -> unary_expr_level 
## In state 257, spurious reduction of production mult_expr_level -> shift_expr_level 
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 311, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 328, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 335, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 339, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 295, spurious reduction of production expr -> disj_expr_level 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Lang WILD
##
## Ends in an error in state: 211.
##
## code_inj -> Lang . expr RBRACKET [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## Lang
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Let Rec Verbatim
##
## Ends in an error in state: 226.
##
## let_expr -> Let Rec . let_binding SEMI expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## Let Rec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Let Rec WILD EQ Bytes SEMI WILD
##
## Ends in an error in state: 228.
##
## let_expr -> Let Rec let_binding SEMI . expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## Let Rec let_binding SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Let Rec WILD EQ Bytes VBAR
##
## Ends in an error in state: 227.
##
## let_expr -> Let Rec let_binding . SEMI expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## Let Rec let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 252, spurious reduction of production call_expr_level -> core_expr 
## In state 269, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 241, spurious reduction of production shift_expr_level -> unary_expr_level 
## In state 257, spurious reduction of production mult_expr_level -> shift_expr_level 
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 311, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 328, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 335, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 339, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 295, spurious reduction of production expr -> disj_expr_level 
## In state 571, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Let Verbatim
##
## Ends in an error in state: 225.
##
## let_expr -> Let . let_binding SEMI expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
## let_expr -> Let . Rec let_binding SEMI expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Let WILD EQ Bytes SEMI WILD
##
## Ends in an error in state: 390.
##
## let_expr -> Let let_binding SEMI . expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## Let let_binding SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Let WILD EQ Bytes VBAR
##
## Ends in an error in state: 389.
##
## let_expr -> Let let_binding . SEMI expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## Let let_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 252, spurious reduction of production call_expr_level -> core_expr 
## In state 269, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 241, spurious reduction of production shift_expr_level -> unary_expr_level 
## In state 257, spurious reduction of production mult_expr_level -> shift_expr_level 
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 311, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 328, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 335, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 339, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 295, spurious reduction of production expr -> disj_expr_level 
## In state 571, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: MINUS WILD
##
## Ends in an error in state: 216.
##
## unary_expr_level -> MINUS . call_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Module UIdent EQ LBRACE Directive RBRACE SEMI WILD
##
## Ends in an error in state: 284.
##
## local_module_decl(expr) -> module_decl SEMI . expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## module_decl SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Module UIdent EQ LBRACE Directive RBRACE WILD
##
## Ends in an error in state: 283.
##
## local_module_decl(expr) -> module_decl . SEMI expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## module_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Module UIdent EQ UIdent SEMI WILD
##
## Ends in an error in state: 286.
##
## local_module_alias(expr) -> module_alias SEMI . expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## module_alias SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Module UIdent EQ UIdent Type
##
## Ends in an error in state: 285.
##
## local_module_alias(expr) -> module_alias . SEMI expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## module_alias
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 101, spurious reduction of production nsepseq(module_name,DOT) -> UIdent 
## In state 594, spurious reduction of production module_alias -> Module UIdent EQ nsepseq(module_name,DOT) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: NOT WILD
##
## Ends in an error in state: 214.
##
## unary_expr_level -> NOT . call_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## NOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch UIdent WILD
##
## Ends in an error in state: 194.
##
## module_access_e -> UIdent . DOT module_var_e [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## UIdent
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR LBRACKET VBAR
##
## Ends in an error in state: 546.
##
## list_of(sub_pattern) -> LBRACKET . option(sep_or_term_list(sub_pattern,COMMA)) RBRACKET [ COMMA ARROW ]
## pattern -> LBRACKET . sub_pattern COMMA ELLIPSIS sub_pattern RBRACKET [ ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR LBRACKET WILD COMMA ELLIPSIS VBAR
##
## Ends in an error in state: 549.
##
## pattern -> LBRACKET sub_pattern COMMA ELLIPSIS . sub_pattern RBRACKET [ ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET sub_pattern COMMA ELLIPSIS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR LBRACKET WILD COMMA ELLIPSIS WILD WILD
##
## Ends in an error in state: 550.
##
## pattern -> LBRACKET sub_pattern COMMA ELLIPSIS sub_pattern . RBRACKET [ ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET sub_pattern COMMA ELLIPSIS sub_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR LBRACKET WILD COMMA VBAR
##
## Ends in an error in state: 548.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern COMMA . nsepseq(sub_pattern,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(sub_pattern,COMMA)) -> sub_pattern COMMA . seq(__anonymous_0(sub_pattern,COMMA)) [ RBRACKET ]
## pattern -> LBRACKET sub_pattern COMMA . ELLIPSIS sub_pattern RBRACKET [ ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET sub_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR LBRACKET WILD WILD
##
## Ends in an error in state: 547.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern . [ RBRACKET ]
## nsepseq(sub_pattern,COMMA) -> sub_pattern . COMMA nsepseq(sub_pattern,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(sub_pattern,COMMA)) -> sub_pattern . COMMA seq(__anonymous_0(sub_pattern,COMMA)) [ RBRACKET ]
## pattern -> LBRACKET sub_pattern . COMMA ELLIPSIS sub_pattern RBRACKET [ ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET sub_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR LPAR Bytes RPAR WILD
##
## Ends in an error in state: 553.
##
## tuple(sub_pattern) -> sub_pattern . COMMA nsepseq(sub_pattern,COMMA) [ ARROW ]
##
## The known suffix of the stack is as follows:
## sub_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR VBAR
##
## Ends in an error in state: 545.
##
## case_clause -> VBAR . pattern ARROW expr option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD ARROW Bytes SEMI WILD
##
## Ends in an error in state: 562.
##
## nseq(case_clause) -> case_clause . seq(case_clause) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## case_clause
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD ARROW Bytes VBAR Bytes ARROW Bytes SEMI WILD
##
## Ends in an error in state: 564.
##
## seq(case_clause) -> case_clause . seq(case_clause) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## case_clause
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD ARROW Verbatim Type
##
## Ends in an error in state: 556.
##
## case_clause -> VBAR pattern ARROW expr . option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR pattern ARROW expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 252, spurious reduction of production call_expr_level -> core_expr 
## In state 269, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 241, spurious reduction of production shift_expr_level -> unary_expr_level 
## In state 257, spurious reduction of production mult_expr_level -> shift_expr_level 
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 311, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 328, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 335, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 339, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 295, spurious reduction of production expr -> disj_expr_level 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD ARROW WILD
##
## Ends in an error in state: 555.
##
## case_clause -> VBAR pattern ARROW . expr option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR pattern ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD COMMA Bytes RPAR
##
## Ends in an error in state: 554.
##
## case_clause -> VBAR pattern . ARROW expr option(SEMI) [ VBAR RBRACE ]
##
## The known suffix of the stack is as follows:
## VBAR pattern
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production nsepseq(sub_pattern,COMMA) -> sub_pattern 
## In state 163, spurious reduction of production tuple(sub_pattern) -> sub_pattern COMMA nsepseq(sub_pattern,COMMA) 
## In state 552, spurious reduction of production pattern -> tuple(sub_pattern) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD COMMA VBAR
##
## Ends in an error in state: 160.
##
## tuple(sub_pattern) -> sub_pattern COMMA . nsepseq(sub_pattern,COMMA) [ RPAR ARROW ]
##
## The known suffix of the stack is as follows:
## sub_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD COMMA WILD COMMA VBAR
##
## Ends in an error in state: 162.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern COMMA . nsepseq(sub_pattern,COMMA) [ RPAR ARROW ]
##
## The known suffix of the stack is as follows:
## sub_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD COMMA WILD WILD
##
## Ends in an error in state: 161.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern . [ RPAR ARROW ]
## nsepseq(sub_pattern,COMMA) -> sub_pattern . COMMA nsepseq(sub_pattern,COMMA) [ RPAR ARROW ]
##
## The known suffix of the stack is as follows:
## sub_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE VBAR WILD WILD
##
## Ends in an error in state: 558.
##
## pattern -> core_pattern . [ ARROW ]
## sub_pattern -> core_pattern . [ COMMA ]
##
## The known suffix of the stack is as follows:
## core_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim LBRACE WILD
##
## Ends in an error in state: 544.
##
## switch_expr -> Switch core_expr LBRACE . cases RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## Switch core_expr LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch Verbatim WILD
##
## Ends in an error in state: 543.
##
## switch_expr -> Switch core_expr . LBRACE cases RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## Switch core_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Switch WILD
##
## Ends in an error in state: 212.
##
## switch_expr -> Switch . core_expr LBRACE cases RBRACE [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## Switch
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Type Ident EQ Ident SEMI WILD
##
## Ends in an error in state: 255.
##
## local_type_decl(expr) -> type_decl SEMI . expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## type_decl SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Type Ident EQ Int WILD
##
## Ends in an error in state: 254.
##
## local_type_decl(expr) -> type_decl . SEMI expr [ VBAR Type SEMI RPAR RBRACKET RBRACE Module Let EOF Directive COMMA COLON Attr ]
##
## The known suffix of the stack is as follows:
## type_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent Bytes WILD
##
## Ends in an error in state: 241.
##
## bin_op(unary_expr_level,Lsl,shift_expr_level) -> unary_expr_level . Lsl shift_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## bin_op(unary_expr_level,Lsr,shift_expr_level) -> unary_expr_level . Lsr shift_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## shift_expr_level -> unary_expr_level . [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## unary_expr_level
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent DOT Ident WILD
##
## Ends in an error in state: 196.
##
## module_var_e -> Ident . [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## projection -> Ident . selection [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent DOT WILD
##
## Ends in an error in state: 193.
##
## module_access_e -> UIdent DOT . module_var_e [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE LBRACE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## UIdent DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent UIdent WILD
##
## Ends in an error in state: 192.
##
## constant_constr_expr -> UIdent . [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## module_access_e -> UIdent . DOT module_var_e [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## UIdent
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent WILD
##
## Ends in an error in state: 191.
##
## constant_constr_expr -> UIdent . [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## constr_expr -> UIdent . argument [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## module_access_e -> UIdent . DOT module_var_e [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LPAR LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## UIdent
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim BOOL_AND WILD
##
## Ends in an error in state: 298.
##
## bin_op(conj_expr_level,BOOL_AND,comp_expr_level) -> conj_expr_level BOOL_AND . comp_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or Module Let EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## conj_expr_level BOOL_AND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim BOOL_OR WILD
##
## Ends in an error in state: 337.
##
## bin_op(disj_expr_level,BOOL_OR,conj_expr_level) -> disj_expr_level BOOL_OR . conj_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or Module Let EOF Directive COMMA COLON BOOL_OR Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level BOOL_OR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim EQ2 WILD
##
## Ends in an error in state: 326.
##
## bin_op(comp_expr_level,EQ2,cat_expr_level) -> comp_expr_level EQ2 . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Module Let LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level EQ2
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim GE WILD
##
## Ends in an error in state: 324.
##
## bin_op(comp_expr_level,GE,cat_expr_level) -> comp_expr_level GE . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Module Let LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level GE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim GT WILD
##
## Ends in an error in state: 322.
##
## bin_op(comp_expr_level,GT,cat_expr_level) -> comp_expr_level GT . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Module Let LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim LE WILD
##
## Ends in an error in state: 320.
##
## bin_op(comp_expr_level,LE,cat_expr_level) -> comp_expr_level LE . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Module Let LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level LE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim LPAR Verbatim COLON Int WILD
##
## Ends in an error in state: 373.
##
## nsepseq(annot_expr,COMMA) -> annot_expr . [ RPAR ]
## nsepseq(annot_expr,COMMA) -> annot_expr . COMMA nsepseq(annot_expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## annot_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim LPAR Verbatim COMMA WILD
##
## Ends in an error in state: 374.
##
## nsepseq(annot_expr,COMMA) -> annot_expr COMMA . nsepseq(annot_expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## annot_expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim LPAR WILD
##
## Ends in an error in state: 253.
##
## par(nsepseq(annot_expr,COMMA)) -> LPAR . nsepseq(annot_expr,COMMA) RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## unit -> LPAR . RPAR [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim LT WILD
##
## Ends in an error in state: 318.
##
## bin_op(comp_expr_level,LT,cat_expr_level) -> comp_expr_level LT . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Module Let LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim Land WILD
##
## Ends in an error in state: 281.
##
## bin_op(mult_expr_level,Land,shift_expr_level) -> mult_expr_level Land . shift_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## mult_expr_level Land
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim Lor WILD
##
## Ends in an error in state: 279.
##
## bin_op(mult_expr_level,Lor,shift_expr_level) -> mult_expr_level Lor . shift_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## mult_expr_level Lor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim Lsl WILD
##
## Ends in an error in state: 378.
##
## bin_op(unary_expr_level,Lsl,shift_expr_level) -> unary_expr_level Lsl . shift_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## unary_expr_level Lsl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim Lsr WILD
##
## Ends in an error in state: 242.
##
## bin_op(unary_expr_level,Lsr,shift_expr_level) -> unary_expr_level Lsr . shift_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## unary_expr_level Lsr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim Lxor WILD
##
## Ends in an error in state: 277.
##
## bin_op(mult_expr_level,Lxor,shift_expr_level) -> mult_expr_level Lxor . shift_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## mult_expr_level Lxor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim MINUS WILD
##
## Ends in an error in state: 316.
##
## bin_op(add_expr_level,MINUS,mult_expr_level) -> add_expr_level MINUS . mult_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module MINUS Let LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## add_expr_level MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim Mod WILD
##
## Ends in an error in state: 275.
##
## bin_op(mult_expr_level,Mod,shift_expr_level) -> mult_expr_level Mod . shift_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## mult_expr_level Mod
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim NE WILD
##
## Ends in an error in state: 300.
##
## bin_op(comp_expr_level,NE,cat_expr_level) -> comp_expr_level NE . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Module Let LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## comp_expr_level NE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim Or WILD
##
## Ends in an error in state: 296.
##
## bin_op(disj_expr_level,Or,conj_expr_level) -> disj_expr_level Or . conj_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or Module Let EOF Directive COMMA COLON BOOL_OR Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level Or
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim PLUS WILD
##
## Ends in an error in state: 314.
##
## bin_op(add_expr_level,PLUS,mult_expr_level) -> add_expr_level PLUS . mult_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module MINUS Let LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## add_expr_level PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim PLUS2 WILD
##
## Ends in an error in state: 312.
##
## bin_op(add_expr_level,PLUS2,cat_expr_level) -> add_expr_level PLUS2 . cat_expr_level [ VBAR Type SEMI RPAR RBRACKET RBRACE Or NE Module Let LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## add_expr_level PLUS2
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim SLASH WILD
##
## Ends in an error in state: 273.
##
## bin_op(mult_expr_level,SLASH,shift_expr_level) -> mult_expr_level SLASH . shift_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## mult_expr_level SLASH
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim TIMES WILD
##
## Ends in an error in state: 264.
##
## bin_op(mult_expr_level,TIMES,shift_expr_level) -> mult_expr_level TIMES . shift_expr_level [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## mult_expr_level TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim VBAR
##
## Ends in an error in state: 600.
##
## interactive_expr -> expr . EOF [ # ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 252, spurious reduction of production call_expr_level -> core_expr 
## In state 269, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 241, spurious reduction of production shift_expr_level -> unary_expr_level 
## In state 257, spurious reduction of production mult_expr_level -> shift_expr_level 
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 311, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 328, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 335, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 339, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 295, spurious reduction of production expr -> disj_expr_level 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Verbatim WILD
##
## Ends in an error in state: 252.
##
## call_expr -> core_expr . par(nsepseq(annot_expr,COMMA)) [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## call_expr -> core_expr . unit [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
## call_expr_level -> core_expr . [ VBAR Type TIMES SLASH SEMI RPAR RBRACKET RBRACE PLUS2 PLUS Or NE Module Mod MINUS Lxor Lsr Lsl Lor Let Land LT LE GT GE EQ2 EOF Directive COMMA COLON BOOL_OR BOOL_AND Attr ]
##
## The known suffix of the stack is as follows:
## core_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: WILD
##
## Ends in an error in state: 598.
##
## interactive_expr' -> . interactive_expr [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr Attr WILD
##
## Ends in an error in state: 36.
##
## seq(Attr) -> Attr . seq(Attr) [ VBAR UIdent Let LBRACE Ident ES6FUN ]
##
## The known suffix of the stack is as follows:
## Attr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr Let Rec Verbatim
##
## Ends in an error in state: 579.
##
## let_declaration -> nseq(Attr) Let Rec . let_binding [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Let Rec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr Let Verbatim
##
## Ends in an error in state: 578.
##
## let_declaration -> nseq(Attr) Let . let_binding [ Type SEMI RBRACE Module Let EOF Directive Attr ]
## let_declaration -> nseq(Attr) Let . Rec let_binding [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr VBAR
##
## Ends in an error in state: 577.
##
## let_declaration -> nseq(Attr) . Let let_binding [ Type SEMI RBRACE Module Let EOF Directive Attr ]
## let_declaration -> nseq(Attr) . Let Rec let_binding [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 35, spurious reduction of production seq(Attr) -> 
## In state 38, spurious reduction of production nseq(Attr) -> Attr seq(Attr) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr WILD
##
## Ends in an error in state: 35.
##
## nseq(Attr) -> Attr . seq(Attr) [ VBAR UIdent Let LBRACE Ident ES6FUN ]
##
## The known suffix of the stack is as follows:
## Attr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Directive Directive WILD
##
## Ends in an error in state: 592.
##
## seq(declaration) -> declaration . seq(declaration) [ RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## declaration
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Directive RBRACE
##
## Ends in an error in state: 595.
##
## contract -> nseq(declaration) . EOF [ # ]
##
## The known suffix of the stack is as follows:
## nseq(declaration)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 590, spurious reduction of production seq(declaration) -> 
## In state 591, spurious reduction of production nseq(declaration) -> declaration seq(declaration) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Directive WILD
##
## Ends in an error in state: 590.
##
## nseq(declaration) -> declaration . seq(declaration) [ RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## declaration
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Attr VBAR
##
## Ends in an error in state: 129.
##
## var_pattern -> nseq(Attr) . Ident [ RPAR RBRACKET RBRACE EQ COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 35, spurious reduction of production seq(Attr) -> 
## In state 38, spurious reduction of production nseq(Attr) -> Attr seq(Attr) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident COLON Bytes WILD
##
## Ends in an error in state: 138.
##
## nsepseq(field_pattern,COMMA) -> field_pattern . [ RBRACE ]
## nsepseq(field_pattern,COMMA) -> field_pattern . COMMA nsepseq(field_pattern,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_pattern,COMMA)) -> field_pattern . COMMA seq(__anonymous_0(field_pattern,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident COLON VBAR
##
## Ends in an error in state: 119.
##
## field_pattern -> Ident COLON . sub_pattern [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident COMMA Ident COLON Bytes WILD
##
## Ends in an error in state: 142.
##
## nsepseq(field_pattern,COMMA) -> field_pattern . [ RBRACE ]
## nsepseq(field_pattern,COMMA) -> field_pattern . COMMA nsepseq(field_pattern,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_pattern,COMMA)) -> field_pattern . COMMA seq(__anonymous_0(field_pattern,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident COMMA Ident COMMA WILD
##
## Ends in an error in state: 143.
##
## nsepseq(field_pattern,COMMA) -> field_pattern COMMA . nsepseq(field_pattern,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_pattern,COMMA)) -> field_pattern COMMA . seq(__anonymous_0(field_pattern,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident COMMA WILD
##
## Ends in an error in state: 139.
##
## nsepseq(field_pattern,COMMA) -> field_pattern COMMA . nsepseq(field_pattern,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_pattern,COMMA)) -> field_pattern COMMA . seq(__anonymous_0(field_pattern,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE Ident WILD
##
## Ends in an error in state: 118.
##
## field_pattern -> Ident . [ RBRACE COMMA ]
## field_pattern -> Ident . COLON sub_pattern [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LBRACE WILD
##
## Ends in an error in state: 117.
##
## record_pattern -> LBRACE . sep_or_term_list(field_pattern,COMMA) RBRACE [ RPAR RBRACKET RBRACE EQ COMMA COLON ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR UIdent LBRACKET VBAR
##
## Ends in an error in state: 116.
##
## list_of(sub_pattern) -> LBRACKET . option(sep_or_term_list(sub_pattern,COMMA)) RBRACKET [ RPAR RBRACKET RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR UIdent LBRACKET WILD COMMA VBAR
##
## Ends in an error in state: 146.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern COMMA . nsepseq(sub_pattern,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(sub_pattern,COMMA)) -> sub_pattern COMMA . seq(__anonymous_0(sub_pattern,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## sub_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR UIdent LBRACKET WILD COMMA WILD COMMA VBAR
##
## Ends in an error in state: 148.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern COMMA . nsepseq(sub_pattern,COMMA) [ RBRACKET ]
## seq(__anonymous_0(sub_pattern,COMMA)) -> sub_pattern COMMA . seq(__anonymous_0(sub_pattern,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## sub_pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR UIdent LBRACKET WILD COMMA WILD WILD
##
## Ends in an error in state: 147.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern . [ RBRACKET ]
## nsepseq(sub_pattern,COMMA) -> sub_pattern . COMMA nsepseq(sub_pattern,COMMA) [ RBRACKET ]
## seq(__anonymous_0(sub_pattern,COMMA)) -> sub_pattern . COMMA seq(__anonymous_0(sub_pattern,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## sub_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR UIdent LBRACKET WILD WILD
##
## Ends in an error in state: 145.
##
## nsepseq(sub_pattern,COMMA) -> sub_pattern . [ RBRACKET ]
## nsepseq(sub_pattern,COMMA) -> sub_pattern . COMMA nsepseq(sub_pattern,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(sub_pattern,COMMA)) -> sub_pattern . COMMA seq(__anonymous_0(sub_pattern,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## sub_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR UIdent LPAR VBAR
##
## Ends in an error in state: 114.
##
## par(ptuple) -> LPAR . ptuple RPAR [ RPAR RBRACKET RBRACE COMMA ARROW ]
## par(sub_pattern) -> LPAR . sub_pattern RPAR [ RPAR RBRACKET RBRACE COMMA ARROW ]
## unit -> LPAR . RPAR [ RPAR RBRACKET RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR UIdent LPAR WILD COMMA Bytes ARROW
##
## Ends in an error in state: 164.
##
## par(ptuple) -> LPAR ptuple . RPAR [ RPAR RBRACKET RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR ptuple
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 161, spurious reduction of production nsepseq(sub_pattern,COMMA) -> sub_pattern 
## In state 163, spurious reduction of production tuple(sub_pattern) -> sub_pattern COMMA nsepseq(sub_pattern,COMMA) 
## In state 157, spurious reduction of production ptuple -> tuple(sub_pattern) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR UIdent LPAR WILD WILD
##
## Ends in an error in state: 158.
##
## par(sub_pattern) -> LPAR sub_pattern . RPAR [ RPAR RBRACKET RBRACE COMMA ARROW ]
## tuple(sub_pattern) -> sub_pattern . COMMA nsepseq(sub_pattern,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR sub_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR UIdent RBRACKET
##
## Ends in an error in state: 183.
##
## par(closed_irrefutable) -> LPAR closed_irrefutable . RPAR [ RPAR EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAR closed_irrefutable
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 109, spurious reduction of production constr_pattern -> UIdent 
## In state 182, spurious reduction of production closed_irrefutable -> constr_pattern 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR UIdent VBAR
##
## Ends in an error in state: 109.
##
## constr_pattern -> UIdent . [ RPAR RBRACKET RBRACE COMMA ARROW ]
## constr_pattern -> UIdent . sub_pattern [ RPAR RBRACKET RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## UIdent
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR Verbatim
##
## Ends in an error in state: 108.
##
## par(closed_irrefutable) -> LPAR . closed_irrefutable RPAR [ RPAR EQ COMMA COLON ]
## unit -> LPAR . RPAR [ RPAR EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR WILD COLON Verbatim
##
## Ends in an error in state: 180.
##
## typed_pattern -> irrefutable COLON . type_expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## irrefutable COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let LPAR WILD EQ
##
## Ends in an error in state: 179.
##
## closed_irrefutable -> irrefutable . [ RPAR ]
## typed_pattern -> irrefutable . COLON type_expr [ RPAR ]
##
## The known suffix of the stack is as follows:
## irrefutable
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 171, spurious reduction of production irrefutable -> sub_irrefutable 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Rec Verbatim
##
## Ends in an error in state: 107.
##
## let_declaration -> Let Rec . let_binding [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Let Rec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let Verbatim
##
## Ends in an error in state: 105.
##
## let_declaration -> Let . let_binding [ Type SEMI RBRACE Module Let EOF Directive Attr ]
## let_declaration -> Let . Rec let_binding [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON Attr LBRACE WILD
##
## Ends in an error in state: 45.
##
## record_type -> nseq(Attr) LBRACE . sep_or_term_list(field_decl,COMMA) RBRACE [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON Attr Let
##
## Ends in an error in state: 76.
##
## record_type -> nseq(Attr) . LBRACE sep_or_term_list(field_decl,COMMA) RBRACE [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
## sum_type -> nseq(Attr) . VBAR nsepseq(variant,VBAR) [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
## variant -> nseq(Attr) . UIdent [ VBAR Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
## variant -> nseq(Attr) . UIdent par(type_expr) [ VBAR Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 35, spurious reduction of production seq(Attr) -> 
## In state 38, spurious reduction of production nseq(Attr) -> Attr seq(Attr) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON Attr UIdent WILD
##
## Ends in an error in state: 68.
##
## variant -> nseq(Attr) UIdent . [ VBAR Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
## variant -> nseq(Attr) UIdent . par(type_expr) [ VBAR Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) UIdent
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON Attr VBAR WILD
##
## Ends in an error in state: 77.
##
## sum_type -> nseq(Attr) VBAR . nsepseq(variant,VBAR) [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON ES6FUN Attr VBAR
##
## Ends in an error in state: 44.
##
## record_type -> nseq(Attr) . LBRACE sep_or_term_list(field_decl,COMMA) RBRACE [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 35, spurious reduction of production seq(Attr) -> 
## In state 38, spurious reduction of production nseq(Attr) -> Attr seq(Attr) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON ES6FUN UIdent WILD
##
## Ends in an error in state: 21.
##
## module_access_t -> UIdent . DOT module_var_t [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## UIdent
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON ES6FUN Verbatim
##
## Ends in an error in state: 34.
##
## fun_type_level -> ES6FUN . core_type ARROW fun_type_level [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## ES6FUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON ES6FUN WILD ARROW Verbatim
##
## Ends in an error in state: 62.
##
## fun_type_level -> ES6FUN core_type ARROW . fun_type_level [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## ES6FUN core_type ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON ES6FUN WILD WILD
##
## Ends in an error in state: 61.
##
## fun_type_level -> ES6FUN core_type . ARROW fun_type_level [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## ES6FUN core_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON Ident LPAR Verbatim
##
## Ends in an error in state: 33.
##
## par(type_args) -> LPAR . type_args RPAR [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON Ident LPAR WILD WILD
##
## Ends in an error in state: 71.
##
## tuple(type_expr) -> type_expr . COMMA nsepseq(type_expr,COMMA) [ RPAR ]
## type_args -> type_expr . [ RPAR ]
##
## The known suffix of the stack is as follows:
## type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON Ident WILD
##
## Ends in an error in state: 32.
##
## core_type -> Ident . [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
## type_constr_app -> Ident . par(type_args) [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON Int WILD
##
## Ends in an error in state: 188.
##
## let_binding -> irrefutable option(type_annotation) . EQ expr [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## irrefutable option(type_annotation)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON LBRACE Attr Ident WILD
##
## Ends in an error in state: 50.
##
## field_decl -> nseq(Attr) Ident . [ RBRACE COMMA ]
## field_decl -> nseq(Attr) Ident . type_annotation [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON LBRACE Attr VBAR
##
## Ends in an error in state: 49.
##
## field_decl -> nseq(Attr) . Ident [ RBRACE COMMA ]
## field_decl -> nseq(Attr) . Ident type_annotation [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 35, spurious reduction of production seq(Attr) -> 
## In state 38, spurious reduction of production nseq(Attr) -> Attr seq(Attr) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON LBRACE Ident COLON WILD WILD
##
## Ends in an error in state: 53.
##
## nsepseq(field_decl,COMMA) -> field_decl . [ RBRACE ]
## nsepseq(field_decl,COMMA) -> field_decl . COMMA nsepseq(field_decl,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_decl,COMMA)) -> field_decl . COMMA seq(__anonymous_0(field_decl,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON LBRACE Ident COMMA Ident COLON WILD WILD
##
## Ends in an error in state: 57.
##
## nsepseq(field_decl,COMMA) -> field_decl . [ RBRACE ]
## nsepseq(field_decl,COMMA) -> field_decl . COMMA nsepseq(field_decl,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_decl,COMMA)) -> field_decl . COMMA seq(__anonymous_0(field_decl,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON LBRACE Ident COMMA Ident COMMA WILD
##
## Ends in an error in state: 58.
##
## nsepseq(field_decl,COMMA) -> field_decl COMMA . nsepseq(field_decl,COMMA) [ RBRACE ]
## seq(__anonymous_0(field_decl,COMMA)) -> field_decl COMMA . seq(__anonymous_0(field_decl,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON LBRACE Ident COMMA WILD
##
## Ends in an error in state: 54.
##
## nsepseq(field_decl,COMMA) -> field_decl COMMA . nsepseq(field_decl,COMMA) [ RBRACE ]
## nseq(__anonymous_0(field_decl,COMMA)) -> field_decl COMMA . seq(__anonymous_0(field_decl,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON LBRACE Ident WILD
##
## Ends in an error in state: 29.
##
## field_decl -> Ident . [ RBRACE COMMA ]
## field_decl -> Ident . type_annotation [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON LBRACE WILD
##
## Ends in an error in state: 28.
##
## record_type -> LBRACE . sep_or_term_list(field_decl,COMMA) RBRACE [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON LPAR Verbatim
##
## Ends in an error in state: 27.
##
## par(tuple(type_expr)) -> LPAR . tuple(type_expr) RPAR [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
## par(type_expr) -> LPAR . type_expr RPAR [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON LPAR WILD COMMA Verbatim
##
## Ends in an error in state: 72.
##
## tuple(type_expr) -> type_expr COMMA . nsepseq(type_expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## type_expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON LPAR WILD COMMA WILD COMMA Verbatim
##
## Ends in an error in state: 74.
##
## nsepseq(type_expr,COMMA) -> type_expr COMMA . nsepseq(type_expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## type_expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON LPAR WILD COMMA WILD WILD
##
## Ends in an error in state: 73.
##
## nsepseq(type_expr,COMMA) -> type_expr . [ RPAR ]
## nsepseq(type_expr,COMMA) -> type_expr . COMMA nsepseq(type_expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON LPAR WILD WILD
##
## Ends in an error in state: 91.
##
## par(type_expr) -> LPAR type_expr . RPAR [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
## tuple(type_expr) -> type_expr . COMMA nsepseq(type_expr,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## LPAR type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON UIdent DOT WILD
##
## Ends in an error in state: 20.
##
## module_access_t -> UIdent DOT . module_var_t [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## UIdent DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON UIdent LPAR Ident RPAR WILD
##
## Ends in an error in state: 65.
##
## nsepseq(variant,VBAR) -> variant . [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
## nsepseq(variant,VBAR) -> variant . VBAR nsepseq(variant,VBAR) [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## variant
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON UIdent LPAR Verbatim
##
## Ends in an error in state: 18.
##
## par(type_expr) -> LPAR . type_expr RPAR [ VBAR Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON UIdent LPAR WILD WILD
##
## Ends in an error in state: 95.
##
## par(type_expr) -> LPAR type_expr . RPAR [ VBAR Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR type_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON UIdent VBAR WILD
##
## Ends in an error in state: 66.
##
## nsepseq(variant,VBAR) -> variant VBAR . nsepseq(variant,VBAR) [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## variant VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON UIdent WILD
##
## Ends in an error in state: 19.
##
## module_access_t -> UIdent . DOT module_var_t [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
## variant -> UIdent . [ VBAR Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
## variant -> UIdent . par(type_expr) [ VBAR Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## UIdent
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON VBAR Attr VBAR
##
## Ends in an error in state: 67.
##
## variant -> nseq(Attr) . UIdent [ VBAR Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
## variant -> nseq(Attr) . UIdent par(type_expr) [ VBAR Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 35, spurious reduction of production seq(Attr) -> 
## In state 38, spurious reduction of production nseq(Attr) -> Attr seq(Attr) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON VBAR UIdent WILD
##
## Ends in an error in state: 17.
##
## variant -> UIdent . [ VBAR Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
## variant -> UIdent . par(type_expr) [ VBAR Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## UIdent
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON VBAR WILD
##
## Ends in an error in state: 16.
##
## sum_type -> VBAR . nsepseq(variant,VBAR) [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COLON Verbatim
##
## Ends in an error in state: 30.
##
## type_annotation -> COLON . type_expr [ RPAR RBRACE EQ COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COMMA Verbatim
##
## Ends in an error in state: 172.
##
## tuple(sub_irrefutable) -> sub_irrefutable COMMA . nsepseq(sub_irrefutable,COMMA) [ RPAR EQ COLON ]
##
## The known suffix of the stack is as follows:
## sub_irrefutable COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COMMA WILD COMMA Verbatim
##
## Ends in an error in state: 174.
##
## nsepseq(sub_irrefutable,COMMA) -> sub_irrefutable COMMA . nsepseq(sub_irrefutable,COMMA) [ RPAR EQ COLON ]
##
## The known suffix of the stack is as follows:
## sub_irrefutable COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD COMMA WILD WILD
##
## Ends in an error in state: 173.
##
## nsepseq(sub_irrefutable,COMMA) -> sub_irrefutable . [ RPAR EQ COLON ]
## nsepseq(sub_irrefutable,COMMA) -> sub_irrefutable . COMMA nsepseq(sub_irrefutable,COMMA) [ RPAR EQ COLON ]
##
## The known suffix of the stack is as follows:
## sub_irrefutable
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD EQ Bytes VBAR
##
## Ends in an error in state: 588.
##
## declaration -> let_declaration . option(SEMI) [ Type RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## let_declaration
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 252, spurious reduction of production call_expr_level -> core_expr 
## In state 269, spurious reduction of production unary_expr_level -> call_expr_level 
## In state 241, spurious reduction of production shift_expr_level -> unary_expr_level 
## In state 257, spurious reduction of production mult_expr_level -> shift_expr_level 
## In state 263, spurious reduction of production add_expr_level -> mult_expr_level 
## In state 311, spurious reduction of production cat_expr_level -> add_expr_level 
## In state 328, spurious reduction of production comp_expr_level -> cat_expr_level 
## In state 335, spurious reduction of production conj_expr_level -> comp_expr_level 
## In state 339, spurious reduction of production disj_expr_level -> conj_expr_level 
## In state 295, spurious reduction of production expr -> disj_expr_level 
## In state 571, spurious reduction of production let_binding -> irrefutable option(type_annotation) EQ expr 
## In state 572, spurious reduction of production let_declaration -> Let let_binding 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD EQ WILD
##
## Ends in an error in state: 189.
##
## let_binding -> irrefutable option(type_annotation) EQ . expr [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## irrefutable option(type_annotation) EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD RPAR
##
## Ends in an error in state: 186.
##
## let_binding -> irrefutable . option(type_annotation) EQ expr [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## irrefutable
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 171, spurious reduction of production irrefutable -> sub_irrefutable 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let WILD WILD
##
## Ends in an error in state: 171.
##
## irrefutable -> sub_irrefutable . [ RPAR EQ COLON ]
## tuple(sub_irrefutable) -> sub_irrefutable . COMMA nsepseq(sub_irrefutable,COMMA) [ RPAR EQ COLON ]
##
## The known suffix of the stack is as follows:
## sub_irrefutable
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module UIdent EQ LBRACE Directive EOF
##
## Ends in an error in state: 586.
##
## module_decl -> Module UIdent EQ LBRACE module_ . RBRACE [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Module UIdent EQ LBRACE module_
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 590, spurious reduction of production seq(declaration) -> 
## In state 591, spurious reduction of production nseq(declaration) -> declaration seq(declaration) 
## In state 576, spurious reduction of production module_ -> nseq(declaration) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module UIdent EQ LBRACE Directive RBRACE WILD
##
## Ends in an error in state: 582.
##
## declaration -> module_decl . option(SEMI) [ Type RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## module_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module UIdent EQ LBRACE WILD
##
## Ends in an error in state: 104.
##
## module_decl -> Module UIdent EQ LBRACE . module_ RBRACE [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Module UIdent EQ LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module UIdent EQ UIdent DOT WILD
##
## Ends in an error in state: 102.
##
## nsepseq(module_name,DOT) -> UIdent DOT . nsepseq(module_name,DOT) [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## UIdent DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module UIdent EQ UIdent WILD
##
## Ends in an error in state: 101.
##
## nsepseq(module_name,DOT) -> UIdent . [ Type SEMI RBRACE Module Let EOF Directive Attr ]
## nsepseq(module_name,DOT) -> UIdent . DOT nsepseq(module_name,DOT) [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## UIdent
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module UIdent EQ WILD
##
## Ends in an error in state: 100.
##
## module_alias -> Module UIdent EQ . nsepseq(module_name,DOT) [ Type SEMI RBRACE Module Let EOF Directive Attr ]
## module_decl -> Module UIdent EQ . LBRACE module_ RBRACE [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Module UIdent EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module UIdent WILD
##
## Ends in an error in state: 99.
##
## module_alias -> Module UIdent . EQ nsepseq(module_name,DOT) [ Type SEMI RBRACE Module Let EOF Directive Attr ]
## module_decl -> Module UIdent . EQ LBRACE module_ RBRACE [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Module UIdent
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Module WILD
##
## Ends in an error in state: 98.
##
## module_alias -> Module . UIdent EQ nsepseq(module_name,DOT) [ Type SEMI RBRACE Module Let EOF Directive Attr ]
## module_decl -> Module . UIdent EQ LBRACE module_ RBRACE [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Module
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Int WILD
##
## Ends in an error in state: 574.
##
## declaration -> type_decl . option(SEMI) [ Type RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## type_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident EQ Verbatim
##
## Ends in an error in state: 14.
##
## type_decl -> Type Ident option(type_params) EQ . type_expr [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Type Ident option(type_params) EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident LPAR QUOTE Ident COMMA WILD
##
## Ends in an error in state: 7.
##
## nsepseq(type_var,COMMA) -> type_var COMMA . nsepseq(type_var,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## type_var COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident LPAR QUOTE Ident RPAR EOF
##
## Ends in an error in state: 13.
##
## type_decl -> Type Ident option(type_params) . EQ type_expr [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Type Ident option(type_params)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident LPAR QUOTE Ident WILD
##
## Ends in an error in state: 6.
##
## nsepseq(type_var,COMMA) -> type_var . [ RPAR ]
## nsepseq(type_var,COMMA) -> type_var . COMMA nsepseq(type_var,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## type_var
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident LPAR QUOTE WILD
##
## Ends in an error in state: 4.
##
## type_var -> QUOTE . Ident [ Type SEMI RPAR RBRACE Module Let EQ EOF Directive COMMA Attr ARROW ]
##
## The known suffix of the stack is as follows:
## QUOTE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident LPAR WILD
##
## Ends in an error in state: 3.
##
## par(nsepseq(type_var,COMMA)) -> LPAR . nsepseq(type_var,COMMA) RPAR [ EQ ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type Ident WILD
##
## Ends in an error in state: 2.
##
## type_decl -> Type Ident . option(type_params) EQ type_expr [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Type Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Type WILD
##
## Ends in an error in state: 1.
##
## type_decl -> Type . Ident option(type_params) EQ type_expr [ Type SEMI RBRACE Module Let EOF Directive Attr ]
##
## The known suffix of the stack is as follows:
## Type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: WILD
##
## Ends in an error in state: 0.
##
## contract' -> . contract [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

