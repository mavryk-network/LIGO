contract: ZWSP
##
## Ends in an error in state: 0.
##
## contract' -> . contract [ # ]
##
## The known suffix of the stack is as follows:
##
##

Ill-formed contract.
At this point, a top-level declaration is expected.

contract: Type ZWSP
##
## Ends in an error in state: 1.
##
## type_decl -> Type . type_binder EQ type_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case Break Attr ]
## type_decl -> Type . type_binder type_vars EQ type_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## Type
##

Ill-formed type declaration.
At this point, a new type name is expected.

contract: Type Ident ZWSP
##
## Ends in an error in state: 6.
##
## type_decl -> Type type_binder . EQ type_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case Break Attr ]
## type_decl -> Type type_binder . type_vars EQ type_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## Type type_binder
##

Ill-formed type declaration.
At this point, one of the following is expected:
  * the assignment symbol '=' followed by a type expression;
  * type parameters (variables) between chevrons ('<', '>') if the
    type is generic.

interactive_expr: LT ZWSP
##
## Ends in an error in state: 7.
##
## chevrons(sep_or_term(type_var,COMMA)) -> LT . sep_or_term(type_var,COMMA) GT [ WILD VBAR UIdent String ParameterOf LPAR LBRACKET LBRACE Int Ident ES6FUN EQ Attr ]
## chevrons(sep_or_term(type_var,COMMA)) -> LT . sep_or_term(type_var,COMMA) GT ZWSP [ WILD VBAR UIdent String ParameterOf LPAR LBRACKET LBRACE Int Ident ES6FUN EQ Attr ]
##
## The known suffix of the stack is as follows:
## LT
##

Ill-formed generic declaration.
At this point, a type parameter is expected as a variable.

interactive_expr: LT Ident ZWSP
##
## Ends in an error in state: 10.
##
## nsepseq(type_var,COMMA) -> type_var . [ GT ]
## nsepseq(type_var,COMMA) -> type_var . COMMA nsepseq(type_var,COMMA) [ GT ]
## nseq(__anonymous_0(type_var,COMMA)) -> type_var . COMMA [ GT ]
## nseq(__anonymous_0(type_var,COMMA)) -> type_var . COMMA nseq(__anonymous_0(type_var,COMMA)) [ GT ]
##
## The known suffix of the stack is as follows:
## type_var
##

Ill-formed generic declaration.
At this point, one of the following is expected:
  * a comma ',' followed by another type parameter (variable);
  * a closing chevron '>' if there are no more type parameters.

interactive_expr: LT Ident COMMA ZWSP
##
## Ends in an error in state: 11.
##
## nsepseq(type_var,COMMA) -> type_var COMMA . nsepseq(type_var,COMMA) [ GT ]
## nseq(__anonymous_0(type_var,COMMA)) -> type_var COMMA . [ GT ]
## nseq(__anonymous_0(type_var,COMMA)) -> type_var COMMA . nseq(__anonymous_0(type_var,COMMA)) [ GT ]
##
## The known suffix of the stack is as follows:
## type_var COMMA
##

Ill-formed generic declaration.
At this point, one of the following is expected:
  * another type parameter (variable);
  * a closing chevron '>' if there are no more type parameters.

contract: Type Ident EQ ZWSP
##
## Ends in an error in state: 20.
##
## type_decl -> Type type_binder EQ . type_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## Type type_binder EQ
##

Ill-formed type declaration.
At this point, a type expression is expected.

interactive_expr: UIdent As VBAR ZWSP
##
## Ends in an error in state: 22.
##
## nseq(__anonymous_1(object_type,VBAR)) -> VBAR . object_type [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## nseq(__anonymous_1(object_type,VBAR)) -> VBAR . object_type nseq(__anonymous_1(object_type,VBAR)) [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## nseq(__anonymous_3) -> VBAR . variant [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## nseq(__anonymous_3) -> VBAR . variant nseq(__anonymous_3) [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## VBAR
##

Ill-formed variant or union type.
At this point, one of the following is expected:
  * an object type, starting with an opening brace '{';
  * a variant, starting with an opening bracket '['.

interactive_expr: UIdent As VBAR LBRACKET ZWSP
##
## Ends in an error in state: 23.
##
## brackets(variant_comp) -> LBRACKET . String RBRACKET [ While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## brackets(variant_comp) -> LBRACKET . String COMMA ctor_params RBRACKET [ While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

Ill-formed variant.
At this point, a data constructor is expected as a string.

interactive_expr: UIdent As LBRACKET String ZWSP
##
## Ends in an error in state: 24.
##
## brackets(variant_comp) -> LBRACKET String . RBRACKET [ While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## brackets(variant_comp) -> LBRACKET String . COMMA ctor_params RBRACKET [ While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET String
##

Ill-formed variant.
At this point, one of the following is expected:
  * a comma ',' followed by a constructor argument as a type
    expression;
  * a closing bracket ']' if the constructor is constant (no
    argument).

interactive_expr: UIdent As LBRACKET String COMMA ZWSP
##
## Ends in an error in state: 26.
##
## brackets(variant_comp) -> LBRACKET String COMMA . ctor_params RBRACKET [ While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET String COMMA
##

Ill-formed variant.
At this point, the first constructor's argument is expected as a type
expression

interactive_expr: UIdent As ParameterOf ZWSP
##
## Ends in an error in state: 29.
##
## parameter_of_type -> ParameterOf . namespace_selection [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ARROW ]
##
## The known suffix of the stack is as follows:
## ParameterOf
##

Ill-formed parameter of a contract.
At this point, one of the following is expected:
  * a namespace name;
  * a qualified namespace (e.g. 'A.B.C').

interactive_expr: ContractOf LPAR UIdent DOT ZWSP
##
## Ends in an error in state: 34.
##
## namespace_path(namespace_name) -> namespace_name DOT . namespace_path(namespace_name) [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ARROW ]
## namespace_path(namespace_name) -> namespace_name DOT . namespace_name [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ARROW ]
##
## The known suffix of the stack is as follows:
## namespace_name DOT
##

Ill-formed namespace selection.
At this point, a namespace name is expected.

interactive_expr: UIdent As LPAR ZWSP
##
## Ends in an error in state: 37.
##
## par(type_expr) -> LPAR . type_expr RPAR [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ARROW ]
## par(type_expr) -> LPAR . type_expr PARAMS RPAR [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed parenthesised type expression.
At this point, a type expression is expected.

interactive_expr: UIdent As LBRACKET ZWSP
##
## Ends in an error in state: 38.
##
## brackets(type_elements) -> LBRACKET . type_elements RBRACKET [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## brackets(variant_comp) -> LBRACKET . String RBRACKET [ While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## brackets(variant_comp) -> LBRACKET . String COMMA ctor_params RBRACKET [ While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

Ill-formed array type or variant.
At this point, one of the following is expected:
  * a data constructor as a string, if defining a variant type;
  * the type of the first element of an array type.

interactive_expr: UIdent As LBRACE ZWSP
##
## Ends in an error in state: 39.
##
## braces(sep_or_term(property_decl,property_sep)) -> LBRACE . sep_or_term(property_decl,property_sep) RBRACE [ While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACE
##
interactive_expr: UIdent As LBRACE Attr ZWSP
##
## Ends in an error in state: 44.
##
## property_decl -> Attr . property_decl [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Attr
##

Ill-formed object type.
At this point, one of the following is expected:
  * a property name,
  * an integer denoting the property,
  * a string denoting the property.

interactive_expr: UIdent As LBRACE Ident ZWSP
##
## Ends in an error in state: 46.
##
## property_decl -> property_id . [ SEMI RBRACE COMMA ]
## property_decl -> property_id . type_annotation(type_expr) [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## property_id
##

Ill-formed object type.
At thuis point, one of the following is expected:
  * a property separator (',' or ';');
  * a closing brace '}' if no more properties;
  * a colon ':' followed by the type of the property.

interactive_expr: ES6FUN LPAR Ident COLON ZWSP
##
## Ends in an error in state: 47.
##
## type_annotation(type_expr) -> COLON . type_expr [ SEMI RPAR RBRACE PARAMS COMMA ]
##
## The known suffix of the stack is as follows:
## COLON
##

Ill-formed type annotation.
At this point, a type expression is expected.

interactive_expr: UIdent As ES6FUN ZWSP
##
## Ends in an error in state: 50.
##
## fun_type -> ES6FUN . fun_type_params ARROW type_expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN
##

Ill-formed function type.
At this point, the declaration of the parameters is expected between
parentheses.

interactive_expr: UIdent As ES6FUN LPAR ZWSP
##
## Ends in an error in state: 51.
##
## par(sep_or_term(fun_type_param,COMMA)) -> LPAR . sep_or_term(fun_type_param,COMMA) RPAR [ ARROW ]
## par(sep_or_term(fun_type_param,COMMA)) -> LPAR . sep_or_term(fun_type_param,COMMA) PARAMS RPAR [ ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed declaration of function parameters.
At this point, the first parameter is expected as a variable.

interactive_expr: UIdent As ES6FUN LPAR Ident ZWSP
##
## Ends in an error in state: 52.
##
## fun_type_param -> Ident . type_annotation(type_expr) [ RPAR PARAMS COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##

Ill-formed declaration of function parameters.
At this point, a colon ':' is expected, followed by the type of the
parameter.

interactive_expr: UIdent As ES6FUN LPAR PARAMS ZWSP
##
## Ends in an error in state: 56.
##
## par(sep_or_term(fun_type_param,COMMA)) -> LPAR sep_or_term(fun_type_param,COMMA) PARAMS . RPAR [ ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR sep_or_term(fun_type_param,COMMA) PARAMS
##

Ill-formed declaration of function parameters.
At this point, a closing parenthesis ')' is expected.

interactive_expr: UIdent As ES6FUN LPAR Ident COLON Ident XOR
##
## Ends in an error in state: 61.
##
## nsepseq(fun_type_param,COMMA) -> fun_type_param . [ RPAR PARAMS ]
## nsepseq(fun_type_param,COMMA) -> fun_type_param . COMMA nsepseq(fun_type_param,COMMA) [ RPAR PARAMS ]
## nseq(__anonymous_0(fun_type_param,COMMA)) -> fun_type_param . COMMA [ RPAR PARAMS ]
## nseq(__anonymous_0(fun_type_param,COMMA)) -> fun_type_param . COMMA nseq(__anonymous_0(fun_type_param,COMMA)) [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## fun_type_param
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 49, spurious reduction of production type_name -> Ident
## In state 71, spurious reduction of production no_par_type_expr -> type_name
## In state 102, spurious reduction of production core_type_no_string -> no_par_type_expr
## In state 112, spurious reduction of production core_type -> core_type_no_string
## In state 113, spurious reduction of production type_expr -> core_type
## In state 127, spurious reduction of production type_annotation(type_expr) -> COLON type_expr
## In state 53, spurious reduction of production fun_type_param -> Ident type_annotation(type_expr)
##

Ill-formed declaration of function parameters.
At this point, one of the following is expected:
  * a comma ',' followed by another parameter;
  * a closing parenthesis ')', if no more parameters.

interactive_expr: UIdent As ES6FUN LPAR Ident COLON Ident COMMA ZWSP
##
## Ends in an error in state: 62.
##
## nsepseq(fun_type_param,COMMA) -> fun_type_param COMMA . nsepseq(fun_type_param,COMMA) [ RPAR PARAMS ]
## nseq(__anonymous_0(fun_type_param,COMMA)) -> fun_type_param COMMA . [ RPAR PARAMS ]
## nseq(__anonymous_0(fun_type_param,COMMA)) -> fun_type_param COMMA . nseq(__anonymous_0(fun_type_param,COMMA)) [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## fun_type_param COMMA
##

Ill-formed declaration of function parameters.
At this point, one of the following is expected:
  * another parameter as a variable;
  * a closing parenthesis ')' if no more parameters.

interactive_expr: UIdent As ES6FUN LPAR PARAMS RPAR ZWSP
##
## Ends in an error in state: 66.
##
## fun_type -> ES6FUN fun_type_params . ARROW type_expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN fun_type_params
##

Ill-formed function type.
At this point, a double arrow '=>' is expected, followed by the type
of the function calls.

interactive_expr: UIdent As ES6FUN LPAR PARAMS RPAR ARROW ZWSP
##
## Ends in an error in state: 67.
##
## fun_type -> ES6FUN fun_type_params ARROW . type_expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN fun_type_params ARROW
##

Ill-formed function type.
At this point, the type of the function calls is expected.

interactive_expr: UIdent As Attr ZWSP
##
## Ends in an error in state: 68.
##
## attr_type -> Attr . core_type_no_string [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## attr_variant -> Attr . attr_variant [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## variant -> Attr . variant [ While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## Attr
##

Ill-formed attributed type or variant.
At this point, one of the following is expected:
  * another attribute;
  * a type expression;
  * a variant starting with an opening bracket '['.

interactive_expr: UIdent As Ident LT ZWSP
##
## Ends in an error in state: 74.
##
## chevrons(nsep_or_term(type_ctor_arg(type_expr),COMMA)) -> LT . nsep_or_term(type_ctor_arg(type_expr),COMMA) GT [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ARROW ]
## chevrons(nsep_or_term(type_ctor_arg(type_expr),COMMA)) -> LT . nsep_or_term(type_ctor_arg(type_expr),COMMA) GT ZWSP [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LT
##

Ill-formed generic type.
At this point, a type argument is expected as a type expression.

interactive_expr: UIdent As LBRACKET String RBRACKET VBAR ZWSP
##
## Ends in an error in state: 77.
##
## nsepseq(variant,VBAR) -> variant VBAR . nsepseq(variant,VBAR) [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## variant VBAR
##
interactive_expr: UIdent As VBAR Attr ZWSP
##
## Ends in an error in state: 78.
##
## variant -> Attr . variant [ While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## Attr
##

Ill-formed variant type.
At his point, a variant is expected to start with an opening bracket '['.

interactive_expr: UIdent As Ident LT Ident XOR
##
## Ends in an error in state: 82.
##
## nsepseq(type_ctor_arg(type_expr),COMMA) -> type_ctor_arg(type_expr) . [ GT ]
## nsepseq(type_ctor_arg(type_expr),COMMA) -> type_ctor_arg(type_expr) . COMMA nsepseq(type_ctor_arg(type_expr),COMMA) [ GT ]
## nseq(__anonymous_0(type_ctor_arg(type_expr),COMMA)) -> type_ctor_arg(type_expr) . COMMA [ GT ]
## nseq(__anonymous_0(type_ctor_arg(type_expr),COMMA)) -> type_ctor_arg(type_expr) . COMMA nseq(__anonymous_0(type_ctor_arg(type_expr),COMMA)) [ GT ]
##
## The known suffix of the stack is as follows:
## type_ctor_arg(type_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 49, spurious reduction of production type_name -> Ident
## In state 71, spurious reduction of production no_par_type_expr -> type_name
## In state 102, spurious reduction of production core_type_no_string -> no_par_type_expr
## In state 112, spurious reduction of production core_type -> core_type_no_string
## In state 113, spurious reduction of production type_expr -> core_type
## In state 81, spurious reduction of production type_ctor_arg(type_expr) -> type_expr
##

Ill-formed generic type.
At this point, one of the following is expected:
  * a comma ',' followed by another type argument as a type
    expression;
  * a closing chevron '>' if no more type arguments.

interactive_expr: UIdent As Ident LT Ident COMMA ZWSP
##
## Ends in an error in state: 83.
##
## nsepseq(type_ctor_arg(type_expr),COMMA) -> type_ctor_arg(type_expr) COMMA . nsepseq(type_ctor_arg(type_expr),COMMA) [ GT ]
## nseq(__anonymous_0(type_ctor_arg(type_expr),COMMA)) -> type_ctor_arg(type_expr) COMMA . [ GT ]
## nseq(__anonymous_0(type_ctor_arg(type_expr),COMMA)) -> type_ctor_arg(type_expr) COMMA . nseq(__anonymous_0(type_ctor_arg(type_expr),COMMA)) [ GT ]
##
## The known suffix of the stack is as follows:
## type_ctor_arg(type_expr) COMMA
##

Ill-formed generic type.
At his point, one of the following is expected:
  * a type argument as a type expression;
  * a closing chevron '>' if no more type arguments.

interactive_expr: UIdent As LBRACE RBRACE VBAR ZWSP
##
## Ends in an error in state: 92.
##
## nsepseq(object_type,VBAR) -> object_type VBAR . nsepseq(object_type,VBAR) [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ARROW ]
##
## The known suffix of the stack is as follows:
## object_type VBAR
##

Ill-formed object type.
At this point, an object type is expected to start with an opening
brace '{'.

interactive_expr: UIdent As UIdent DOT ZWSP
##
## Ends in an error in state: 106.
##
## namespace_path(__anonymous_4) -> namespace_name DOT . namespace_path(__anonymous_4) [ LT ]
## namespace_path(__anonymous_4) -> namespace_name DOT . type_ctor [ LT ]
## namespace_path(__anonymous_5) -> namespace_name DOT . namespace_path(__anonymous_5) [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ARROW ]
## namespace_path(__anonymous_5) -> namespace_name DOT . type_name [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ARROW ]
##
## The known suffix of the stack is as follows:
## namespace_name DOT
##

Ill-formed selection of a type in a namespace.
At this point, one of the following is expected:
  * a type name,
  * another namespace name.

interactive_expr: UIdent As LBRACE Ident COLON Ident XOR
##
## Ends in an error in state: 132.
##
## nsepseq(property_decl,property_sep) -> property_decl . [ RBRACE ]
## nsepseq(property_decl,property_sep) -> property_decl . property_sep nsepseq(property_decl,property_sep) [ RBRACE ]
## nseq(__anonymous_0(property_decl,property_sep)) -> property_decl . property_sep [ RBRACE ]
## nseq(__anonymous_0(property_decl,property_sep)) -> property_decl . property_sep nseq(__anonymous_0(property_decl,property_sep)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## property_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 49, spurious reduction of production type_name -> Ident
## In state 71, spurious reduction of production no_par_type_expr -> type_name
## In state 102, spurious reduction of production core_type_no_string -> no_par_type_expr
## In state 112, spurious reduction of production core_type -> core_type_no_string
## In state 113, spurious reduction of production type_expr -> core_type
## In state 127, spurious reduction of production type_annotation(type_expr) -> COLON type_expr
## In state 128, spurious reduction of production property_decl -> property_id type_annotation(type_expr)
##

Ill-formed object type.
At this point, one of the following is expected:
  * a property separator (';' or ',') followed by another property
    declaration;
  * a closing brace '}' if no more properties.

interactive_expr: UIdent As LBRACE Ident COMMA ZWSP
##
## Ends in an error in state: 135.
##
## nsepseq(property_decl,property_sep) -> property_decl property_sep . nsepseq(property_decl,property_sep) [ RBRACE ]
## nseq(__anonymous_0(property_decl,property_sep)) -> property_decl property_sep . [ RBRACE ]
## nseq(__anonymous_0(property_decl,property_sep)) -> property_decl property_sep . nseq(__anonymous_0(property_decl,property_sep)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## property_decl property_sep
##

Ill-formed object type.
At this point, one of the following is expected:
  * another property declaration;
  * a closing brace '}' if no more properties.

interactive_expr: UIdent As LBRACKET Ident XOR
##
## Ends in an error in state: 144.
##
## type_elements -> type_element_no_string . [ RBRACKET ]
## type_elements -> type_element_no_string . COMMA nsep_or_term(type_element,COMMA) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## type_element_no_string
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 49, spurious reduction of production type_name -> Ident
## In state 71, spurious reduction of production no_par_type_expr -> type_name
## In state 102, spurious reduction of production core_type_no_string -> no_par_type_expr
## In state 155, spurious reduction of production type_element_no_string -> core_type_no_string
##
interactive_expr: UIdent As LBRACKET Ident COMMA Ident XOR
##
## Ends in an error in state: 147.
##
## nsepseq(type_element,COMMA) -> type_element . [ RBRACKET ]
## nsepseq(type_element,COMMA) -> type_element . COMMA nsepseq(type_element,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(type_element,COMMA)) -> type_element . COMMA [ RBRACKET ]
## nseq(__anonymous_0(type_element,COMMA)) -> type_element . COMMA nseq(__anonymous_0(type_element,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## type_element
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 49, spurious reduction of production type_name -> Ident
## In state 71, spurious reduction of production no_par_type_expr -> type_name
## In state 102, spurious reduction of production core_type_no_string -> no_par_type_expr
## In state 112, spurious reduction of production core_type -> core_type_no_string
## In state 113, spurious reduction of production type_expr -> core_type
## In state 146, spurious reduction of production type_element -> type_expr
##

Ill-formed array type.
At this point, if the type element is complete, one of the following
is expected:
  * a comma ',' followed by the type of the next element;
  * a closing bracket ']' if no more element type.

interactive_expr: UIdent As LBRACKET Ident COMMA ZWSP
##
## Ends in an error in state: 145.
##
## type_elements -> type_element_no_string COMMA . nsep_or_term(type_element,COMMA) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## type_element_no_string COMMA
##

Ill-formed array type.
At this point, the type of an element is expected.

interactive_expr: UIdent As LBRACKET Ident COMMA Ident COMMA ZWSP
##
## Ends in an error in state: 148.
##
## nsepseq(type_element,COMMA) -> type_element COMMA . nsepseq(type_element,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(type_element,COMMA)) -> type_element COMMA . [ RBRACKET ]
## nseq(__anonymous_0(type_element,COMMA)) -> type_element COMMA . nseq(__anonymous_0(type_element,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## type_element COMMA
##

Ill-formed array type.
At this point, one of the following is expected:
  * the type of the next element;
  * a closing bracket ']' if no more element types.

interactive_expr: UIdent As LPAR Ident XOR
##
## Ends in an error in state: 156.
##
## par(type_expr) -> LPAR type_expr . RPAR [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ARROW ]
## par(type_expr) -> LPAR type_expr . PARAMS RPAR [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR type_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 49, spurious reduction of production type_name -> Ident
## In state 71, spurious reduction of production no_par_type_expr -> type_name
## In state 102, spurious reduction of production core_type_no_string -> no_par_type_expr
## In state 112, spurious reduction of production core_type -> core_type_no_string
## In state 113, spurious reduction of production type_expr -> core_type
##

Ill-formed parenthesised type expression.
At this point, if the type expression is complete, a closing
parenthesis ')' is expected.

interactive_expr: UIdent As LPAR Ident PARAMS ZWSP
##
## Ends in an error in state: 158.
##
## par(type_expr) -> LPAR type_expr PARAMS . RPAR [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR type_expr PARAMS
##

Ill-formed parenthesised type expression.
At this point, a closing parenthesis ')' is expected.

interactive_expr: UIdent As LBRACKET String COMMA Ident XOR
##
## Ends in an error in state: 166.
##
## nsepseq(ctor_param,COMMA) -> ctor_param . [ RBRACKET ]
## nsepseq(ctor_param,COMMA) -> ctor_param . COMMA nsepseq(ctor_param,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(ctor_param,COMMA)) -> ctor_param . COMMA [ RBRACKET ]
## nseq(__anonymous_0(ctor_param,COMMA)) -> ctor_param . COMMA nseq(__anonymous_0(ctor_param,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## ctor_param
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 49, spurious reduction of production type_name -> Ident
## In state 71, spurious reduction of production no_par_type_expr -> type_name
## In state 102, spurious reduction of production core_type_no_string -> no_par_type_expr
## In state 112, spurious reduction of production core_type -> core_type_no_string
## In state 113, spurious reduction of production type_expr -> core_type
## In state 160, spurious reduction of production ctor_param -> type_expr
##

Ill-formed variant type.
At this point, one of the following is expected:
  * a comma ',' followed by another constructor parameter as a type
    expression;
  * a closing bracket ']' if no more parameters.

interactive_expr: UIdent As LBRACKET String COMMA Ident COMMA ZWSP
##
## Ends in an error in state: 167.
##
## nsepseq(ctor_param,COMMA) -> ctor_param COMMA . nsepseq(ctor_param,COMMA) [ RBRACKET ]
## nseq(__anonymous_0(ctor_param,COMMA)) -> ctor_param COMMA . [ RBRACKET ]
## nseq(__anonymous_0(ctor_param,COMMA)) -> ctor_param COMMA . nseq(__anonymous_0(ctor_param,COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## ctor_param COMMA
##

Ill-formed variant type.
At this point, one of the following is expected:
  * a constructor parameter as a type expression;
  * a closing bracket ']' if no more parameters.

interactive_expr: UIdent As VBAR LBRACKET String RBRACKET VBAR ZWSP
##
## Ends in an error in state: 171.
##
## nseq(__anonymous_3) -> VBAR . variant [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## nseq(__anonymous_3) -> VBAR . variant nseq(__anonymous_3) [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## VBAR
##

Ill-formed variant type.
At this point, a variant is expected to start with an opening bracket '['.

interactive_expr: UIdent As VBAR LBRACKET String RBRACKET ZWSP
##
## Ends in an error in state: 1115.
##
## interactive_expr -> expr . EOF [ # ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 170, spurious reduction of production nseq(__anonymous_3) -> VBAR variant
## In state 95, spurious reduction of production attr_variant -> nseq(__anonymous_3)
## In state 115, spurious reduction of production variant_type -> attr_variant
## In state 75, spurious reduction of production type_expr -> variant_type
## In state 507, spurious reduction of production typed_expr -> app_expr_level As type_expr
## In state 389, spurious reduction of production non_object_expr -> typed_expr
## In state 480, spurious reduction of production no_attr_expr -> non_object_expr
## In state 481, spurious reduction of production expr -> no_attr_expr
##

Ill-formed expression.
At this point, if the expression is complete, the end of the input is
expected.

interactive_expr: UIdent As VBAR LBRACE RBRACE VBAR ZWSP
##
## Ends in an error in state: 174.
##
## nseq(__anonymous_1(object_type,VBAR)) -> VBAR . object_type [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ARROW ]
## nseq(__anonymous_1(object_type,VBAR)) -> VBAR . object_type nseq(__anonymous_1(object_type,VBAR)) [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If GT Function For Export Else EQ EOF Directive Default Continue Const Case COMMA COLON Break Attr ARROW ]
##
## The known suffix of the stack is as follows:
## VBAR
##

Ill-formed union type.
At this point, an object type is expected.

contract: Type Ident LT GT XOR
##
## Ends in an error in state: 177.
##
## type_decl -> Type type_binder type_vars . EQ type_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## Type type_binder type_vars
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 15, spurious reduction of production chevrons(sep_or_term(type_var,COMMA)) -> LT sep_or_term(type_var,COMMA) GT
## In state 180, spurious reduction of production type_vars -> chevrons(sep_or_term(type_var,COMMA))
##

Ill-formed generic type declaration.
At this point, if the type parameters are complete, the assignment
symbol '=' is expected, followed by a type expression.

contract: Type Ident LT GT EQ ZWSP
##
## Ends in an error in state: 178.
##
## type_decl -> Type type_binder type_vars EQ . type_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## Type type_binder type_vars EQ
##

Ill-formed generic type declaration.
At this point, a type expression is expected.

contract: Namespace ZWSP
##
## Ends in an error in state: 181.
##
## namespace_decl -> Namespace . namespace_binder braces(statements) [ While Verbatim UIdent Type True Switch String SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF Directive Default Continue Const Case Bytes Break Attr ]
## namespace_decl -> Namespace . namespace_binder interface braces(statements) [ While Verbatim UIdent Type True Switch String SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF Directive Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Namespace
##

Ill-formed namespace declaration.
At this point, a namespace name is expected.

contract: Namespace UIdent ZWSP
##
## Ends in an error in state: 184.
##
## namespace_decl -> Namespace namespace_binder . braces(statements) [ While Verbatim UIdent Type True Switch String SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF Directive Default Continue Const Case Bytes Break Attr ]
## namespace_decl -> Namespace namespace_binder . interface braces(statements) [ While Verbatim UIdent Type True Switch String SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF Directive Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Namespace namespace_binder
##

Ill-formed namespace declaration.
At this point, one of the following is expected:
  * the keyword 'implements' followed by an interface;
  * a block of statements starting with an opening brace '{'.

contract: Namespace UIdent LBRACE ZWSP
##
## Ends in an error in state: 185.
##
## braces(statements) -> LBRACE . statements RBRACE [ While When Verbatim UIdent Type True Switch String SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF Directive Default Continue Const Case COMMA COLON Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Ill-formed block of statements.
At this point, a statement is expected.

contract: Namespace UIdent LBRACE While ZWSP
##
## Ends in an error in state: 186.
##
## while_stmt(poly_stmt) -> While . par(while_cond) poly_stmt [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## while_stmt(statement) -> While . par(while_cond) statement [ SEMI RBRACE Default Case ]
## while_stmt(stmt_ending_with_expr) -> While . par(while_cond) stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## While
##

Ill-formed while-loop.
At this point, the condition between parentheses is expected.

contract: Namespace UIdent LBRACE While LPAR ZWSP
##
## Ends in an error in state: 187.
##
## par(while_cond) -> LPAR . while_cond RPAR [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## par(while_cond) -> LPAR . while_cond PARAMS RPAR [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed while-loop.
At this point, the condition is expected as a boolean expression.

interactive_expr: PLUS2 ZWSP
##
## Ends in an error in state: 192.
##
## pre_incr_expr -> PLUS2 . Ident [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT Function For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## PLUS2
##

Ill-formed increment.
At this point, the incremented variable is expected.

interactive_expr: NOT ZWSP
##
## Ends in an error in state: 195.
##
## not_expr -> NOT . app_expr_level [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT Function For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## NOT
##

Ill-formed

interactive_expr: LPAR ZWSP
##
## Ends in an error in state: 197.
##
## par(expr) -> LPAR . expr RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT Function For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr As AND ]
## par(expr) -> LPAR . expr PARAMS RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT Function For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Match ZWSP
##
## Ends in an error in state: 198.
##
## match_expr -> Match . match_subject braces(match_clauses) [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## Match
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Match LPAR UIdent RPAR ZWSP
##
## Ends in an error in state: 200.
##
## match_expr -> Match match_subject . braces(match_clauses) [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## Match match_subject
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Match LPAR UIdent RPAR LBRACE ZWSP
##
## Ends in an error in state: 201.
##
## braces(match_clauses) -> LBRACE . match_clauses RBRACE [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Match LPAR UIdent RPAR LBRACE When ZWSP
##
## Ends in an error in state: 202.
##
## match_clause -> When . par(pattern) COLON expr [ When RBRACE Default ]
##
## The known suffix of the stack is as follows:
## When
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Match LPAR UIdent RPAR LBRACE When LPAR ZWSP
##
## Ends in an error in state: 203.
##
## par(pattern) -> LPAR . pattern RPAR [ COLON ]
## par(pattern) -> LPAR . pattern PARAMS RPAR [ COLON ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const LBRACKET ZWSP
##
## Ends in an error in state: 210.
##
## brackets(sep_or_term(component(pattern),COMMA)) -> LBRACKET . sep_or_term(component(pattern),COMMA) RBRACKET [ SEMI RPAR RBRACKET RBRACE PARAMS EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const LBRACE ZWSP
##
## Ends in an error in state: 211.
##
## braces(sep_or_term(property_pattern(pattern),property_sep)) -> LBRACE . sep_or_term(property_pattern(pattern),property_sep) RBRACE [ SEMI RPAR RBRACKET RBRACE PARAMS EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const LBRACE Attr ZWSP
##
## Ends in an error in state: 212.
##
## property_pattern(pattern) -> Attr . property_pattern(pattern) [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Attr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const LBRACE Ident ZWSP
##
## Ends in an error in state: 214.
##
## property_pattern(pattern) -> property_id . [ SEMI RBRACE COMMA ]
## property_pattern(pattern) -> property_id . COLON pattern [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## property_id
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const LBRACE Ident COLON ZWSP
##
## Ends in an error in state: 215.
##
## property_pattern(pattern) -> property_id COLON . pattern [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## property_id COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const Attr ZWSP
##
## Ends in an error in state: 220.
##
## pattern -> Attr . pattern [ SEMI RPAR RBRACKET RBRACE PARAMS EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## Attr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const LBRACE Ident COLON Bytes ZWSP
##
## Ends in an error in state: 230.
##
## nsepseq(property_pattern(pattern),property_sep) -> property_pattern(pattern) . [ RBRACE ]
## nsepseq(property_pattern(pattern),property_sep) -> property_pattern(pattern) . property_sep nsepseq(property_pattern(pattern),property_sep) [ RBRACE ]
## nseq(__anonymous_0(property_pattern(pattern),property_sep)) -> property_pattern(pattern) . property_sep [ RBRACE ]
## nseq(__anonymous_0(property_pattern(pattern),property_sep)) -> property_pattern(pattern) . property_sep nseq(__anonymous_0(property_pattern(pattern),property_sep)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## property_pattern(pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const LBRACE Ident COMMA ZWSP
##
## Ends in an error in state: 231.
##
## nsepseq(property_pattern(pattern),property_sep) -> property_pattern(pattern) property_sep . nsepseq(property_pattern(pattern),property_sep) [ RBRACE ]
## nseq(__anonymous_0(property_pattern(pattern),property_sep)) -> property_pattern(pattern) property_sep . [ RBRACE ]
## nseq(__anonymous_0(property_pattern(pattern),property_sep)) -> property_pattern(pattern) property_sep . nseq(__anonymous_0(property_pattern(pattern),property_sep)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## property_pattern(pattern) property_sep
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const LBRACKET ELLIPSIS ZWSP
##
## Ends in an error in state: 237.
##
## component(pattern) -> ELLIPSIS . pattern [ RBRACKET COMMA ]
##
## The known suffix of the stack is as follows:
## ELLIPSIS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const LBRACKET Bytes ZWSP
##
## Ends in an error in state: 245.
##
## nsepseq(component(pattern),COMMA) -> component(pattern) . [ RBRACKET ]
## nsepseq(component(pattern),COMMA) -> component(pattern) . COMMA nsepseq(component(pattern),COMMA) [ RBRACKET ]
## nseq(__anonymous_0(component(pattern),COMMA)) -> component(pattern) . COMMA [ RBRACKET ]
## nseq(__anonymous_0(component(pattern),COMMA)) -> component(pattern) . COMMA nseq(__anonymous_0(component(pattern),COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## component(pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const LBRACKET Bytes COMMA ZWSP
##
## Ends in an error in state: 246.
##
## nsepseq(component(pattern),COMMA) -> component(pattern) COMMA . nsepseq(component(pattern),COMMA) [ RBRACKET ]
## nseq(__anonymous_0(component(pattern),COMMA)) -> component(pattern) COMMA . [ RBRACKET ]
## nseq(__anonymous_0(component(pattern),COMMA)) -> component(pattern) COMMA . nseq(__anonymous_0(component(pattern),COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## component(pattern) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Match LPAR UIdent RPAR LBRACE When LPAR Bytes ZWSP
##
## Ends in an error in state: 249.
##
## par(pattern) -> LPAR pattern . RPAR [ COLON ]
## par(pattern) -> LPAR pattern . PARAMS RPAR [ COLON ]
##
## The known suffix of the stack is as follows:
## LPAR pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Match LPAR UIdent RPAR LBRACE When LPAR Bytes PARAMS ZWSP
##
## Ends in an error in state: 251.
##
## par(pattern) -> LPAR pattern PARAMS . RPAR [ COLON ]
##
## The known suffix of the stack is as follows:
## LPAR pattern PARAMS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Match LPAR UIdent RPAR LBRACE When LPAR Bytes RPAR ZWSP
##
## Ends in an error in state: 253.
##
## match_clause -> When par(pattern) . COLON expr [ When RBRACE Default ]
##
## The known suffix of the stack is as follows:
## When par(pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Match LPAR UIdent RPAR LBRACE When LPAR Bytes RPAR COLON ZWSP
##
## Ends in an error in state: 254.
##
## match_clause -> When par(pattern) COLON . expr [ When RBRACE Default ]
##
## The known suffix of the stack is as follows:
## When par(pattern) COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: MINUS2 ZWSP
##
## Ends in an error in state: 255.
##
## pre_decr_expr -> MINUS2 . Ident [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT Function For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## MINUS2
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: MINUS ZWSP
##
## Ends in an error in state: 257.
##
## minus_expr -> MINUS . app_expr_level [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT Function For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET ZWSP
##
## Ends in an error in state: 258.
##
## brackets(sep_or_term(component(expr),COMMA)) -> LBRACKET . sep_or_term(component(expr),COMMA) RBRACKET [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACE Interface Import If GT Function For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ZWSP
##
## Ends in an error in state: 259.
##
## braces(sep_or_term(property(expr),property_sep)) -> LBRACE . sep_or_term(property(expr),property_sep) RBRACE [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## braces(update_expr) -> LBRACE . update_expr RBRACE [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS ZWSP
##
## Ends in an error in state: 260.
##
## update_expr -> ELLIPSIS . expr property_sep updates [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ELLIPSIS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function ZWSP
##
## Ends in an error in state: 265.
##
## function_expr -> Function . fun_par_params option(ret_type) braces(statements) [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## function_expr -> Function . type_vars fun_par_params option(ret_type) braces(statements) [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## Function
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR ZWSP
##
## Ends in an error in state: 266.
##
## par(__anonymous_7) -> LPAR . fun_params PARAMS RPAR [ LBRACE COLON ARROW ]
## par(__anonymous_7) -> LPAR . fun_params PARAMS PARAMS RPAR [ LBRACE COLON ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR LBRACKET ZWSP
##
## Ends in an error in state: 268.
##
## brackets(sep_or_term(component(param_pattern),COMMA)) -> LBRACKET . sep_or_term(component(param_pattern),COMMA) RBRACKET [ SEMI RPAR RBRACKET RBRACE PARAMS COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR LBRACE ZWSP
##
## Ends in an error in state: 269.
##
## braces(sep_or_term(property_pattern(param_pattern),property_sep)) -> LBRACE . sep_or_term(property_pattern(param_pattern),property_sep) RBRACE [ SEMI RPAR RBRACKET RBRACE PARAMS COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR LBRACE Attr ZWSP
##
## Ends in an error in state: 270.
##
## property_pattern(param_pattern) -> Attr . property_pattern(param_pattern) [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Attr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR LBRACE Ident ZWSP
##
## Ends in an error in state: 272.
##
## property_pattern(param_pattern) -> property_id . [ SEMI RBRACE COMMA ]
## property_pattern(param_pattern) -> property_id . COLON param_pattern [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## property_id
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR LBRACE Ident COLON ZWSP
##
## Ends in an error in state: 273.
##
## property_pattern(param_pattern) -> property_id COLON . param_pattern [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## property_id COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR LBRACE Ident COLON Ident ZWSP
##
## Ends in an error in state: 282.
##
## nsepseq(property_pattern(param_pattern),property_sep) -> property_pattern(param_pattern) . [ RBRACE ]
## nsepseq(property_pattern(param_pattern),property_sep) -> property_pattern(param_pattern) . property_sep nsepseq(property_pattern(param_pattern),property_sep) [ RBRACE ]
## nseq(__anonymous_0(property_pattern(param_pattern),property_sep)) -> property_pattern(param_pattern) . property_sep [ RBRACE ]
## nseq(__anonymous_0(property_pattern(param_pattern),property_sep)) -> property_pattern(param_pattern) . property_sep nseq(__anonymous_0(property_pattern(param_pattern),property_sep)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## property_pattern(param_pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR LBRACE Ident COMMA ZWSP
##
## Ends in an error in state: 283.
##
## nsepseq(property_pattern(param_pattern),property_sep) -> property_pattern(param_pattern) property_sep . nsepseq(property_pattern(param_pattern),property_sep) [ RBRACE ]
## nseq(__anonymous_0(property_pattern(param_pattern),property_sep)) -> property_pattern(param_pattern) property_sep . [ RBRACE ]
## nseq(__anonymous_0(property_pattern(param_pattern),property_sep)) -> property_pattern(param_pattern) property_sep . nseq(__anonymous_0(property_pattern(param_pattern),property_sep)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## property_pattern(param_pattern) property_sep
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR LBRACKET ELLIPSIS ZWSP
##
## Ends in an error in state: 289.
##
## component(param_pattern) -> ELLIPSIS . param_pattern [ RBRACKET COMMA ]
##
## The known suffix of the stack is as follows:
## ELLIPSIS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR LBRACKET Ident ZWSP
##
## Ends in an error in state: 297.
##
## nsepseq(component(param_pattern),COMMA) -> component(param_pattern) . [ RBRACKET ]
## nsepseq(component(param_pattern),COMMA) -> component(param_pattern) . COMMA nsepseq(component(param_pattern),COMMA) [ RBRACKET ]
## nseq(__anonymous_0(component(param_pattern),COMMA)) -> component(param_pattern) . COMMA [ RBRACKET ]
## nseq(__anonymous_0(component(param_pattern),COMMA)) -> component(param_pattern) . COMMA nseq(__anonymous_0(component(param_pattern),COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## component(param_pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR LBRACKET Ident COMMA ZWSP
##
## Ends in an error in state: 298.
##
## nsepseq(component(param_pattern),COMMA) -> component(param_pattern) COMMA . nsepseq(component(param_pattern),COMMA) [ RBRACKET ]
## nseq(__anonymous_0(component(param_pattern),COMMA)) -> component(param_pattern) COMMA . [ RBRACKET ]
## nseq(__anonymous_0(component(param_pattern),COMMA)) -> component(param_pattern) COMMA . nseq(__anonymous_0(component(param_pattern),COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## component(param_pattern) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR Ident ZWSP
##
## Ends in an error in state: 302.
##
## fun_param -> param_pattern . type_annotation(type_expr) [ RPAR PARAMS COMMA ]
## fun_param -> param_pattern . [ RPAR PARAMS COMMA ]
##
## The known suffix of the stack is as follows:
## param_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR Ident RPAR
##
## Ends in an error in state: 307.
##
## par(__anonymous_7) -> LPAR fun_params . PARAMS RPAR [ LBRACE COLON ARROW ]
## par(__anonymous_7) -> LPAR fun_params . PARAMS PARAMS RPAR [ LBRACE COLON ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR fun_params
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 302, spurious reduction of production fun_param -> param_pattern
## In state 312, spurious reduction of production nsepseq(fun_param,COMMA) -> fun_param
## In state 305, spurious reduction of production nsep_or_term(fun_param,COMMA) -> nsepseq(fun_param,COMMA)
## In state 306, spurious reduction of production sep_or_term(fun_param,COMMA) -> nsep_or_term(fun_param,COMMA)
## In state 301, spurious reduction of production fun_params -> sep_or_term(fun_param,COMMA)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR PARAMS ZWSP
##
## Ends in an error in state: 308.
##
## par(__anonymous_7) -> LPAR fun_params PARAMS . RPAR [ LBRACE COLON ARROW ]
## par(__anonymous_7) -> LPAR fun_params PARAMS . PARAMS RPAR [ LBRACE COLON ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR fun_params PARAMS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR PARAMS PARAMS ZWSP
##
## Ends in an error in state: 310.
##
## par(__anonymous_7) -> LPAR fun_params PARAMS PARAMS . RPAR [ LBRACE COLON ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR fun_params PARAMS PARAMS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR Ident COLON Ident XOR
##
## Ends in an error in state: 312.
##
## nsepseq(fun_param,COMMA) -> fun_param . [ RPAR PARAMS ]
## nsepseq(fun_param,COMMA) -> fun_param . COMMA nsepseq(fun_param,COMMA) [ RPAR PARAMS ]
## nseq(__anonymous_0(fun_param,COMMA)) -> fun_param . COMMA [ RPAR PARAMS ]
## nseq(__anonymous_0(fun_param,COMMA)) -> fun_param . COMMA nseq(__anonymous_0(fun_param,COMMA)) [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## fun_param
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 49, spurious reduction of production type_name -> Ident
## In state 71, spurious reduction of production no_par_type_expr -> type_name
## In state 102, spurious reduction of production core_type_no_string -> no_par_type_expr
## In state 112, spurious reduction of production core_type -> core_type_no_string
## In state 113, spurious reduction of production type_expr -> core_type
## In state 127, spurious reduction of production type_annotation(type_expr) -> COLON type_expr
## In state 303, spurious reduction of production fun_param -> param_pattern type_annotation(type_expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR Ident COMMA ZWSP
##
## Ends in an error in state: 313.
##
## nsepseq(fun_param,COMMA) -> fun_param COMMA . nsepseq(fun_param,COMMA) [ RPAR PARAMS ]
## nseq(__anonymous_0(fun_param,COMMA)) -> fun_param COMMA . [ RPAR PARAMS ]
## nseq(__anonymous_0(fun_param,COMMA)) -> fun_param COMMA . nseq(__anonymous_0(fun_param,COMMA)) [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## fun_param COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function LT GT XOR
##
## Ends in an error in state: 316.
##
## function_expr -> Function type_vars . fun_par_params option(ret_type) braces(statements) [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## Function type_vars
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 15, spurious reduction of production chevrons(sep_or_term(type_var,COMMA)) -> LT sep_or_term(type_var,COMMA) GT
## In state 180, spurious reduction of production type_vars -> chevrons(sep_or_term(type_var,COMMA))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function LT GT LPAR PARAMS RPAR ZWSP
##
## Ends in an error in state: 318.
##
## function_expr -> Function type_vars fun_par_params . option(ret_type) braces(statements) [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## Function type_vars fun_par_params
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR PARAMS RPAR COLON ZWSP
##
## Ends in an error in state: 319.
##
## type_annotation(__anonymous_6) -> COLON . option(ES6FUN) no_par_type_expr [ LBRACE ARROW ]
##
## The known suffix of the stack is as follows:
## COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR PARAMS RPAR COLON ES6FUN ZWSP
##
## Ends in an error in state: 321.
##
## type_annotation(__anonymous_6) -> COLON option(ES6FUN) . no_par_type_expr [ LBRACE ARROW ]
##
## The known suffix of the stack is as follows:
## COLON option(ES6FUN)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR PARAMS RPAR COLON LBRACKET ZWSP
##
## Ends in an error in state: 322.
##
## brackets(type_elements) -> LBRACKET . type_elements RBRACKET [ LBRACE ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR PARAMS RPAR COLON Attr ZWSP
##
## Ends in an error in state: 323.
##
## attr_type -> Attr . core_type_no_string [ LBRACE ARROW ]
##
## The known suffix of the stack is as follows:
## Attr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function LT GT LPAR PARAMS RPAR COLON Ident XOR
##
## Ends in an error in state: 327.
##
## function_expr -> Function type_vars fun_par_params option(ret_type) . braces(statements) [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## Function type_vars fun_par_params option(ret_type)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 49, spurious reduction of production type_name -> Ident
## In state 71, spurious reduction of production no_par_type_expr -> type_name
## In state 324, spurious reduction of production type_annotation(__anonymous_6) -> COLON option(ES6FUN) no_par_type_expr
## In state 325, spurious reduction of production ret_type -> type_annotation(__anonymous_6)
## In state 326, spurious reduction of production option(ret_type) -> ret_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function LPAR PARAMS RPAR ZWSP
##
## Ends in an error in state: 329.
##
## function_expr -> Function fun_par_params . option(ret_type) braces(statements) [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## Function fun_par_params
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Function LPAR PARAMS RPAR COLON Ident XOR
##
## Ends in an error in state: 330.
##
## function_expr -> Function fun_par_params option(ret_type) . braces(statements) [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## Function fun_par_params option(ret_type)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 49, spurious reduction of production type_name -> Ident
## In state 71, spurious reduction of production no_par_type_expr -> type_name
## In state 324, spurious reduction of production type_annotation(__anonymous_6) -> COLON option(ES6FUN) no_par_type_expr
## In state 325, spurious reduction of production ret_type -> type_annotation(__anonymous_6)
## In state 326, spurious reduction of production option(ret_type) -> ret_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN ZWSP
##
## Ends in an error in state: 333.
##
## arrow_fun_expr -> ES6FUN . fun_par_params option(ret_type) ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## arrow_fun_expr -> ES6FUN . fun_var_param ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN Ident ZWSP
##
## Ends in an error in state: 336.
##
## arrow_fun_expr -> ES6FUN fun_var_param . ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN fun_var_param
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN Ident ARROW ZWSP
##
## Ends in an error in state: 337.
##
## arrow_fun_expr -> ES6FUN fun_var_param ARROW . fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN fun_var_param ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ContractOf ZWSP
##
## Ends in an error in state: 338.
##
## contract_of_expr -> ContractOf . par(namespace_selection) [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT Function For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## ContractOf
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ContractOf LPAR ZWSP
##
## Ends in an error in state: 339.
##
## par(namespace_selection) -> LPAR . namespace_selection RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT Function For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr As AND ]
## par(namespace_selection) -> LPAR . namespace_selection PARAMS RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT Function For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ContractOf LPAR UIdent ZWSP
##
## Ends in an error in state: 340.
##
## par(namespace_selection) -> LPAR namespace_selection . RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT Function For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr As AND ]
## par(namespace_selection) -> LPAR namespace_selection . PARAMS RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT Function For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LPAR namespace_selection
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 33, spurious reduction of production namespace_selection -> namespace_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ContractOf LPAR UIdent PARAMS ZWSP
##
## Ends in an error in state: 342.
##
## par(namespace_selection) -> LPAR namespace_selection PARAMS . RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT Function For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LPAR namespace_selection PARAMS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: BIT_NOT ZWSP
##
## Ends in an error in state: 346.
##
## neg_expr -> BIT_NOT . app_expr_level [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT Function For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## BIT_NOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident LBRACKET ZWSP
##
## Ends in an error in state: 354.
##
## brackets(Int) -> LBRACKET . Int RBRACKET [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM_EQ REM RBRACKET RBRACE QMARK PLUS_EQ PLUS PARAMS OR Namespace NE MULT_EQ MINUS_EQ MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT Function For Export Else EQ2 EQ EOF Directive Default DOT DIV_EQ Continue Const Case COMMA COLON Break BIT_XOR_EQ BIT_XOR BIT_SR_EQ BIT_SR BIT_SL_EQ BIT_SL BIT_OR_EQ BIT_AND_EQ BIT_AND Attr As AND ]
## brackets(String) -> LBRACKET . String RBRACKET [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM_EQ REM RBRACKET RBRACE QMARK PLUS_EQ PLUS PARAMS OR Namespace NE MULT_EQ MINUS_EQ MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT Function For Export Else EQ2 EQ EOF Directive Default DOT DIV_EQ Continue Const Case COMMA COLON Break BIT_XOR_EQ BIT_XOR BIT_SR_EQ BIT_SR BIT_SL_EQ BIT_SL BIT_OR_EQ BIT_AND_EQ BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident LBRACKET String ZWSP
##
## Ends in an error in state: 355.
##
## brackets(String) -> LBRACKET String . RBRACKET [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM_EQ REM RBRACKET RBRACE QMARK PLUS_EQ PLUS PARAMS OR Namespace NE MULT_EQ MINUS_EQ MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT Function For Export Else EQ2 EQ EOF Directive Default DOT DIV_EQ Continue Const Case COMMA COLON Break BIT_XOR_EQ BIT_XOR BIT_SR_EQ BIT_SR BIT_SL_EQ BIT_SL BIT_OR_EQ BIT_AND_EQ BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LBRACKET String
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident LBRACKET Int ZWSP
##
## Ends in an error in state: 357.
##
## brackets(Int) -> LBRACKET Int . RBRACKET [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM_EQ REM RBRACKET RBRACE QMARK PLUS_EQ PLUS PARAMS OR Namespace NE MULT_EQ MINUS_EQ MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT Function For Export Else EQ2 EQ EOF Directive Default DOT DIV_EQ Continue Const Case COMMA COLON Break BIT_XOR_EQ BIT_XOR BIT_SR_EQ BIT_SR BIT_SL_EQ BIT_SL BIT_OR_EQ BIT_AND_EQ BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LBRACKET Int
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident DOT ZWSP
##
## Ends in an error in state: 359.
##
## selection -> DOT . property_name [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM_EQ REM RBRACKET RBRACE QMARK PLUS_EQ PLUS PARAMS OR Namespace NE MULT_EQ MINUS_EQ MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT Function For Export Else EQ2 EQ EOF Directive Default DOT DIV_EQ Continue Const Case COMMA COLON Break BIT_XOR_EQ BIT_XOR BIT_SR_EQ BIT_SR BIT_SL_EQ BIT_SL BIT_OR_EQ BIT_AND_EQ BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent DOT ZWSP
##
## Ends in an error in state: 370.
##
## namespace_path(selected_expr) -> namespace_name DOT . namespace_path(selected_expr) [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACE Interface Import If GT Function For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr As AND ]
## namespace_path(selected_expr) -> namespace_name DOT . selected_expr [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACE Interface Import If GT Function For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## namespace_name DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Switch LPAR UIdent RPAR LBRACE Case UIdent ZWSP
##
## Ends in an error in state: 380.
##
## app_expr -> lambda . arguments [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT Function For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## lambda
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 189, spurious reduction of production ctor -> UIdent
## In state 1076, spurious reduction of production core_expr -> ctor
## In state 1077, spurious reduction of production lambda -> core_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent LPAR ZWSP
##
## Ends in an error in state: 381.
##
## par(ioption(nsepseq(argument,COMMA))) -> LPAR . RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT Function For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr As AND ]
## par(ioption(nsepseq(argument,COMMA))) -> LPAR . nsepseq(argument,COMMA) RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT Function For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr As AND ]
## par(ioption(nsepseq(argument,COMMA))) -> LPAR . PARAMS RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT Function For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr As AND ]
## par(ioption(nsepseq(argument,COMMA))) -> LPAR . nsepseq(argument,COMMA) PARAMS RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT Function For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent LPAR PARAMS ZWSP
##
## Ends in an error in state: 383.
##
## par(ioption(nsepseq(argument,COMMA))) -> LPAR PARAMS . RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT Function For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LPAR PARAMS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Attr ZWSP
##
## Ends in an error in state: 385.
##
## expr -> Attr . expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## Attr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident REM_EQ ZWSP
##
## Ends in an error in state: 387.
##
## bin_op(var_path,REM_EQ,expr) -> var_path REM_EQ . expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## var_path REM_EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LT GT XOR
##
## Ends in an error in state: 390.
##
## arrow_fun_expr -> type_vars . ES6FUN fun_par_params option(ret_type) ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## arrow_fun_expr -> type_vars . ES6FUN fun_var_param ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## type_vars
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 15, spurious reduction of production chevrons(sep_or_term(type_var,COMMA)) -> LT sep_or_term(type_var,COMMA) GT
## In state 180, spurious reduction of production type_vars -> chevrons(sep_or_term(type_var,COMMA))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LT GT ES6FUN ZWSP
##
## Ends in an error in state: 391.
##
## arrow_fun_expr -> type_vars ES6FUN . fun_par_params option(ret_type) ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
## arrow_fun_expr -> type_vars ES6FUN . fun_var_param ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## type_vars ES6FUN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LT GT ES6FUN Ident ZWSP
##
## Ends in an error in state: 392.
##
## arrow_fun_expr -> type_vars ES6FUN fun_var_param . ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## type_vars ES6FUN fun_var_param
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LT GT ES6FUN Ident ARROW ZWSP
##
## Ends in an error in state: 393.
##
## arrow_fun_expr -> type_vars ES6FUN fun_var_param ARROW . fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## type_vars ES6FUN fun_var_param ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent TIMES ZWSP
##
## Ends in an error in state: 403.
##
## bin_op(mult_expr_level,TIMES,unary_expr_level) -> mult_expr_level TIMES . unary_expr_level [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT Function For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## mult_expr_level TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent SLASH ZWSP
##
## Ends in an error in state: 417.
##
## bin_op(mult_expr_level,SLASH,unary_expr_level) -> mult_expr_level SLASH . unary_expr_level [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT Function For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## mult_expr_level SLASH
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent REM ZWSP
##
## Ends in an error in state: 419.
##
## bin_op(mult_expr_level,REM,unary_expr_level) -> mult_expr_level REM . unary_expr_level [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT Function For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## mult_expr_level REM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent XOR ZWSP
##
## Ends in an error in state: 427.
##
## bin_op(disj_expr_level,XOR,conj_expr_level) -> disj_expr_level XOR . conj_expr_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PARAMS OR Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level XOR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent BIT_AND ZWSP
##
## Ends in an error in state: 429.
##
## bin_op(conj_expr_level,BIT_AND,bit_shift_level) -> conj_expr_level BIT_AND . bit_shift_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PARAMS OR Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## conj_expr_level BIT_AND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent LT ZWSP
##
## Ends in an error in state: 431.
##
## bin_op(comp_expr_level,LT,add_expr_level) -> comp_expr_level LT . add_expr_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PARAMS OR Namespace Let LT LE LBRACE Interface Import If GT Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## comp_expr_level LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent PLUS ZWSP
##
## Ends in an error in state: 438.
##
## bin_op(add_expr_level,PLUS,mult_expr_level) -> add_expr_level PLUS . mult_expr_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT Function For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## add_expr_level PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent MINUS ZWSP
##
## Ends in an error in state: 440.
##
## bin_op(add_expr_level,MINUS,mult_expr_level) -> add_expr_level MINUS . mult_expr_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LE LBRACE Interface Import If GT Function For Export Else EQ2 EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## add_expr_level MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent LE ZWSP
##
## Ends in an error in state: 442.
##
## bin_op(comp_expr_level,LE,add_expr_level) -> comp_expr_level LE . add_expr_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PARAMS OR Namespace Let LT LE LBRACE Interface Import If GT Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## comp_expr_level LE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent GT XOR
##
## Ends in an error in state: 447.
##
## bin_op(comp_expr_level,gt,add_expr_level) -> comp_expr_level gt . add_expr_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PARAMS OR Namespace Let LT LE LBRACE Interface Import If GT Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## comp_expr_level gt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 444, spurious reduction of production gt -> GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent GT ZWSP EQ ZWSP
##
## Ends in an error in state: 449.
##
## bin_op(comp_expr_level,ge,add_expr_level) -> comp_expr_level ge . add_expr_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PARAMS OR Namespace Let LT LE LBRACE Interface Import If GT Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## comp_expr_level ge
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent BIT_SR ZWSP
##
## Ends in an error in state: 452.
##
## bin_op(bit_shift_level,BIT_SR,comp_expr_level) -> bit_shift_level BIT_SR . comp_expr_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PARAMS OR Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## bit_shift_level BIT_SR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent NE ZWSP
##
## Ends in an error in state: 461.
##
## bin_op(add_expr_level,NE,eq_expr_level) -> add_expr_level NE . eq_expr_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PARAMS OR Namespace Let LT LE LBRACE Interface Import If GT Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## add_expr_level NE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent EQ2 ZWSP
##
## Ends in an error in state: 463.
##
## bin_op(add_expr_level,EQ2,eq_expr_level) -> add_expr_level EQ2 . eq_expr_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PARAMS OR Namespace Let LT LE LBRACE Interface Import If GT Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## add_expr_level EQ2
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent BIT_SL ZWSP
##
## Ends in an error in state: 465.
##
## bin_op(bit_shift_level,BIT_SL,comp_expr_level) -> bit_shift_level BIT_SL . comp_expr_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PARAMS OR Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## bit_shift_level BIT_SL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent AND ZWSP
##
## Ends in an error in state: 469.
##
## bin_op(conj_expr_level,AND,bit_shift_level) -> conj_expr_level AND . bit_shift_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PARAMS OR Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR BIT_AND Attr AND ]
##
## The known suffix of the stack is as follows:
## conj_expr_level AND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent VBAR ZWSP
##
## Ends in an error in state: 474.
##
## bin_op(disj_expr_level,VBAR,conj_expr_level) -> disj_expr_level VBAR . conj_expr_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PARAMS OR Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent QMARK ZWSP
##
## Ends in an error in state: 476.
##
## ternary_expr(disj_expr_level,expr) -> disj_expr_level QMARK . expr COLON expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level QMARK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent QMARK UIdent While
##
## Ends in an error in state: 482.
##
## ternary_expr(disj_expr_level,expr) -> disj_expr_level QMARK expr . COLON expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level QMARK expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 189, spurious reduction of production ctor -> UIdent
## In state 408, spurious reduction of production core_expr -> ctor
## In state 409, spurious reduction of production app_expr_level -> core_expr
## In state 505, spurious reduction of production unary_expr_level -> app_expr_level
## In state 388, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 402, spurious reduction of production add_expr_level -> mult_expr_level
## In state 460, spurious reduction of production eq_expr_level -> add_expr_level
## In state 425, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 430, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 471, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 485, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 426, spurious reduction of production non_object_expr -> disj_expr_level
## In state 480, spurious reduction of production no_attr_expr -> non_object_expr
## In state 481, spurious reduction of production expr -> no_attr_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent QMARK UIdent COLON ZWSP
##
## Ends in an error in state: 483.
##
## ternary_expr(disj_expr_level,expr) -> disj_expr_level QMARK expr COLON . expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level QMARK expr COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent As ZWSP
##
## Ends in an error in state: 506.
##
## typed_expr -> app_expr_level As . type_expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## app_expr_level As
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent OR ZWSP
##
## Ends in an error in state: 508.
##
## bin_op(disj_expr_level,OR,conj_expr_level) -> disj_expr_level OR . conj_expr_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PARAMS OR Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level OR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent BIT_XOR ZWSP
##
## Ends in an error in state: 510.
##
## bin_op(disj_expr_level,BIT_XOR,conj_expr_level) -> disj_expr_level BIT_XOR . conj_expr_level [ XOR While When VBAR Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE QMARK PARAMS OR Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break BIT_XOR Attr ]
##
## The known suffix of the stack is as follows:
## disj_expr_level BIT_XOR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LT GT ES6FUN LPAR PARAMS RPAR ZWSP
##
## Ends in an error in state: 513.
##
## arrow_fun_expr -> type_vars ES6FUN fun_par_params . option(ret_type) ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## type_vars ES6FUN fun_par_params
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LT GT ES6FUN LPAR PARAMS RPAR COLON Ident XOR
##
## Ends in an error in state: 514.
##
## arrow_fun_expr -> type_vars ES6FUN fun_par_params option(ret_type) . ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## type_vars ES6FUN fun_par_params option(ret_type)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 49, spurious reduction of production type_name -> Ident
## In state 71, spurious reduction of production no_par_type_expr -> type_name
## In state 324, spurious reduction of production type_annotation(__anonymous_6) -> COLON option(ES6FUN) no_par_type_expr
## In state 325, spurious reduction of production ret_type -> type_annotation(__anonymous_6)
## In state 326, spurious reduction of production option(ret_type) -> ret_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LT GT ES6FUN LPAR PARAMS RPAR ARROW ZWSP
##
## Ends in an error in state: 515.
##
## arrow_fun_expr -> type_vars ES6FUN fun_par_params option(ret_type) ARROW . fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## type_vars ES6FUN fun_par_params option(ret_type) ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident PLUS_EQ ZWSP
##
## Ends in an error in state: 518.
##
## bin_op(var_path,PLUS_EQ,expr) -> var_path PLUS_EQ . expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## var_path PLUS_EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident MULT_EQ ZWSP
##
## Ends in an error in state: 520.
##
## bin_op(var_path,MULT_EQ,expr) -> var_path MULT_EQ . expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## var_path MULT_EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident MINUS_EQ ZWSP
##
## Ends in an error in state: 522.
##
## bin_op(var_path,MINUS_EQ,expr) -> var_path MINUS_EQ . expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## var_path MINUS_EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident EQ ZWSP
##
## Ends in an error in state: 524.
##
## bin_op(var_path,EQ,expr) -> var_path EQ . expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## var_path EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident DIV_EQ ZWSP
##
## Ends in an error in state: 526.
##
## bin_op(var_path,DIV_EQ,expr) -> var_path DIV_EQ . expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## var_path DIV_EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident BIT_XOR_EQ ZWSP
##
## Ends in an error in state: 528.
##
## bin_op(var_path,BIT_XOR_EQ,expr) -> var_path BIT_XOR_EQ . expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## var_path BIT_XOR_EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident BIT_SR_EQ ZWSP
##
## Ends in an error in state: 530.
##
## bin_op(var_path,BIT_SR_EQ,expr) -> var_path BIT_SR_EQ . expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## var_path BIT_SR_EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident BIT_SL_EQ ZWSP
##
## Ends in an error in state: 532.
##
## bin_op(var_path,BIT_SL_EQ,expr) -> var_path BIT_SL_EQ . expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## var_path BIT_SL_EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident BIT_OR_EQ ZWSP
##
## Ends in an error in state: 534.
##
## bin_op(var_path,BIT_OR_EQ,expr) -> var_path BIT_OR_EQ . expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## var_path BIT_OR_EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Ident BIT_AND_EQ ZWSP
##
## Ends in an error in state: 536.
##
## bin_op(var_path,BIT_AND_EQ,expr) -> var_path BIT_AND_EQ . expr [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## var_path BIT_AND_EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent LPAR UIdent PARAMS ZWSP
##
## Ends in an error in state: 541.
##
## par(ioption(nsepseq(argument,COMMA))) -> LPAR nsepseq(argument,COMMA) PARAMS . RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT Function For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LPAR nsepseq(argument,COMMA) PARAMS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent LPAR UIdent While
##
## Ends in an error in state: 544.
##
## nsepseq(argument,COMMA) -> argument . [ RPAR PARAMS ]
## nsepseq(argument,COMMA) -> argument . COMMA nsepseq(argument,COMMA) [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## argument
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 189, spurious reduction of production ctor -> UIdent
## In state 408, spurious reduction of production core_expr -> ctor
## In state 409, spurious reduction of production app_expr_level -> core_expr
## In state 505, spurious reduction of production unary_expr_level -> app_expr_level
## In state 388, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 402, spurious reduction of production add_expr_level -> mult_expr_level
## In state 460, spurious reduction of production eq_expr_level -> add_expr_level
## In state 425, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 430, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 471, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 485, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 426, spurious reduction of production non_object_expr -> disj_expr_level
## In state 480, spurious reduction of production no_attr_expr -> non_object_expr
## In state 481, spurious reduction of production expr -> no_attr_expr
## In state 543, spurious reduction of production argument -> expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: UIdent LPAR UIdent COMMA ZWSP
##
## Ends in an error in state: 545.
##
## nsepseq(argument,COMMA) -> argument COMMA . nsepseq(argument,COMMA) [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## argument COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR PARAMS RPAR ZWSP
##
## Ends in an error in state: 551.
##
## arrow_fun_expr -> ES6FUN fun_par_params . option(ret_type) ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN fun_par_params
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR PARAMS RPAR COLON Ident XOR
##
## Ends in an error in state: 552.
##
## arrow_fun_expr -> ES6FUN fun_par_params option(ret_type) . ARROW fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN fun_par_params option(ret_type)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 49, spurious reduction of production type_name -> Ident
## In state 71, spurious reduction of production no_par_type_expr -> type_name
## In state 324, spurious reduction of production type_annotation(__anonymous_6) -> COLON option(ES6FUN) no_par_type_expr
## In state 325, spurious reduction of production ret_type -> type_annotation(__anonymous_6)
## In state 326, spurious reduction of production option(ret_type) -> ret_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ES6FUN LPAR PARAMS RPAR ARROW ZWSP
##
## Ends in an error in state: 553.
##
## arrow_fun_expr -> ES6FUN fun_par_params option(ret_type) ARROW . fun_body [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## ES6FUN fun_par_params option(ret_type) ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS UIdent While
##
## Ends in an error in state: 555.
##
## update_expr -> ELLIPSIS expr . property_sep updates [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ELLIPSIS expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 189, spurious reduction of production ctor -> UIdent
## In state 408, spurious reduction of production core_expr -> ctor
## In state 409, spurious reduction of production app_expr_level -> core_expr
## In state 505, spurious reduction of production unary_expr_level -> app_expr_level
## In state 388, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 402, spurious reduction of production add_expr_level -> mult_expr_level
## In state 460, spurious reduction of production eq_expr_level -> add_expr_level
## In state 425, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 430, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 471, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 485, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 426, spurious reduction of production non_object_expr -> disj_expr_level
## In state 480, spurious reduction of production no_attr_expr -> non_object_expr
## In state 481, spurious reduction of production expr -> no_attr_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE ELLIPSIS UIdent COMMA ZWSP
##
## Ends in an error in state: 556.
##
## update_expr -> ELLIPSIS expr property_sep . updates [ RBRACE ]
##
## The known suffix of the stack is as follows:
## ELLIPSIS expr property_sep
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Attr ZWSP
##
## Ends in an error in state: 557.
##
## property(expr) -> Attr . property(expr) [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Attr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident ZWSP
##
## Ends in an error in state: 558.
##
## property(expr) -> property_id . [ SEMI RBRACE COMMA ]
## property(expr) -> property_id . COLON expr [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## property_id
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COLON ZWSP
##
## Ends in an error in state: 559.
##
## property(expr) -> property_id COLON . expr [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## property_id COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COLON UIdent While
##
## Ends in an error in state: 564.
##
## nsepseq(property(expr),property_sep) -> property(expr) . [ RBRACE ]
## nsepseq(property(expr),property_sep) -> property(expr) . property_sep nsepseq(property(expr),property_sep) [ RBRACE ]
## nseq(__anonymous_0(property(expr),property_sep)) -> property(expr) . property_sep [ RBRACE ]
## nseq(__anonymous_0(property(expr),property_sep)) -> property(expr) . property_sep nseq(__anonymous_0(property(expr),property_sep)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## property(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 189, spurious reduction of production ctor -> UIdent
## In state 408, spurious reduction of production core_expr -> ctor
## In state 409, spurious reduction of production app_expr_level -> core_expr
## In state 505, spurious reduction of production unary_expr_level -> app_expr_level
## In state 388, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 402, spurious reduction of production add_expr_level -> mult_expr_level
## In state 460, spurious reduction of production eq_expr_level -> add_expr_level
## In state 425, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 430, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 471, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 485, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 426, spurious reduction of production non_object_expr -> disj_expr_level
## In state 480, spurious reduction of production no_attr_expr -> non_object_expr
## In state 481, spurious reduction of production expr -> no_attr_expr
## In state 560, spurious reduction of production property(expr) -> property_id COLON expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACE Ident COMMA ZWSP
##
## Ends in an error in state: 565.
##
## nsepseq(property(expr),property_sep) -> property(expr) property_sep . nsepseq(property(expr),property_sep) [ RBRACE ]
## nseq(__anonymous_0(property(expr),property_sep)) -> property(expr) property_sep . [ RBRACE ]
## nseq(__anonymous_0(property(expr),property_sep)) -> property(expr) property_sep . nseq(__anonymous_0(property(expr),property_sep)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## property(expr) property_sep
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET ELLIPSIS ZWSP
##
## Ends in an error in state: 575.
##
## component(expr) -> ELLIPSIS . expr [ RBRACKET COMMA ]
##
## The known suffix of the stack is as follows:
## ELLIPSIS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET UIdent While
##
## Ends in an error in state: 583.
##
## nsepseq(component(expr),COMMA) -> component(expr) . [ RBRACKET ]
## nsepseq(component(expr),COMMA) -> component(expr) . COMMA nsepseq(component(expr),COMMA) [ RBRACKET ]
## nseq(__anonymous_0(component(expr),COMMA)) -> component(expr) . COMMA [ RBRACKET ]
## nseq(__anonymous_0(component(expr),COMMA)) -> component(expr) . COMMA nseq(__anonymous_0(component(expr),COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## component(expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 189, spurious reduction of production ctor -> UIdent
## In state 408, spurious reduction of production core_expr -> ctor
## In state 409, spurious reduction of production app_expr_level -> core_expr
## In state 505, spurious reduction of production unary_expr_level -> app_expr_level
## In state 388, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 402, spurious reduction of production add_expr_level -> mult_expr_level
## In state 460, spurious reduction of production eq_expr_level -> add_expr_level
## In state 425, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 430, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 471, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 485, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 426, spurious reduction of production non_object_expr -> disj_expr_level
## In state 480, spurious reduction of production no_attr_expr -> non_object_expr
## In state 481, spurious reduction of production expr -> no_attr_expr
## In state 582, spurious reduction of production component(expr) -> expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LBRACKET UIdent COMMA ZWSP
##
## Ends in an error in state: 584.
##
## nsepseq(component(expr),COMMA) -> component(expr) COMMA . nsepseq(component(expr),COMMA) [ RBRACKET ]
## nseq(__anonymous_0(component(expr),COMMA)) -> component(expr) COMMA . [ RBRACKET ]
## nseq(__anonymous_0(component(expr),COMMA)) -> component(expr) COMMA . nseq(__anonymous_0(component(expr),COMMA)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## component(expr) COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Match LPAR UIdent RPAR LBRACE Default ZWSP
##
## Ends in an error in state: 589.
##
## match_default -> Default . COLON expr [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Default
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Match LPAR UIdent RPAR LBRACE Default COLON ZWSP
##
## Ends in an error in state: 590.
##
## match_default -> Default COLON . expr [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Default COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Match LPAR UIdent RPAR LBRACE Default COLON UIdent While
##
## Ends in an error in state: 595.
##
## braces(match_clauses) -> LBRACE match_clauses . RBRACE [ While When Type Switch SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PARAMS Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE match_clauses
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 189, spurious reduction of production ctor -> UIdent
## In state 408, spurious reduction of production core_expr -> ctor
## In state 409, spurious reduction of production app_expr_level -> core_expr
## In state 505, spurious reduction of production unary_expr_level -> app_expr_level
## In state 388, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 402, spurious reduction of production add_expr_level -> mult_expr_level
## In state 460, spurious reduction of production eq_expr_level -> add_expr_level
## In state 425, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 430, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 471, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 485, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 426, spurious reduction of production non_object_expr -> disj_expr_level
## In state 480, spurious reduction of production no_attr_expr -> non_object_expr
## In state 481, spurious reduction of production expr -> no_attr_expr
## In state 591, spurious reduction of production match_default -> Default COLON expr
## In state 594, spurious reduction of production match_clauses -> match_default
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: Match LPAR UIdent RPAR LBRACE When LPAR Bytes RPAR COLON UIdent While
##
## Ends in an error in state: 597.
##
## nseq(match_clause) -> match_clause . [ RBRACE Default ]
## nseq(match_clause) -> match_clause . nseq(match_clause) [ RBRACE Default ]
##
## The known suffix of the stack is as follows:
## match_clause
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 189, spurious reduction of production ctor -> UIdent
## In state 408, spurious reduction of production core_expr -> ctor
## In state 409, spurious reduction of production app_expr_level -> core_expr
## In state 505, spurious reduction of production unary_expr_level -> app_expr_level
## In state 388, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 402, spurious reduction of production add_expr_level -> mult_expr_level
## In state 460, spurious reduction of production eq_expr_level -> add_expr_level
## In state 425, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 430, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 471, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 485, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 426, spurious reduction of production non_object_expr -> disj_expr_level
## In state 480, spurious reduction of production no_attr_expr -> non_object_expr
## In state 481, spurious reduction of production expr -> no_attr_expr
## In state 588, spurious reduction of production match_clause -> When par(pattern) COLON expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR UIdent While
##
## Ends in an error in state: 600.
##
## par(expr) -> LPAR expr . RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT Function For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr As AND ]
## par(expr) -> LPAR expr . PARAMS RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT Function For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LPAR expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 189, spurious reduction of production ctor -> UIdent
## In state 408, spurious reduction of production core_expr -> ctor
## In state 409, spurious reduction of production app_expr_level -> core_expr
## In state 505, spurious reduction of production unary_expr_level -> app_expr_level
## In state 388, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 402, spurious reduction of production add_expr_level -> mult_expr_level
## In state 460, spurious reduction of production eq_expr_level -> add_expr_level
## In state 425, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 430, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 471, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 485, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 426, spurious reduction of production non_object_expr -> disj_expr_level
## In state 480, spurious reduction of production no_attr_expr -> non_object_expr
## In state 481, spurious reduction of production expr -> no_attr_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: LPAR UIdent PARAMS ZWSP
##
## Ends in an error in state: 602.
##
## par(expr) -> LPAR expr PARAMS . RPAR [ XOR While When VBAR Type TIMES Switch SLASH SEMI_ELSE SEMI Return RPAR REM RBRACKET RBRACE QMARK PLUS PARAMS OR Namespace NE MINUS Let LT LPAR LE LBRACKET LBRACE Interface Import If GT Function For Export Else EQ2 EOF Directive Default DOT Continue Const Case COMMA COLON Break BIT_XOR BIT_SR BIT_SL BIT_AND Attr As AND ]
##
## The known suffix of the stack is as follows:
## LPAR expr PARAMS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE While LPAR UIdent While
##
## Ends in an error in state: 605.
##
## par(while_cond) -> LPAR while_cond . RPAR [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## par(while_cond) -> LPAR while_cond . PARAMS RPAR [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LPAR while_cond
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 189, spurious reduction of production ctor -> UIdent
## In state 408, spurious reduction of production core_expr -> ctor
## In state 409, spurious reduction of production app_expr_level -> core_expr
## In state 505, spurious reduction of production unary_expr_level -> app_expr_level
## In state 388, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 402, spurious reduction of production add_expr_level -> mult_expr_level
## In state 460, spurious reduction of production eq_expr_level -> add_expr_level
## In state 425, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 430, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 471, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 485, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 426, spurious reduction of production non_object_expr -> disj_expr_level
## In state 480, spurious reduction of production no_attr_expr -> non_object_expr
## In state 481, spurious reduction of production expr -> no_attr_expr
## In state 609, spurious reduction of production while_cond -> expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE While LPAR UIdent PARAMS ZWSP
##
## Ends in an error in state: 607.
##
## par(while_cond) -> LPAR while_cond PARAMS . RPAR [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LPAR while_cond PARAMS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE While LPAR UIdent RPAR ZWSP
##
## Ends in an error in state: 610.
##
## while_stmt(poly_stmt) -> While par(while_cond) . poly_stmt [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## while_stmt(statement) -> While par(while_cond) . statement [ SEMI RBRACE Default Case ]
## while_stmt(stmt_ending_with_expr) -> While par(while_cond) . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## While par(while_cond)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Switch ZWSP
##
## Ends in an error in state: 611.
##
## switch_stmt -> Switch . par(switch_subject) braces(cases) [ While Verbatim UIdent Type True Switch String SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Switch
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Switch LPAR ZWSP
##
## Ends in an error in state: 612.
##
## par(switch_subject) -> LPAR . switch_subject RPAR [ LBRACE ]
## par(switch_subject) -> LPAR . switch_subject PARAMS RPAR [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Switch LPAR UIdent While
##
## Ends in an error in state: 613.
##
## par(switch_subject) -> LPAR switch_subject . RPAR [ LBRACE ]
## par(switch_subject) -> LPAR switch_subject . PARAMS RPAR [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAR switch_subject
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 189, spurious reduction of production ctor -> UIdent
## In state 408, spurious reduction of production core_expr -> ctor
## In state 409, spurious reduction of production app_expr_level -> core_expr
## In state 505, spurious reduction of production unary_expr_level -> app_expr_level
## In state 388, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 402, spurious reduction of production add_expr_level -> mult_expr_level
## In state 460, spurious reduction of production eq_expr_level -> add_expr_level
## In state 425, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 430, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 471, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 485, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 426, spurious reduction of production non_object_expr -> disj_expr_level
## In state 480, spurious reduction of production no_attr_expr -> non_object_expr
## In state 481, spurious reduction of production expr -> no_attr_expr
## In state 617, spurious reduction of production switch_subject -> expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Switch LPAR UIdent PARAMS ZWSP
##
## Ends in an error in state: 615.
##
## par(switch_subject) -> LPAR switch_subject PARAMS . RPAR [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAR switch_subject PARAMS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Switch LPAR UIdent RPAR ZWSP
##
## Ends in an error in state: 618.
##
## switch_stmt -> Switch par(switch_subject) . braces(cases) [ While Verbatim UIdent Type True Switch String SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Switch par(switch_subject)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Switch LPAR UIdent RPAR LBRACE ZWSP
##
## Ends in an error in state: 619.
##
## braces(cases) -> LBRACE . cases RBRACE [ While Verbatim UIdent Type True Switch String SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Switch LPAR UIdent RPAR LBRACE Default ZWSP
##
## Ends in an error in state: 620.
##
## switch_default -> Default . COLON [ RBRACE ]
## switch_default -> Default . COLON statements [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Default
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Switch LPAR UIdent RPAR LBRACE Default COLON ZWSP
##
## Ends in an error in state: 621.
##
## switch_default -> Default COLON . [ RBRACE ]
## switch_default -> Default COLON . statements [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Default COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Let ZWSP
##
## Ends in an error in state: 624.
##
## value_decl -> Let . bindings [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const Bytes EQ UIdent COMMA ZWSP
##
## Ends in an error in state: 626.
##
## nsepseq(val_binding,COMMA) -> val_binding COMMA . nsepseq(val_binding,COMMA) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## val_binding COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const Bytes ZWSP
##
## Ends in an error in state: 627.
##
## val_binding -> pattern . option(binding_type) EQ expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA Break Attr ]
##
## The known suffix of the stack is as follows:
## pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const Bytes COLON ZWSP
##
## Ends in an error in state: 628.
##
## type_annotation(__anonymous_2) -> COLON . type_expr [ EQ ]
## type_annotation(__anonymous_2) -> COLON . type_vars type_expr [ EQ ]
##
## The known suffix of the stack is as follows:
## COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const Bytes COLON LT GT XOR
##
## Ends in an error in state: 629.
##
## type_annotation(__anonymous_2) -> COLON type_vars . type_expr [ EQ ]
##
## The known suffix of the stack is as follows:
## COLON type_vars
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 15, spurious reduction of production chevrons(sep_or_term(type_var,COMMA)) -> LT sep_or_term(type_var,COMMA) GT
## In state 180, spurious reduction of production type_vars -> chevrons(sep_or_term(type_var,COMMA))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const Bytes COLON Ident XOR
##
## Ends in an error in state: 633.
##
## val_binding -> pattern option(binding_type) . EQ expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA Break Attr ]
##
## The known suffix of the stack is as follows:
## pattern option(binding_type)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 49, spurious reduction of production type_name -> Ident
## In state 71, spurious reduction of production no_par_type_expr -> type_name
## In state 102, spurious reduction of production core_type_no_string -> no_par_type_expr
## In state 112, spurious reduction of production core_type -> core_type_no_string
## In state 113, spurious reduction of production type_expr -> core_type
## In state 631, spurious reduction of production type_annotation(__anonymous_2) -> COLON type_expr
## In state 632, spurious reduction of production binding_type -> type_annotation(__anonymous_2)
## In state 636, spurious reduction of production option(binding_type) -> binding_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const Bytes EQ ZWSP
##
## Ends in an error in state: 634.
##
## val_binding -> pattern option(binding_type) EQ . expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case COMMA Break Attr ]
##
## The known suffix of the stack is as follows:
## pattern option(binding_type) EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Interface ZWSP
##
## Ends in an error in state: 640.
##
## interface_decl -> Interface . intf_name intf_body [ While Verbatim UIdent Type True Switch String SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF Directive Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Interface
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Interface UIdent ZWSP
##
## Ends in an error in state: 642.
##
## interface_decl -> Interface intf_name . intf_body [ While Verbatim UIdent Type True Switch String SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF Directive Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Interface intf_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Interface UIdent LBRACE ZWSP
##
## Ends in an error in state: 643.
##
## braces(intf_entries) -> LBRACE . intf_entries RBRACE [ While Verbatim UIdent Type True Switch String SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF Directive Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Interface UIdent LBRACE Type ZWSP
##
## Ends in an error in state: 644.
##
## intf_type -> Type . type_name EQ type_expr [ SEMI RBRACE ]
## intf_type -> Type . type_name [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Interface UIdent LBRACE Type Ident ZWSP
##
## Ends in an error in state: 645.
##
## intf_type -> Type type_name . EQ type_expr [ SEMI RBRACE ]
## intf_type -> Type type_name . [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Type type_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Interface UIdent LBRACE Type Ident EQ ZWSP
##
## Ends in an error in state: 646.
##
## intf_type -> Type type_name EQ . type_expr [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Type type_name EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Interface UIdent LBRACE Const ZWSP
##
## Ends in an error in state: 648.
##
## intf_const -> Const . Ident type_annotation(type_expr) [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Const
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Interface UIdent LBRACE Const Ident ZWSP
##
## Ends in an error in state: 649.
##
## intf_const -> Const Ident . type_annotation(type_expr) [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Const Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Interface UIdent LBRACE Attr ZWSP
##
## Ends in an error in state: 651.
##
## intf_entry -> Attr . intf_entry [ SEMI RBRACE ]
##
## The known suffix of the stack is as follows:
## Attr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Interface UIdent LBRACE Const Ident COLON Ident XOR
##
## Ends in an error in state: 659.
##
## nsepseq(intf_entry,SEMI) -> intf_entry . [ RBRACE ]
## nsepseq(intf_entry,SEMI) -> intf_entry . SEMI nsepseq(intf_entry,SEMI) [ RBRACE ]
## nseq(__anonymous_0(intf_entry,SEMI)) -> intf_entry . SEMI [ RBRACE ]
## nseq(__anonymous_0(intf_entry,SEMI)) -> intf_entry . SEMI nseq(__anonymous_0(intf_entry,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## intf_entry
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 49, spurious reduction of production type_name -> Ident
## In state 71, spurious reduction of production no_par_type_expr -> type_name
## In state 102, spurious reduction of production core_type_no_string -> no_par_type_expr
## In state 112, spurious reduction of production core_type -> core_type_no_string
## In state 113, spurious reduction of production type_expr -> core_type
## In state 127, spurious reduction of production type_annotation(type_expr) -> COLON type_expr
## In state 650, spurious reduction of production intf_const -> Const Ident type_annotation(type_expr)
## In state 654, spurious reduction of production intf_entry -> intf_const
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Interface UIdent LBRACE Type Ident SEMI ZWSP
##
## Ends in an error in state: 660.
##
## nsepseq(intf_entry,SEMI) -> intf_entry SEMI . nsepseq(intf_entry,SEMI) [ RBRACE ]
## nseq(__anonymous_0(intf_entry,SEMI)) -> intf_entry SEMI . [ RBRACE ]
## nseq(__anonymous_0(intf_entry,SEMI)) -> intf_entry SEMI . nseq(__anonymous_0(intf_entry,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## intf_entry SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Import ZWSP
##
## Ends in an error in state: 667.
##
## import_decl -> Import . namespace_name EQ namespace_selection [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case Break Attr ]
## import_decl -> Import . TIMES As namespace_name From file_path [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case Break Attr ]
## import_decl -> Import . braces(sep_or_term(variable,COMMA)) From file_path [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## Import
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Import TIMES ZWSP
##
## Ends in an error in state: 668.
##
## import_decl -> Import TIMES . As namespace_name From file_path [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## Import TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Import TIMES As ZWSP
##
## Ends in an error in state: 669.
##
## import_decl -> Import TIMES As . namespace_name From file_path [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## Import TIMES As
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Import TIMES As UIdent ZWSP
##
## Ends in an error in state: 670.
##
## import_decl -> Import TIMES As namespace_name . From file_path [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## Import TIMES As namespace_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Import TIMES As UIdent From ZWSP
##
## Ends in an error in state: 671.
##
## import_decl -> Import TIMES As namespace_name From . file_path [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## Import TIMES As namespace_name From
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Import LBRACE ZWSP
##
## Ends in an error in state: 674.
##
## braces(sep_or_term(variable,COMMA)) -> LBRACE . sep_or_term(variable,COMMA) RBRACE [ From ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Import LBRACE Ident ZWSP
##
## Ends in an error in state: 675.
##
## nsepseq(variable,COMMA) -> Ident . [ RBRACE ]
## nsepseq(variable,COMMA) -> Ident . COMMA nsepseq(variable,COMMA) [ RBRACE ]
## nseq(__anonymous_0(variable,COMMA)) -> Ident . COMMA [ RBRACE ]
## nseq(__anonymous_0(variable,COMMA)) -> Ident . COMMA nseq(__anonymous_0(variable,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Import LBRACE Ident COMMA ZWSP
##
## Ends in an error in state: 676.
##
## nsepseq(variable,COMMA) -> Ident COMMA . nsepseq(variable,COMMA) [ RBRACE ]
## nseq(__anonymous_0(variable,COMMA)) -> Ident COMMA . [ RBRACE ]
## nseq(__anonymous_0(variable,COMMA)) -> Ident COMMA . nseq(__anonymous_0(variable,COMMA)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Ident COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Import UIdent ZWSP
##
## Ends in an error in state: 684.
##
## import_decl -> Import namespace_name . EQ namespace_selection [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## Import namespace_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Import UIdent EQ ZWSP
##
## Ends in an error in state: 685.
##
## import_decl -> Import namespace_name EQ . namespace_selection [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## Import namespace_name EQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Import LBRACE RBRACE ZWSP
##
## Ends in an error in state: 687.
##
## import_decl -> Import braces(sep_or_term(variable,COMMA)) . From file_path [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## Import braces(sep_or_term(variable,COMMA))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Import LBRACE RBRACE From ZWSP
##
## Ends in an error in state: 688.
##
## import_decl -> Import braces(sep_or_term(variable,COMMA)) From . file_path [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## Import braces(sep_or_term(variable,COMMA)) From
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE If ZWSP
##
## Ends in an error in state: 690.
##
## if_else_stmt(poly_stmt) -> If . par(if_cond) closed_non_if_stmt Else poly_stmt [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## if_else_stmt(poly_stmt) -> If . par(if_cond) closed_non_if_stmt SEMI_ELSE poly_stmt [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## if_else_stmt(statement) -> If . par(if_cond) closed_non_if_stmt Else statement [ SEMI RBRACE Default Case ]
## if_else_stmt(statement) -> If . par(if_cond) closed_non_if_stmt SEMI_ELSE statement [ SEMI RBRACE Default Case ]
## if_else_stmt(stmt_ending_with_expr) -> If . par(if_cond) closed_non_if_stmt Else stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Continue Const Break Attr ]
## if_else_stmt(stmt_ending_with_expr) -> If . par(if_cond) closed_non_if_stmt SEMI_ELSE stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Continue Const Break Attr ]
## if_stmt(poly_stmt) -> If . par(if_cond) poly_stmt [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## if_stmt(statement) -> If . par(if_cond) statement [ SEMI RBRACE Default Case ]
## if_stmt(stmt_ending_with_expr) -> If . par(if_cond) stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## If
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE If LPAR ZWSP
##
## Ends in an error in state: 691.
##
## par(if_cond) -> LPAR . if_cond RPAR [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## par(if_cond) -> LPAR . if_cond PARAMS RPAR [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE If LPAR UIdent While
##
## Ends in an error in state: 692.
##
## par(if_cond) -> LPAR if_cond . RPAR [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## par(if_cond) -> LPAR if_cond . PARAMS RPAR [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LPAR if_cond
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 189, spurious reduction of production ctor -> UIdent
## In state 408, spurious reduction of production core_expr -> ctor
## In state 409, spurious reduction of production app_expr_level -> core_expr
## In state 505, spurious reduction of production unary_expr_level -> app_expr_level
## In state 388, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 402, spurious reduction of production add_expr_level -> mult_expr_level
## In state 460, spurious reduction of production eq_expr_level -> add_expr_level
## In state 425, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 430, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 471, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 485, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 426, spurious reduction of production non_object_expr -> disj_expr_level
## In state 480, spurious reduction of production no_attr_expr -> non_object_expr
## In state 481, spurious reduction of production expr -> no_attr_expr
## In state 696, spurious reduction of production if_cond -> expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE If LPAR UIdent PARAMS ZWSP
##
## Ends in an error in state: 694.
##
## par(if_cond) -> LPAR if_cond PARAMS . RPAR [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LPAR if_cond PARAMS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE If LPAR UIdent RPAR ZWSP
##
## Ends in an error in state: 697.
##
## if_else_stmt(poly_stmt) -> If par(if_cond) . closed_non_if_stmt Else poly_stmt [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## if_else_stmt(poly_stmt) -> If par(if_cond) . closed_non_if_stmt SEMI_ELSE poly_stmt [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## if_else_stmt(statement) -> If par(if_cond) . closed_non_if_stmt Else statement [ SEMI RBRACE Default Case ]
## if_else_stmt(statement) -> If par(if_cond) . closed_non_if_stmt SEMI_ELSE statement [ SEMI RBRACE Default Case ]
## if_else_stmt(stmt_ending_with_expr) -> If par(if_cond) . closed_non_if_stmt Else stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Continue Const Break Attr ]
## if_else_stmt(stmt_ending_with_expr) -> If par(if_cond) . closed_non_if_stmt SEMI_ELSE stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Continue Const Break Attr ]
## if_stmt(poly_stmt) -> If par(if_cond) . poly_stmt [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## if_stmt(statement) -> If par(if_cond) . statement [ SEMI RBRACE Default Case ]
## if_stmt(stmt_ending_with_expr) -> If par(if_cond) . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## If par(if_cond)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE If LPAR UIdent RPAR While ZWSP
##
## Ends in an error in state: 698.
##
## while_stmt(closed_non_if_stmt) -> While . par(while_cond) closed_non_if_stmt [ SEMI_ELSE Else ]
## while_stmt(poly_stmt) -> While . par(while_cond) poly_stmt [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## while_stmt(statement) -> While . par(while_cond) statement [ SEMI RBRACE Default Case ]
## while_stmt(stmt_ending_with_expr) -> While . par(while_cond) stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## While
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE If LPAR UIdent RPAR While LPAR UIdent RPAR ZWSP
##
## Ends in an error in state: 699.
##
## while_stmt(closed_non_if_stmt) -> While par(while_cond) . closed_non_if_stmt [ SEMI_ELSE Else ]
## while_stmt(poly_stmt) -> While par(while_cond) . poly_stmt [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## while_stmt(statement) -> While par(while_cond) . statement [ SEMI RBRACE Default Case ]
## while_stmt(stmt_ending_with_expr) -> While par(while_cond) . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## While par(while_cond)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE If LPAR UIdent RPAR If ZWSP
##
## Ends in an error in state: 700.
##
## if_else_stmt(closed_non_if_stmt) -> If . par(if_cond) closed_non_if_stmt Else closed_non_if_stmt [ SEMI_ELSE Else ]
## if_else_stmt(closed_non_if_stmt) -> If . par(if_cond) closed_non_if_stmt SEMI_ELSE closed_non_if_stmt [ SEMI_ELSE Else ]
## if_else_stmt(poly_stmt) -> If . par(if_cond) closed_non_if_stmt Else poly_stmt [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## if_else_stmt(poly_stmt) -> If . par(if_cond) closed_non_if_stmt SEMI_ELSE poly_stmt [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## if_else_stmt(statement) -> If . par(if_cond) closed_non_if_stmt Else statement [ SEMI RBRACE Default Case ]
## if_else_stmt(statement) -> If . par(if_cond) closed_non_if_stmt SEMI_ELSE statement [ SEMI RBRACE Default Case ]
## if_else_stmt(stmt_ending_with_expr) -> If . par(if_cond) closed_non_if_stmt Else stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Continue Const Break Attr ]
## if_else_stmt(stmt_ending_with_expr) -> If . par(if_cond) closed_non_if_stmt SEMI_ELSE stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Continue Const Break Attr ]
## if_stmt(poly_stmt) -> If . par(if_cond) poly_stmt [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## if_stmt(statement) -> If . par(if_cond) statement [ SEMI RBRACE Default Case ]
## if_stmt(stmt_ending_with_expr) -> If . par(if_cond) stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## If
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE If LPAR UIdent RPAR If LPAR UIdent RPAR ZWSP
##
## Ends in an error in state: 701.
##
## if_else_stmt(closed_non_if_stmt) -> If par(if_cond) . closed_non_if_stmt Else closed_non_if_stmt [ SEMI_ELSE Else ]
## if_else_stmt(closed_non_if_stmt) -> If par(if_cond) . closed_non_if_stmt SEMI_ELSE closed_non_if_stmt [ SEMI_ELSE Else ]
## if_else_stmt(poly_stmt) -> If par(if_cond) . closed_non_if_stmt Else poly_stmt [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## if_else_stmt(poly_stmt) -> If par(if_cond) . closed_non_if_stmt SEMI_ELSE poly_stmt [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## if_else_stmt(statement) -> If par(if_cond) . closed_non_if_stmt Else statement [ SEMI RBRACE Default Case ]
## if_else_stmt(statement) -> If par(if_cond) . closed_non_if_stmt SEMI_ELSE statement [ SEMI RBRACE Default Case ]
## if_else_stmt(stmt_ending_with_expr) -> If par(if_cond) . closed_non_if_stmt Else stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Continue Const Break Attr ]
## if_else_stmt(stmt_ending_with_expr) -> If par(if_cond) . closed_non_if_stmt SEMI_ELSE stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Continue Const Break Attr ]
## if_stmt(poly_stmt) -> If par(if_cond) . poly_stmt [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## if_stmt(statement) -> If par(if_cond) . statement [ SEMI RBRACE Default Case ]
## if_stmt(stmt_ending_with_expr) -> If par(if_cond) . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## If par(if_cond)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function ZWSP
##
## Ends in an error in state: 702.
##
## fun_decl -> Function . fun_name option(ES6FUN) par(fun_params) option(ret_type) braces(statements) [ Type SEMI_ELSE SEMI RBRACE Namespace Let Interface Import Function Export Else EOF Directive Default Const Case Attr ]
## fun_decl -> Function . fun_name type_vars option(ES6FUN) par(fun_params) option(ret_type) braces(statements) [ Type SEMI_ELSE SEMI RBRACE Namespace Let Interface Import Function Export Else EOF Directive Default Const Case Attr ]
##
## The known suffix of the stack is as follows:
## Function
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident ZWSP
##
## Ends in an error in state: 704.
##
## fun_decl -> Function fun_name . option(ES6FUN) par(fun_params) option(ret_type) braces(statements) [ Type SEMI_ELSE SEMI RBRACE Namespace Let Interface Import Function Export Else EOF Directive Default Const Case Attr ]
## fun_decl -> Function fun_name . type_vars option(ES6FUN) par(fun_params) option(ret_type) braces(statements) [ Type SEMI_ELSE SEMI RBRACE Namespace Let Interface Import Function Export Else EOF Directive Default Const Case Attr ]
##
## The known suffix of the stack is as follows:
## Function fun_name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LT GT XOR
##
## Ends in an error in state: 705.
##
## fun_decl -> Function fun_name type_vars . option(ES6FUN) par(fun_params) option(ret_type) braces(statements) [ Type SEMI_ELSE SEMI RBRACE Namespace Let Interface Import Function Export Else EOF Directive Default Const Case Attr ]
##
## The known suffix of the stack is as follows:
## Function fun_name type_vars
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 15, spurious reduction of production chevrons(sep_or_term(type_var,COMMA)) -> LT sep_or_term(type_var,COMMA) GT
## In state 180, spurious reduction of production type_vars -> chevrons(sep_or_term(type_var,COMMA))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LT GT ES6FUN ZWSP
##
## Ends in an error in state: 706.
##
## fun_decl -> Function fun_name type_vars option(ES6FUN) . par(fun_params) option(ret_type) braces(statements) [ Type SEMI_ELSE SEMI RBRACE Namespace Let Interface Import Function Export Else EOF Directive Default Const Case Attr ]
##
## The known suffix of the stack is as follows:
## Function fun_name type_vars option(ES6FUN)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR ZWSP
##
## Ends in an error in state: 707.
##
## par(fun_params) -> LPAR . fun_params RPAR [ LBRACE COLON ]
## par(fun_params) -> LPAR . fun_params PARAMS RPAR [ LBRACE COLON ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR PARAMS ZWSP
##
## Ends in an error in state: 710.
##
## par(fun_params) -> LPAR fun_params PARAMS . RPAR [ LBRACE COLON ]
##
## The known suffix of the stack is as follows:
## LPAR fun_params PARAMS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LT GT LPAR RPAR ZWSP
##
## Ends in an error in state: 712.
##
## fun_decl -> Function fun_name type_vars option(ES6FUN) par(fun_params) . option(ret_type) braces(statements) [ Type SEMI_ELSE SEMI RBRACE Namespace Let Interface Import Function Export Else EOF Directive Default Const Case Attr ]
##
## The known suffix of the stack is as follows:
## Function fun_name type_vars option(ES6FUN) par(fun_params)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LT GT LPAR RPAR COLON Ident XOR
##
## Ends in an error in state: 713.
##
## fun_decl -> Function fun_name type_vars option(ES6FUN) par(fun_params) option(ret_type) . braces(statements) [ Type SEMI_ELSE SEMI RBRACE Namespace Let Interface Import Function Export Else EOF Directive Default Const Case Attr ]
##
## The known suffix of the stack is as follows:
## Function fun_name type_vars option(ES6FUN) par(fun_params) option(ret_type)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 49, spurious reduction of production type_name -> Ident
## In state 71, spurious reduction of production no_par_type_expr -> type_name
## In state 324, spurious reduction of production type_annotation(__anonymous_6) -> COLON option(ES6FUN) no_par_type_expr
## In state 325, spurious reduction of production ret_type -> type_annotation(__anonymous_6)
## In state 326, spurious reduction of production option(ret_type) -> ret_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident ES6FUN ZWSP
##
## Ends in an error in state: 715.
##
## fun_decl -> Function fun_name option(ES6FUN) . par(fun_params) option(ret_type) braces(statements) [ Type SEMI_ELSE SEMI RBRACE Namespace Let Interface Import Function Export Else EOF Directive Default Const Case Attr ]
##
## The known suffix of the stack is as follows:
## Function fun_name option(ES6FUN)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR RPAR ZWSP
##
## Ends in an error in state: 716.
##
## fun_decl -> Function fun_name option(ES6FUN) par(fun_params) . option(ret_type) braces(statements) [ Type SEMI_ELSE SEMI RBRACE Namespace Let Interface Import Function Export Else EOF Directive Default Const Case Attr ]
##
## The known suffix of the stack is as follows:
## Function fun_name option(ES6FUN) par(fun_params)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Function Ident LPAR RPAR COLON Ident XOR
##
## Ends in an error in state: 717.
##
## fun_decl -> Function fun_name option(ES6FUN) par(fun_params) option(ret_type) . braces(statements) [ Type SEMI_ELSE SEMI RBRACE Namespace Let Interface Import Function Export Else EOF Directive Default Const Case Attr ]
##
## The known suffix of the stack is as follows:
## Function fun_name option(ES6FUN) par(fun_params) option(ret_type)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 49, spurious reduction of production type_name -> Ident
## In state 71, spurious reduction of production no_par_type_expr -> type_name
## In state 324, spurious reduction of production type_annotation(__anonymous_6) -> COLON option(ES6FUN) no_par_type_expr
## In state 325, spurious reduction of production ret_type -> type_annotation(__anonymous_6)
## In state 326, spurious reduction of production option(ret_type) -> ret_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE If LPAR UIdent RPAR For ZWSP
##
## Ends in an error in state: 719.
##
## empty_for_stmt -> For . par(range_for) [ SEMI_ELSE SEMI RBRACE Else Default Case ]
## for_of_stmt(closed_non_if_stmt) -> For . par(range_of) closed_non_if_stmt [ SEMI_ELSE Else ]
## for_of_stmt(poly_stmt) -> For . par(range_of) poly_stmt [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## for_of_stmt(statement) -> For . par(range_of) statement [ SEMI RBRACE Default Case ]
## for_of_stmt(stmt_ending_with_expr) -> For . par(range_of) stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Continue Const Break Attr ]
## full_for_stmt(closed_non_if_stmt) -> For . par(range_for) closed_non_if_stmt [ SEMI_ELSE Else ]
## full_for_stmt(poly_stmt) -> For . par(range_for) poly_stmt [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## full_for_stmt(statement) -> For . par(range_for) statement [ SEMI RBRACE Default Case ]
## full_for_stmt(stmt_ending_with_expr) -> For . par(range_for) stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## For
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE For LPAR ZWSP
##
## Ends in an error in state: 720.
##
## par(range_for) -> LPAR . range_for RPAR [ While Verbatim UIdent Type True Switch String SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else Default Continue Const Case Bytes Break Attr ]
## par(range_for) -> LPAR . range_for PARAMS RPAR [ While Verbatim UIdent Type True Switch String SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else Default Continue Const Case Bytes Break Attr ]
## par(range_of) -> LPAR . range_of RPAR [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## par(range_of) -> LPAR . range_of PARAMS RPAR [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE For LPAR SEMI ZWSP
##
## Ends in an error in state: 721.
##
## range_for -> SEMI . SEMI [ RPAR PARAMS ]
## range_for -> SEMI . SEMI afterthought [ RPAR PARAMS ]
## range_for -> SEMI . condition SEMI [ RPAR PARAMS ]
## range_for -> SEMI . condition SEMI afterthought [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE For LPAR SEMI SEMI ZWSP
##
## Ends in an error in state: 722.
##
## range_for -> SEMI SEMI . [ RPAR PARAMS ]
## range_for -> SEMI SEMI . afterthought [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## SEMI SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE For LPAR SEMI SEMI UIdent While
##
## Ends in an error in state: 724.
##
## nsepseq(expr,COMMA) -> expr . [ RPAR PARAMS ]
## nsepseq(expr,COMMA) -> expr . COMMA nsepseq(expr,COMMA) [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 189, spurious reduction of production ctor -> UIdent
## In state 408, spurious reduction of production core_expr -> ctor
## In state 409, spurious reduction of production app_expr_level -> core_expr
## In state 505, spurious reduction of production unary_expr_level -> app_expr_level
## In state 388, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 402, spurious reduction of production add_expr_level -> mult_expr_level
## In state 460, spurious reduction of production eq_expr_level -> add_expr_level
## In state 425, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 430, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 471, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 485, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 426, spurious reduction of production non_object_expr -> disj_expr_level
## In state 480, spurious reduction of production no_attr_expr -> non_object_expr
## In state 481, spurious reduction of production expr -> no_attr_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE For LPAR SEMI SEMI UIdent COMMA ZWSP
##
## Ends in an error in state: 725.
##
## nsepseq(expr,COMMA) -> expr COMMA . nsepseq(expr,COMMA) [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE For LPAR SEMI UIdent While
##
## Ends in an error in state: 729.
##
## range_for -> SEMI condition . SEMI [ RPAR PARAMS ]
## range_for -> SEMI condition . SEMI afterthought [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## SEMI condition
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 189, spurious reduction of production ctor -> UIdent
## In state 408, spurious reduction of production core_expr -> ctor
## In state 409, spurious reduction of production app_expr_level -> core_expr
## In state 505, spurious reduction of production unary_expr_level -> app_expr_level
## In state 388, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 402, spurious reduction of production add_expr_level -> mult_expr_level
## In state 460, spurious reduction of production eq_expr_level -> add_expr_level
## In state 425, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 430, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 471, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 485, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 426, spurious reduction of production non_object_expr -> disj_expr_level
## In state 480, spurious reduction of production no_attr_expr -> non_object_expr
## In state 481, spurious reduction of production expr -> no_attr_expr
## In state 728, spurious reduction of production condition -> expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE For LPAR SEMI UIdent SEMI ZWSP
##
## Ends in an error in state: 730.
##
## range_for -> SEMI condition SEMI . [ RPAR PARAMS ]
## range_for -> SEMI condition SEMI . afterthought [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## SEMI condition SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE For LPAR Let ZWSP
##
## Ends in an error in state: 732.
##
## range_of -> Let . Ident Of expr [ RPAR PARAMS ]
## value_decl -> Let . bindings [ SEMI ]
##
## The known suffix of the stack is as follows:
## Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE For LPAR Let Ident ZWSP
##
## Ends in an error in state: 733.
##
## pattern -> Ident . [ EQ COLON ]
## range_of -> Let Ident . Of expr [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## Let Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE For LPAR Let Ident Of ZWSP
##
## Ends in an error in state: 734.
##
## range_of -> Let Ident Of . expr [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## Let Ident Of
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE For LPAR Const ZWSP
##
## Ends in an error in state: 736.
##
## range_of -> Const . Ident Of expr [ RPAR PARAMS ]
## value_decl -> Const . bindings [ SEMI ]
##
## The known suffix of the stack is as follows:
## Const
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE For LPAR Const Ident ZWSP
##
## Ends in an error in state: 737.
##
## pattern -> Ident . [ EQ COLON ]
## range_of -> Const Ident . Of expr [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## Const Ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE For LPAR Const Ident Of ZWSP
##
## Ends in an error in state: 738.
##
## range_of -> Const Ident Of . expr [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## Const Ident Of
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE For LPAR Const Ident Of UIdent While
##
## Ends in an error in state: 744.
##
## par(range_of) -> LPAR range_of . RPAR [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## par(range_of) -> LPAR range_of . PARAMS RPAR [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LPAR range_of
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 189, spurious reduction of production ctor -> UIdent
## In state 408, spurious reduction of production core_expr -> ctor
## In state 409, spurious reduction of production app_expr_level -> core_expr
## In state 505, spurious reduction of production unary_expr_level -> app_expr_level
## In state 388, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 402, spurious reduction of production add_expr_level -> mult_expr_level
## In state 460, spurious reduction of production eq_expr_level -> add_expr_level
## In state 425, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 430, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 471, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 485, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 426, spurious reduction of production non_object_expr -> disj_expr_level
## In state 480, spurious reduction of production no_attr_expr -> non_object_expr
## In state 481, spurious reduction of production expr -> no_attr_expr
## In state 739, spurious reduction of production range_of -> Const Ident Of expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE For LPAR Const Ident Of UIdent PARAMS ZWSP
##
## Ends in an error in state: 746.
##
## par(range_of) -> LPAR range_of PARAMS . RPAR [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LPAR range_of PARAMS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE For LPAR SEMI SEMI PARAMS ZWSP
##
## Ends in an error in state: 750.
##
## par(range_for) -> LPAR range_for PARAMS . RPAR [ While Verbatim UIdent Type True Switch String SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LPAR range_for PARAMS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE For LPAR Ident MINUS2 BIT_AND
##
## Ends in an error in state: 756.
##
## range_for -> initialiser . SEMI SEMI [ RPAR PARAMS ]
## range_for -> initialiser . SEMI SEMI afterthought [ RPAR PARAMS ]
## range_for -> initialiser . SEMI condition SEMI [ RPAR PARAMS ]
## range_for -> initialiser . SEMI condition SEMI afterthought [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## initialiser
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE For LPAR Ident MINUS2 SEMI ZWSP
##
## Ends in an error in state: 757.
##
## range_for -> initialiser SEMI . SEMI [ RPAR PARAMS ]
## range_for -> initialiser SEMI . SEMI afterthought [ RPAR PARAMS ]
## range_for -> initialiser SEMI . condition SEMI [ RPAR PARAMS ]
## range_for -> initialiser SEMI . condition SEMI afterthought [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## initialiser SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE For LPAR Ident MINUS2 SEMI SEMI ZWSP
##
## Ends in an error in state: 758.
##
## range_for -> initialiser SEMI SEMI . [ RPAR PARAMS ]
## range_for -> initialiser SEMI SEMI . afterthought [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## initialiser SEMI SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE For LPAR Ident MINUS2 SEMI UIdent While
##
## Ends in an error in state: 760.
##
## range_for -> initialiser SEMI condition . SEMI [ RPAR PARAMS ]
## range_for -> initialiser SEMI condition . SEMI afterthought [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## initialiser SEMI condition
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 189, spurious reduction of production ctor -> UIdent
## In state 408, spurious reduction of production core_expr -> ctor
## In state 409, spurious reduction of production app_expr_level -> core_expr
## In state 505, spurious reduction of production unary_expr_level -> app_expr_level
## In state 388, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 402, spurious reduction of production add_expr_level -> mult_expr_level
## In state 460, spurious reduction of production eq_expr_level -> add_expr_level
## In state 425, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 430, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 471, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 485, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 426, spurious reduction of production non_object_expr -> disj_expr_level
## In state 480, spurious reduction of production no_attr_expr -> non_object_expr
## In state 481, spurious reduction of production expr -> no_attr_expr
## In state 728, spurious reduction of production condition -> expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE For LPAR Ident MINUS2 SEMI UIdent SEMI ZWSP
##
## Ends in an error in state: 761.
##
## range_for -> initialiser SEMI condition SEMI . [ RPAR PARAMS ]
## range_for -> initialiser SEMI condition SEMI . afterthought [ RPAR PARAMS ]
##
## The known suffix of the stack is as follows:
## initialiser SEMI condition SEMI
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE UIdent COLON
##
## Ends in an error in state: 770.
##
## lambda -> core_expr . [ LPAR ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK app_expr COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK app_expr COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK app_expr COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK app_expr COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK app_expr COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK app_expr COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK app_expr COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK incr_expr COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK incr_expr COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK incr_expr COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK incr_expr COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK incr_expr COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK incr_expr COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK incr_expr COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK decr_expr COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK decr_expr COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK decr_expr COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK decr_expr COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK decr_expr COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK decr_expr COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK decr_expr COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK assign_expr COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK assign_expr COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK assign_expr COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK assign_expr COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK assign_expr COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK assign_expr COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK assign_expr COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK match_expr COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK match_expr COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK match_expr COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK match_expr COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK match_expr COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK match_expr COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK match_expr COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK ternary_expr(core_expr,pre_expr_stmt) COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK ternary_expr(core_expr,pre_expr_stmt) COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK ternary_expr(core_expr,pre_expr_stmt) COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK ternary_expr(core_expr,pre_expr_stmt) COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK ternary_expr(core_expr,pre_expr_stmt) COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK ternary_expr(core_expr,pre_expr_stmt) COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK ternary_expr(core_expr,pre_expr_stmt) COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK par(expr) COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK par(expr) COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK par(expr) COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK par(expr) COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK par(expr) COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK par(expr) COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr . QMARK par(expr) COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## core_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 189, spurious reduction of production ctor -> UIdent
## In state 408, spurious reduction of production core_expr -> ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE UIdent QMARK ZWSP
##
## Ends in an error in state: 771.
##
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . app_expr COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . app_expr COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . app_expr COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . app_expr COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . app_expr COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . app_expr COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . app_expr COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . incr_expr COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . incr_expr COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . incr_expr COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . incr_expr COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . incr_expr COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . incr_expr COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . incr_expr COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . decr_expr COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . decr_expr COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . decr_expr COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . decr_expr COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . decr_expr COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . decr_expr COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . decr_expr COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . assign_expr COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . assign_expr COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . assign_expr COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . assign_expr COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . assign_expr COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . assign_expr COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . assign_expr COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . match_expr COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . match_expr COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . match_expr COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . match_expr COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . match_expr COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . match_expr COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . match_expr COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . ternary_expr(core_expr,pre_expr_stmt) COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . ternary_expr(core_expr,pre_expr_stmt) COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . ternary_expr(core_expr,pre_expr_stmt) COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . ternary_expr(core_expr,pre_expr_stmt) COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . ternary_expr(core_expr,pre_expr_stmt) COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . ternary_expr(core_expr,pre_expr_stmt) COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . ternary_expr(core_expr,pre_expr_stmt) COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . par(expr) COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . par(expr) COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . par(expr) COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . par(expr) COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . par(expr) COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . par(expr) COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK . par(expr) COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## core_expr QMARK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE UIdent QMARK UIdent QMARK Ident MINUS2 COLON Ident MINUS2 BIT_AND
##
## Ends in an error in state: 772.
##
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) . COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) . COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) . COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) . COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) . COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) . COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) . COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## core_expr QMARK ternary_expr(core_expr,pre_expr_stmt)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE UIdent QMARK UIdent QMARK Ident MINUS2 COLON Ident MINUS2 COLON ZWSP
##
## Ends in an error in state: 773.
##
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) COLON . app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) COLON . incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) COLON . decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) COLON . assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) COLON . match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) COLON . ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) COLON . par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## core_expr QMARK ternary_expr(core_expr,pre_expr_stmt) COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE UIdent QMARK LPAR UIdent RPAR COLON ZWSP
##
## Ends in an error in state: 782.
##
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK par(expr) COLON . app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK par(expr) COLON . incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK par(expr) COLON . decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK par(expr) COLON . assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK par(expr) COLON . match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK par(expr) COLON . ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK par(expr) COLON . par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## core_expr QMARK par(expr) COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE UIdent QMARK Match LPAR UIdent RPAR LBRACE Default COLON UIdent RBRACE ZWSP
##
## Ends in an error in state: 790.
##
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK match_expr . COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK match_expr . COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK match_expr . COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK match_expr . COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK match_expr . COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK match_expr . COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK match_expr . COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## core_expr QMARK match_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE UIdent QMARK Match LPAR UIdent RPAR LBRACE Default COLON UIdent RBRACE COLON ZWSP
##
## Ends in an error in state: 791.
##
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK match_expr COLON . app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK match_expr COLON . incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK match_expr COLON . decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK match_expr COLON . assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK match_expr COLON . match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK match_expr COLON . ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK match_expr COLON . par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## core_expr QMARK match_expr COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE UIdent QMARK Ident PLUS2 ZWSP
##
## Ends in an error in state: 799.
##
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK incr_expr . COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK incr_expr . COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK incr_expr . COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK incr_expr . COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK incr_expr . COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK incr_expr . COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK incr_expr . COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## core_expr QMARK incr_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE UIdent QMARK Ident PLUS2 COLON ZWSP
##
## Ends in an error in state: 800.
##
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK incr_expr COLON . app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK incr_expr COLON . incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK incr_expr COLON . decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK incr_expr COLON . assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK incr_expr COLON . match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK incr_expr COLON . ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK incr_expr COLON . par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## core_expr QMARK incr_expr COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE UIdent QMARK Ident MINUS2 ZWSP
##
## Ends in an error in state: 808.
##
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK decr_expr . COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK decr_expr . COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK decr_expr . COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK decr_expr . COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK decr_expr . COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK decr_expr . COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK decr_expr . COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## core_expr QMARK decr_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE UIdent QMARK Ident MINUS2 COLON ZWSP
##
## Ends in an error in state: 809.
##
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK decr_expr COLON . app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK decr_expr COLON . incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK decr_expr COLON . decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK decr_expr COLON . assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK decr_expr COLON . match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK decr_expr COLON . ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK decr_expr COLON . par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## core_expr QMARK decr_expr COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE UIdent QMARK Ident BIT_AND_EQ UIdent While
##
## Ends in an error in state: 817.
##
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK assign_expr . COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK assign_expr . COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK assign_expr . COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK assign_expr . COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK assign_expr . COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK assign_expr . COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK assign_expr . COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## core_expr QMARK assign_expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 189, spurious reduction of production ctor -> UIdent
## In state 408, spurious reduction of production core_expr -> ctor
## In state 409, spurious reduction of production app_expr_level -> core_expr
## In state 505, spurious reduction of production unary_expr_level -> app_expr_level
## In state 388, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 402, spurious reduction of production add_expr_level -> mult_expr_level
## In state 460, spurious reduction of production eq_expr_level -> add_expr_level
## In state 425, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 430, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 471, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 485, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 426, spurious reduction of production non_object_expr -> disj_expr_level
## In state 480, spurious reduction of production no_attr_expr -> non_object_expr
## In state 481, spurious reduction of production expr -> no_attr_expr
## In state 537, spurious reduction of production bin_op(var_path,BIT_AND_EQ,expr) -> var_path BIT_AND_EQ expr
## In state 498, spurious reduction of production assign_expr -> bin_op(var_path,BIT_AND_EQ,expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE UIdent QMARK Ident BIT_AND_EQ UIdent COLON ZWSP
##
## Ends in an error in state: 818.
##
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK assign_expr COLON . app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK assign_expr COLON . incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK assign_expr COLON . decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK assign_expr COLON . assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK assign_expr COLON . match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK assign_expr COLON . ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK assign_expr COLON . par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## core_expr QMARK assign_expr COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE UIdent QMARK UIdent LPAR RPAR ZWSP
##
## Ends in an error in state: 826.
##
## lambda -> app_expr . [ LPAR ]
## path(app_expr) -> app_expr . nseq(selection) [ QMARK LPAR ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK app_expr . COLON app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK app_expr . COLON incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK app_expr . COLON decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK app_expr . COLON assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK app_expr . COLON match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK app_expr . COLON ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK app_expr . COLON par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## core_expr QMARK app_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE UIdent QMARK UIdent LPAR RPAR COLON ZWSP
##
## Ends in an error in state: 827.
##
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK app_expr COLON . app_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK app_expr COLON . incr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK app_expr COLON . decr_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK app_expr COLON . assign_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK app_expr COLON . match_expr [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK app_expr COLON . ternary_expr(core_expr,pre_expr_stmt) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
## ternary_expr(core_expr,pre_expr_stmt) -> core_expr QMARK app_expr COLON . par(expr) [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Else Default Continue Const Case COLON Break Attr ]
##
## The known suffix of the stack is as follows:
## core_expr QMARK app_expr COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE If LPAR UIdent RPAR For LPAR Const Ident Of UIdent RPAR ZWSP
##
## Ends in an error in state: 837.
##
## for_of_stmt(closed_non_if_stmt) -> For par(range_of) . closed_non_if_stmt [ SEMI_ELSE Else ]
## for_of_stmt(poly_stmt) -> For par(range_of) . poly_stmt [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## for_of_stmt(statement) -> For par(range_of) . statement [ SEMI RBRACE Default Case ]
## for_of_stmt(stmt_ending_with_expr) -> For par(range_of) . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## For par(range_of)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Export ZWSP
##
## Ends in an error in state: 838.
##
## export(declaration) -> Export . declaration [ SEMI_ELSE SEMI RBRACE Else Default Case ]
## export(import_decl) -> Export . import_decl [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Continue Const Break Attr ]
## export(interface_decl) -> Export . interface_decl [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## export(namespace_decl) -> Export . namespace_decl [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## export(type_decl) -> Export . type_decl [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Continue Const Break Attr ]
## export(value_decl) -> Export . value_decl [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## Export
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Const ZWSP
##
## Ends in an error in state: 839.
##
## value_decl -> Const . bindings [ While Type Switch SEMI_ELSE SEMI Return RBRACE Namespace Let LBRACE Interface Import If Function For Export Else EOF Directive Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## Const
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE If LPAR UIdent RPAR Attr ZWSP
##
## Ends in an error in state: 848.
##
## core_stmt(closed_non_if_stmt) -> Attr . closed_non_if_stmt [ SEMI_ELSE Else ]
## core_stmt(statement) -> Attr . statement [ SEMI RBRACE Default Case ]
## right_rec_stmt(poly_stmt) -> Attr . poly_stmt [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## right_rec_stmt(stmt_ending_with_expr) -> Attr . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## Attr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE If LPAR UIdent RPAR If LPAR UIdent RPAR Break SEMI_ELSE ZWSP
##
## Ends in an error in state: 917.
##
## if_else_stmt(closed_non_if_stmt) -> If par(if_cond) closed_non_if_stmt SEMI_ELSE . closed_non_if_stmt [ SEMI_ELSE Else ]
## if_else_stmt(poly_stmt) -> If par(if_cond) closed_non_if_stmt SEMI_ELSE . poly_stmt [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## if_else_stmt(statement) -> If par(if_cond) closed_non_if_stmt SEMI_ELSE . statement [ SEMI RBRACE Default Case ]
## if_else_stmt(stmt_ending_with_expr) -> If par(if_cond) closed_non_if_stmt SEMI_ELSE . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## If par(if_cond) closed_non_if_stmt SEMI_ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE If LPAR UIdent RPAR If LPAR UIdent RPAR Break Else ZWSP
##
## Ends in an error in state: 922.
##
## if_else_stmt(closed_non_if_stmt) -> If par(if_cond) closed_non_if_stmt Else . closed_non_if_stmt [ SEMI_ELSE Else ]
## if_else_stmt(poly_stmt) -> If par(if_cond) closed_non_if_stmt Else . poly_stmt [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## if_else_stmt(statement) -> If par(if_cond) closed_non_if_stmt Else . statement [ SEMI RBRACE Default Case ]
## if_else_stmt(stmt_ending_with_expr) -> If par(if_cond) closed_non_if_stmt Else . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## If par(if_cond) closed_non_if_stmt Else
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE If LPAR UIdent RPAR Break SEMI_ELSE ZWSP
##
## Ends in an error in state: 932.
##
## if_else_stmt(poly_stmt) -> If par(if_cond) closed_non_if_stmt SEMI_ELSE . poly_stmt [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## if_else_stmt(statement) -> If par(if_cond) closed_non_if_stmt SEMI_ELSE . statement [ SEMI RBRACE Default Case ]
## if_else_stmt(stmt_ending_with_expr) -> If par(if_cond) closed_non_if_stmt SEMI_ELSE . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## If par(if_cond) closed_non_if_stmt SEMI_ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE For ZWSP
##
## Ends in an error in state: 933.
##
## empty_for_stmt -> For . par(range_for) [ SEMI RBRACE Default Case ]
## for_of_stmt(poly_stmt) -> For . par(range_of) poly_stmt [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## for_of_stmt(statement) -> For . par(range_of) statement [ SEMI RBRACE Default Case ]
## for_of_stmt(stmt_ending_with_expr) -> For . par(range_of) stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Continue Const Break Attr ]
## full_for_stmt(poly_stmt) -> For . par(range_for) poly_stmt [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## full_for_stmt(statement) -> For . par(range_for) statement [ SEMI RBRACE Default Case ]
## full_for_stmt(stmt_ending_with_expr) -> For . par(range_for) stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## For
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE For LPAR Const Ident Of UIdent RPAR ZWSP
##
## Ends in an error in state: 934.
##
## for_of_stmt(poly_stmt) -> For par(range_of) . poly_stmt [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## for_of_stmt(statement) -> For par(range_of) . statement [ SEMI RBRACE Default Case ]
## for_of_stmt(stmt_ending_with_expr) -> For par(range_of) . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## For par(range_of)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Attr ZWSP
##
## Ends in an error in state: 935.
##
## core_stmt(statement) -> Attr . statement [ SEMI RBRACE Default Case ]
## right_rec_stmt(poly_stmt) -> Attr . poly_stmt [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## right_rec_stmt(stmt_ending_with_expr) -> Attr . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## Attr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE If LPAR UIdent RPAR Break Else ZWSP
##
## Ends in an error in state: 946.
##
## if_else_stmt(poly_stmt) -> If par(if_cond) closed_non_if_stmt Else . poly_stmt [ While Verbatim UIdent Type True Switch String Return PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Continue Const Bytes Break Attr ]
## if_else_stmt(statement) -> If par(if_cond) closed_non_if_stmt Else . statement [ SEMI RBRACE Default Case ]
## if_else_stmt(stmt_ending_with_expr) -> If par(if_cond) closed_non_if_stmt Else . stmt_ending_with_expr [ While Type Switch Return Namespace Let LBRACE Interface Import If For Export Continue Const Break Attr ]
##
## The known suffix of the stack is as follows:
## If par(if_cond) closed_non_if_stmt Else
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Return While ZWSP
##
## Ends in an error in state: 948.
##
## while_stmt(stmt_not_starting_with_expr_nor_block1) -> While . par(while_cond) stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## while_stmt(stmt_not_starting_with_expr_nor_block2) -> While . par(while_cond) stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## While
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Return While LPAR UIdent RPAR ZWSP
##
## Ends in an error in state: 949.
##
## while_stmt(stmt_not_starting_with_expr_nor_block1) -> While par(while_cond) . stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## while_stmt(stmt_not_starting_with_expr_nor_block2) -> While par(while_cond) . stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## While par(while_cond)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Return Attr Return ZWSP
##
## Ends in an error in state: 950.
##
## full_return_stmt -> Return . no_attr_expr [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## Return
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Return If ZWSP
##
## Ends in an error in state: 951.
##
## if_else_stmt(stmt_not_starting_with_expr_nor_block1) -> If . par(if_cond) closed_non_if_stmt Else stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## if_else_stmt(stmt_not_starting_with_expr_nor_block1) -> If . par(if_cond) closed_non_if_stmt SEMI_ELSE stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## if_else_stmt(stmt_not_starting_with_expr_nor_block2) -> If . par(if_cond) closed_non_if_stmt Else stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
## if_else_stmt(stmt_not_starting_with_expr_nor_block2) -> If . par(if_cond) closed_non_if_stmt SEMI_ELSE stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
## if_stmt(stmt_not_starting_with_expr_nor_block1) -> If . par(if_cond) stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## if_stmt(stmt_not_starting_with_expr_nor_block2) -> If . par(if_cond) stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## If
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Return If LPAR UIdent RPAR ZWSP
##
## Ends in an error in state: 952.
##
## if_else_stmt(stmt_not_starting_with_expr_nor_block1) -> If par(if_cond) . closed_non_if_stmt Else stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## if_else_stmt(stmt_not_starting_with_expr_nor_block1) -> If par(if_cond) . closed_non_if_stmt SEMI_ELSE stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## if_else_stmt(stmt_not_starting_with_expr_nor_block2) -> If par(if_cond) . closed_non_if_stmt Else stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
## if_else_stmt(stmt_not_starting_with_expr_nor_block2) -> If par(if_cond) . closed_non_if_stmt SEMI_ELSE stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
## if_stmt(stmt_not_starting_with_expr_nor_block1) -> If par(if_cond) . stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## if_stmt(stmt_not_starting_with_expr_nor_block2) -> If par(if_cond) . stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## If par(if_cond)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Return If LPAR UIdent RPAR While ZWSP
##
## Ends in an error in state: 953.
##
## while_stmt(closed_non_if_stmt) -> While . par(while_cond) closed_non_if_stmt [ SEMI_ELSE Else ]
## while_stmt(stmt_not_starting_with_expr_nor_block1) -> While . par(while_cond) stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## while_stmt(stmt_not_starting_with_expr_nor_block2) -> While . par(while_cond) stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## While
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Return If LPAR UIdent RPAR While LPAR UIdent RPAR ZWSP
##
## Ends in an error in state: 954.
##
## while_stmt(closed_non_if_stmt) -> While par(while_cond) . closed_non_if_stmt [ SEMI_ELSE Else ]
## while_stmt(stmt_not_starting_with_expr_nor_block1) -> While par(while_cond) . stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## while_stmt(stmt_not_starting_with_expr_nor_block2) -> While par(while_cond) . stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## While par(while_cond)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Return If LPAR UIdent RPAR If ZWSP
##
## Ends in an error in state: 955.
##
## if_else_stmt(closed_non_if_stmt) -> If . par(if_cond) closed_non_if_stmt Else closed_non_if_stmt [ SEMI_ELSE Else ]
## if_else_stmt(closed_non_if_stmt) -> If . par(if_cond) closed_non_if_stmt SEMI_ELSE closed_non_if_stmt [ SEMI_ELSE Else ]
## if_else_stmt(stmt_not_starting_with_expr_nor_block1) -> If . par(if_cond) closed_non_if_stmt Else stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## if_else_stmt(stmt_not_starting_with_expr_nor_block1) -> If . par(if_cond) closed_non_if_stmt SEMI_ELSE stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## if_else_stmt(stmt_not_starting_with_expr_nor_block2) -> If . par(if_cond) closed_non_if_stmt Else stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
## if_else_stmt(stmt_not_starting_with_expr_nor_block2) -> If . par(if_cond) closed_non_if_stmt SEMI_ELSE stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
## if_stmt(stmt_not_starting_with_expr_nor_block1) -> If . par(if_cond) stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## if_stmt(stmt_not_starting_with_expr_nor_block2) -> If . par(if_cond) stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## If
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Return If LPAR UIdent RPAR If LPAR UIdent RPAR ZWSP
##
## Ends in an error in state: 956.
##
## if_else_stmt(closed_non_if_stmt) -> If par(if_cond) . closed_non_if_stmt Else closed_non_if_stmt [ SEMI_ELSE Else ]
## if_else_stmt(closed_non_if_stmt) -> If par(if_cond) . closed_non_if_stmt SEMI_ELSE closed_non_if_stmt [ SEMI_ELSE Else ]
## if_else_stmt(stmt_not_starting_with_expr_nor_block1) -> If par(if_cond) . closed_non_if_stmt Else stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## if_else_stmt(stmt_not_starting_with_expr_nor_block1) -> If par(if_cond) . closed_non_if_stmt SEMI_ELSE stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## if_else_stmt(stmt_not_starting_with_expr_nor_block2) -> If par(if_cond) . closed_non_if_stmt Else stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
## if_else_stmt(stmt_not_starting_with_expr_nor_block2) -> If par(if_cond) . closed_non_if_stmt SEMI_ELSE stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
## if_stmt(stmt_not_starting_with_expr_nor_block1) -> If par(if_cond) . stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## if_stmt(stmt_not_starting_with_expr_nor_block2) -> If par(if_cond) . stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## If par(if_cond)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Return If LPAR UIdent RPAR For ZWSP
##
## Ends in an error in state: 957.
##
## empty_for_stmt -> For . par(range_for) [ SEMI_ELSE Else ]
## for_of_stmt(closed_non_if_stmt) -> For . par(range_of) closed_non_if_stmt [ SEMI_ELSE Else ]
## for_of_stmt(stmt_not_starting_with_expr_nor_block1) -> For . par(range_of) stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## for_of_stmt(stmt_not_starting_with_expr_nor_block2) -> For . par(range_of) stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
## full_for_stmt(closed_non_if_stmt) -> For . par(range_for) closed_non_if_stmt [ SEMI_ELSE Else ]
## full_for_stmt(stmt_not_starting_with_expr_nor_block1) -> For . par(range_for) stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## full_for_stmt(stmt_not_starting_with_expr_nor_block2) -> For . par(range_for) stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## For
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Return If LPAR UIdent RPAR For LPAR Const Ident Of UIdent RPAR ZWSP
##
## Ends in an error in state: 958.
##
## for_of_stmt(closed_non_if_stmt) -> For par(range_of) . closed_non_if_stmt [ SEMI_ELSE Else ]
## for_of_stmt(stmt_not_starting_with_expr_nor_block1) -> For par(range_of) . stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## for_of_stmt(stmt_not_starting_with_expr_nor_block2) -> For par(range_of) . stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## For par(range_of)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Return If LPAR UIdent RPAR Export ZWSP
##
## Ends in an error in state: 959.
##
## export(declaration) -> Export . declaration [ SEMI_ELSE Else ]
## export(import_decl) -> Export . import_decl [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## export(interface_decl) -> Export . interface_decl [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
## export(namespace_decl) -> Export . namespace_decl [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
## export(type_decl) -> Export . type_decl [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## export(value_decl) -> Export . value_decl [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## Export
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Return If LPAR UIdent RPAR Export Const Bytes EQ UIdent When
##
## Ends in an error in state: 1020.
##
## if_else_stmt(stmt_not_starting_with_expr_nor_block1) -> If par(if_cond) closed_non_if_stmt . Else stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## if_else_stmt(stmt_not_starting_with_expr_nor_block1) -> If par(if_cond) closed_non_if_stmt . SEMI_ELSE stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## if_else_stmt(stmt_not_starting_with_expr_nor_block2) -> If par(if_cond) closed_non_if_stmt . Else stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
## if_else_stmt(stmt_not_starting_with_expr_nor_block2) -> If par(if_cond) closed_non_if_stmt . SEMI_ELSE stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## If par(if_cond) closed_non_if_stmt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 189, spurious reduction of production ctor -> UIdent
## In state 408, spurious reduction of production core_expr -> ctor
## In state 409, spurious reduction of production app_expr_level -> core_expr
## In state 505, spurious reduction of production unary_expr_level -> app_expr_level
## In state 388, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 402, spurious reduction of production add_expr_level -> mult_expr_level
## In state 460, spurious reduction of production eq_expr_level -> add_expr_level
## In state 425, spurious reduction of production comp_expr_level -> eq_expr_level
## In state 430, spurious reduction of production bit_shift_level -> comp_expr_level
## In state 471, spurious reduction of production conj_expr_level -> bit_shift_level
## In state 485, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 426, spurious reduction of production non_object_expr -> disj_expr_level
## In state 480, spurious reduction of production no_attr_expr -> non_object_expr
## In state 481, spurious reduction of production expr -> no_attr_expr
## In state 635, spurious reduction of production val_binding -> pattern option(binding_type) EQ expr
## In state 625, spurious reduction of production nsepseq(val_binding,COMMA) -> val_binding
## In state 638, spurious reduction of production bindings -> nsepseq(val_binding,COMMA)
## In state 740, spurious reduction of production value_decl -> Const bindings
## In state 960, spurious reduction of production declaration -> value_decl
## In state 845, spurious reduction of production export(declaration) -> Export declaration
## In state 893, spurious reduction of production export_stmt -> export(declaration)
## In state 993, spurious reduction of production non_if_stmt(closed_non_if_stmt) -> export_stmt
## In state 864, spurious reduction of production closed_non_if_stmt -> non_if_stmt(closed_non_if_stmt)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Return If LPAR UIdent RPAR Attr ZWSP
##
## Ends in an error in state: 965.
##
## core_stmt(closed_non_if_stmt) -> Attr . closed_non_if_stmt [ SEMI_ELSE Else ]
## right_rec_stmt(stmt_not_starting_with_expr_nor_block1) -> Attr . stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## right_rec_stmt(stmt_not_starting_with_expr_nor_block2) -> Attr . stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Attr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Return If LPAR UIdent RPAR If LPAR UIdent RPAR Return BIT_AND
##
## Ends in an error in state: 1011.
##
## if_else_stmt(closed_non_if_stmt) -> If par(if_cond) closed_non_if_stmt . Else closed_non_if_stmt [ SEMI_ELSE Else ]
## if_else_stmt(closed_non_if_stmt) -> If par(if_cond) closed_non_if_stmt . SEMI_ELSE closed_non_if_stmt [ SEMI_ELSE Else ]
## if_else_stmt(stmt_not_starting_with_expr_nor_block1) -> If par(if_cond) closed_non_if_stmt . Else stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## if_else_stmt(stmt_not_starting_with_expr_nor_block1) -> If par(if_cond) closed_non_if_stmt . SEMI_ELSE stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## if_else_stmt(stmt_not_starting_with_expr_nor_block2) -> If par(if_cond) closed_non_if_stmt . Else stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
## if_else_stmt(stmt_not_starting_with_expr_nor_block2) -> If par(if_cond) closed_non_if_stmt . SEMI_ELSE stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## If par(if_cond) closed_non_if_stmt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 622, spurious reduction of production empty_return_stmt -> Return
## In state 894, spurious reduction of production return_stmt -> empty_return_stmt
## In state 975, spurious reduction of production non_if_stmt(closed_non_if_stmt) -> return_stmt
## In state 864, spurious reduction of production closed_non_if_stmt -> non_if_stmt(closed_non_if_stmt)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Return If LPAR UIdent RPAR If LPAR UIdent RPAR Return SEMI_ELSE ZWSP
##
## Ends in an error in state: 1012.
##
## if_else_stmt(closed_non_if_stmt) -> If par(if_cond) closed_non_if_stmt SEMI_ELSE . closed_non_if_stmt [ SEMI_ELSE Else ]
## if_else_stmt(stmt_not_starting_with_expr_nor_block1) -> If par(if_cond) closed_non_if_stmt SEMI_ELSE . stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## if_else_stmt(stmt_not_starting_with_expr_nor_block2) -> If par(if_cond) closed_non_if_stmt SEMI_ELSE . stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## If par(if_cond) closed_non_if_stmt SEMI_ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Return If LPAR UIdent RPAR If LPAR UIdent RPAR Return Else ZWSP
##
## Ends in an error in state: 1015.
##
## if_else_stmt(closed_non_if_stmt) -> If par(if_cond) closed_non_if_stmt Else . closed_non_if_stmt [ SEMI_ELSE Else ]
## if_else_stmt(stmt_not_starting_with_expr_nor_block1) -> If par(if_cond) closed_non_if_stmt Else . stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## if_else_stmt(stmt_not_starting_with_expr_nor_block2) -> If par(if_cond) closed_non_if_stmt Else . stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## If par(if_cond) closed_non_if_stmt Else
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Return If LPAR UIdent RPAR Return SEMI_ELSE ZWSP
##
## Ends in an error in state: 1021.
##
## if_else_stmt(stmt_not_starting_with_expr_nor_block1) -> If par(if_cond) closed_non_if_stmt SEMI_ELSE . stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## if_else_stmt(stmt_not_starting_with_expr_nor_block2) -> If par(if_cond) closed_non_if_stmt SEMI_ELSE . stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## If par(if_cond) closed_non_if_stmt SEMI_ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Return For ZWSP
##
## Ends in an error in state: 1022.
##
## for_of_stmt(stmt_not_starting_with_expr_nor_block1) -> For . par(range_of) stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## for_of_stmt(stmt_not_starting_with_expr_nor_block2) -> For . par(range_of) stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
## full_for_stmt(stmt_not_starting_with_expr_nor_block1) -> For . par(range_for) stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## full_for_stmt(stmt_not_starting_with_expr_nor_block2) -> For . par(range_for) stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## For
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Return For LPAR Const Ident Of UIdent RPAR ZWSP
##
## Ends in an error in state: 1023.
##
## for_of_stmt(stmt_not_starting_with_expr_nor_block1) -> For par(range_of) . stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## for_of_stmt(stmt_not_starting_with_expr_nor_block2) -> For par(range_of) . stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## For par(range_of)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Return Export ZWSP
##
## Ends in an error in state: 1024.
##
## export(import_decl) -> Export . import_decl [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## export(interface_decl) -> Export . interface_decl [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
## export(namespace_decl) -> Export . namespace_decl [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
## export(type_decl) -> Export . type_decl [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## export(value_decl) -> Export . value_decl [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
##
## The known suffix of the stack is as follows:
## Export
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Return Attr ZWSP
##
## Ends in an error in state: 1030.
##
## right_rec_stmt(stmt_not_starting_with_expr_nor_block1) -> Attr . stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## right_rec_stmt(stmt_not_starting_with_expr_nor_block2) -> Attr . stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Attr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Return For LPAR SEMI SEMI RPAR ZWSP
##
## Ends in an error in state: 1040.
##
## full_for_stmt(stmt_not_starting_with_expr_nor_block1) -> For par(range_for) . stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## full_for_stmt(stmt_not_starting_with_expr_nor_block2) -> For par(range_for) . stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## For par(range_for)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Return If LPAR UIdent RPAR Return Else ZWSP
##
## Ends in an error in state: 1041.
##
## if_else_stmt(stmt_not_starting_with_expr_nor_block1) -> If par(if_cond) closed_non_if_stmt Else . stmt_not_starting_with_expr_nor_block1 [ While Type Switch SEMI Return RBRACE Namespace Let LBRACE Interface Import If For Export Default Continue Const Case Break Attr ]
## if_else_stmt(stmt_not_starting_with_expr_nor_block2) -> If par(if_cond) closed_non_if_stmt Else . stmt_not_starting_with_expr_nor_block2 [ While Verbatim UIdent Type True Switch String SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## If par(if_cond) closed_non_if_stmt Else
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Switch LPAR UIdent RPAR LBRACE Case ZWSP
##
## Ends in an error in state: 1073.
##
## switch_case -> Case . case_expr COLON [ RBRACE Default Case ]
## switch_case -> Case . case_expr COLON statements [ RBRACE Default Case ]
##
## The known suffix of the stack is as follows:
## Case
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Switch LPAR UIdent RPAR LBRACE Case UIdent COLON ZWSP
##
## Ends in an error in state: 1079.
##
## switch_case -> Case case_expr COLON . [ RBRACE Default Case ]
## switch_case -> Case case_expr COLON . statements [ RBRACE Default Case ]
##
## The known suffix of the stack is as follows:
## Case case_expr COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Switch LPAR UIdent RPAR LBRACE Case UIdent LPAR RPAR ZWSP
##
## Ends in an error in state: 1081.
##
## lambda -> app_expr . [ LPAR ]
## path(app_expr) -> app_expr . nseq(selection) [ LPAR COLON ]
##
## The known suffix of the stack is as follows:
## app_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Switch LPAR UIdent RPAR LBRACE Case UIdent COLON Return BIT_AND
##
## Ends in an error in state: 1083.
##
## nseq(switch_case) -> switch_case . [ RBRACE Default ]
## nseq(switch_case) -> switch_case . nseq(switch_case) [ RBRACE Default ]
##
## The known suffix of the stack is as follows:
## switch_case
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 622, spurious reduction of production empty_return_stmt -> Return
## In state 1060, spurious reduction of production return_stmt -> empty_return_stmt
## In state 937, spurious reduction of production non_if_stmt(statement) -> return_stmt
## In state 863, spurious reduction of production statement -> non_if_stmt(statement)
## In state 1046, spurious reduction of production last_or_more(statement) -> statement
## In state 1051, spurious reduction of production statements -> last_or_more(statement)
## In state 1080, spurious reduction of production switch_case -> Case case_expr COLON statements
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Switch LPAR UIdent RPAR LBRACE Default COLON Return BIT_AND
##
## Ends in an error in state: 1087.
##
## braces(cases) -> LBRACE cases . RBRACE [ While Verbatim UIdent Type True Switch String SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE cases
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 622, spurious reduction of production empty_return_stmt -> Return
## In state 1060, spurious reduction of production return_stmt -> empty_return_stmt
## In state 937, spurious reduction of production non_if_stmt(statement) -> return_stmt
## In state 863, spurious reduction of production statement -> non_if_stmt(statement)
## In state 1046, spurious reduction of production last_or_more(statement) -> statement
## In state 1051, spurious reduction of production statements -> last_or_more(statement)
## In state 1072, spurious reduction of production switch_default -> Default COLON statements
## In state 1082, spurious reduction of production cases -> switch_default
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent LBRACE Return BIT_AND
##
## Ends in an error in state: 1090.
##
## braces(statements) -> LBRACE statements . RBRACE [ While When Verbatim UIdent Type True Switch String SEMI_ELSE SEMI Return RPAR RBRACKET RBRACE PLUS2 PARAMS Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF Directive Default Continue Const Case COMMA COLON Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## LBRACE statements
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 622, spurious reduction of production empty_return_stmt -> Return
## In state 1060, spurious reduction of production return_stmt -> empty_return_stmt
## In state 937, spurious reduction of production non_if_stmt(statement) -> return_stmt
## In state 863, spurious reduction of production statement -> non_if_stmt(statement)
## In state 1046, spurious reduction of production last_or_more(statement) -> statement
## In state 1051, spurious reduction of production statements -> last_or_more(statement)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent Implements ZWSP
##
## Ends in an error in state: 1092.
##
## interface -> Implements . intf_expr [ LBRACE ]
##
## The known suffix of the stack is as follows:
## Implements
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Namespace UIdent Implements UIdent ZWSP
##
## Ends in an error in state: 1096.
##
## namespace_decl -> Namespace namespace_binder interface . braces(statements) [ While Verbatim UIdent Type True Switch String SEMI_ELSE SEMI Return RBRACE PLUS2 Nat Namespace Mutez Match MINUS2 Let LPAR LBRACKET LBRACE Interface Int Import If Ident Function For False Export Else EOF Directive Default Continue Const Case Bytes Break Attr ]
##
## The known suffix of the stack is as follows:
## Namespace namespace_binder interface
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 33, spurious reduction of production namespace_selection -> namespace_name
## In state 1093, spurious reduction of production intf_expr -> namespace_selection
## In state 1094, spurious reduction of production interface -> Implements intf_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Export ZWSP
##
## Ends in an error in state: 1099.
##
## no_dir_top_decl -> Export . no_dir_top_decl [ Type Namespace Let Interface Import Function Export EOF Directive Const Attr ]
##
## The known suffix of the stack is as follows:
## Export
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Attr ZWSP
##
## Ends in an error in state: 1100.
##
## no_dir_top_decl -> Attr . no_dir_top_decl [ Type Namespace Let Interface Import Function Export EOF Directive Const Attr ]
##
## The known suffix of the stack is as follows:
## Attr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Import UIdent EQ UIdent BIT_AND
##
## Ends in an error in state: 1102.
##
## no_dir_top_decl -> declaration . option(SEMI) [ Type Namespace Let Interface Import Function Export EOF Directive Const Attr ]
##
## The known suffix of the stack is as follows:
## declaration
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 33, spurious reduction of production namespace_selection -> namespace_name
## In state 686, spurious reduction of production import_decl -> Import namespace_name EQ namespace_selection
## In state 764, spurious reduction of production declaration -> import_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

contract: Directive ZWSP
##
## Ends in an error in state: 1107.
##
## nseq(top_decl) -> top_decl . [ EOF ]
## nseq(top_decl) -> top_decl . nseq(top_decl) [ EOF ]
##
## The known suffix of the stack is as follows:
## top_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

interactive_expr: ZWSP
##
## Ends in an error in state: 1113.
##
## interactive_expr' -> . interactive_expr [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>
