interactive_expr: LBRACE ELLIPSIS ZWSP
##
## Ends in an error in state: 17.
##
## property -> ELLIPSIS . expr_stmt [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ELLIPSIS
##

Ill-formed record expression.
At this point, a record is expected as an expression.

interactive_expr: LBRACE Ident ZWSP
##
## Ends in an error in state: 16.
##
## property -> Ident . [ SEMI RBRACE COMMA ]
## property_name -> Ident . [ COLON ]
##
## The known suffix of the stack is as follows:
## Ident
##

Ill-formed record expression.
At this point, one of the following is expected:
  * a colon ':' followed by the expression assigned to the field;
  * a comma ',' or semicolon ';' followed by another field assignment,
    if the field is punned (that is, the name of the field is also the
    variable assigned to it);
  * a closing brace '}' if the record is complete.

interactive_expr: LBRACE UIdent ZWSP
##
## Ends in an error in state: 484.
##
## property -> property_name . COLON expr [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## property_name
##

Ill-formed record expression.
At this point, a colon ':' is expected, followed by the expression
assigned to the field.

interactive_expr: LBRACE UIdent COLON ZWSP
##
## Ends in an error in state: 485.
##
## property -> property_name COLON . expr [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## property_name COLON
##

Ill-formed record expression.
At this point, an expression is expected to be assigned to the field.

interactive_expr: LBRACE ZWSP
##
## Ends in an error in state: 12.
##
## braces(__anonymous_3) -> LBRACE . sep_or_term_list(property,object_sep) RBRACE [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Ill-formed record expression.
At this point, field declarations are expected, separated by commas
',' or semicolons ';'.

interactive_expr: Bytes SEMI
##
## Ends in an error in state: 550.
##
## interactive_expr -> expr . EOF [ # ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 163, spurious reduction of production call_expr_level -> member_expr
## In state 190, spurious reduction of production unary_expr_level -> call_expr_level
## In state 165, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 168, spurious reduction of production add_expr_level -> mult_expr_level
## In state 226, spurious reduction of production comp_expr_level -> add_expr_level
## In state 227, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 229, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 182, spurious reduction of production as_expr_level -> disj_expr_level
## In state 232, spurious reduction of production ternary_expr -> as_expr_level
## In state 166, spurious reduction of production expr_stmt -> ternary_expr
## In state 180, spurious reduction of production expr -> expr_stmt
##

Ill-formed expression.
At this point, if the expression is complete, the end of the input is
expected.

contract: Const ZWSP
##
## Ends in an error in state: 369.
##
## const_decl -> Const . binding_list [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Const
##
contract: Let ZWSP
##
## Ends in an error in state: 266.
##
## let_decl -> Let . binding_list [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Let
##
contract: Let WILD EQ Bytes COMMA ZWSP
##
## Ends in an error in state: 326.
##
## nsepseq(binding_initializer,COMMA) -> binding_initializer COMMA . nsepseq(binding_initializer,COMMA) [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## binding_initializer COMMA
##

Ill-formed value declaration.
At this point, a pattern is expected, e.g. a variable.

contract: Export ZWSP
##
## Ends in an error in state: 524.
##
## export_decl -> Export . declaration [ SEMI RBRACE EOF ]
## namespace_stmt -> Export . namespace [ SEMI RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## Export
##

Ill-formed export declaration.
At this point, one of the following is expected:
  * a value or type declaration, if exporting a declaration;
  * the keyword 'namespace', if exporting a namespace.

contract: LBRACE Export ZWSP
##
## Ends in an error in state: 368.
##
## export_decl -> Export . declaration [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Export
##
contract: Attr Export ZWSP
##
## Ends in an error in state: 381.
##
## export_decl -> nseq(Attr) Export . declaration [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Export
##

Ill-formed export declaration.
At this point, a value or type declaration is expected.

contract: If LPAR Bytes RPAR For LPAR Let Ident Of Ident SEMI
##
## Ends in an error in state: 366.
##
## for_of_stmt(closed_stmt) -> For LPAR index_kind Ident Of expr_stmt . RPAR closed_stmt [ Else ]
## for_of_stmt(statement) -> For LPAR index_kind Ident Of expr_stmt . RPAR statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## For LPAR index_kind Ident Of expr_stmt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 19, spurious reduction of production member_expr -> Ident
## In state 163, spurious reduction of production call_expr_level -> member_expr
## In state 190, spurious reduction of production unary_expr_level -> call_expr_level
## In state 165, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 168, spurious reduction of production add_expr_level -> mult_expr_level
## In state 226, spurious reduction of production comp_expr_level -> add_expr_level
## In state 227, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 229, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 182, spurious reduction of production as_expr_level -> disj_expr_level
## In state 232, spurious reduction of production ternary_expr -> as_expr_level
## In state 166, spurious reduction of production expr_stmt -> ternary_expr
##
contract: For LPAR Let Ident Of Ident SEMI
##
## Ends in an error in state: 412.
##
## for_of_stmt(statement) -> For LPAR index_kind Ident Of expr_stmt . RPAR statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## For LPAR index_kind Ident Of expr_stmt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 19, spurious reduction of production member_expr -> Ident
## In state 163, spurious reduction of production call_expr_level -> member_expr
## In state 190, spurious reduction of production unary_expr_level -> call_expr_level
## In state 165, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 168, spurious reduction of production add_expr_level -> mult_expr_level
## In state 226, spurious reduction of production comp_expr_level -> add_expr_level
## In state 227, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 229, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 182, spurious reduction of production as_expr_level -> disj_expr_level
## In state 232, spurious reduction of production ternary_expr -> as_expr_level
## In state 166, spurious reduction of production expr_stmt -> ternary_expr
##

Ill-formed bounded ("for") loop.
At this point, if the expression denoting the index range is complete,
a closing parenthesis ')' is expected.

contract: For LPAR Let Ident Of Ident RPAR ZWSP
##
## Ends in an error in state: 413.
##
## for_of_stmt(statement) -> For LPAR index_kind Ident Of expr_stmt RPAR . statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## For LPAR index_kind Ident Of expr_stmt RPAR
##
contract: If LPAR Ident RPAR For LPAR Let Ident Of Ident RPAR ZWSP
##
## Ends in an error in state: 367.
##
## for_of_stmt(closed_stmt) -> For LPAR index_kind Ident Of expr_stmt RPAR . closed_stmt [ Else ]
## for_of_stmt(statement) -> For LPAR index_kind Ident Of expr_stmt RPAR . statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## For LPAR index_kind Ident Of expr_stmt RPAR
##

Ill-formed bounded ("for") loop.
At this point, the body of the loop is expected as a statement.

contract: For LPAR Let Ident Of ZWSP
##
## Ends in an error in state: 411.
##
## for_of_stmt(statement) -> For LPAR index_kind Ident Of . expr_stmt RPAR statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## For LPAR index_kind Ident Of
##
contract: If LPAR Ident RPAR For LPAR Let Ident Of ZWSP
##
## Ends in an error in state: 365.
##
## for_of_stmt(closed_stmt) -> For LPAR index_kind Ident Of . expr_stmt RPAR closed_stmt [ Else ]
## for_of_stmt(statement) -> For LPAR index_kind Ident Of . expr_stmt RPAR statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## For LPAR index_kind Ident Of
##

Ill-formed bounded ("for") loop.
At this point, the range of the index is expected as an expression.

contract: For LPAR Let Ident ZWSP
##
## Ends in an error in state: 410.
##
## for_of_stmt(statement) -> For LPAR index_kind Ident . Of expr_stmt RPAR statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## For LPAR index_kind Ident
##
contract: If LPAR Ident RPAR For LPAR Let Ident ZWSP
##
## Ends in an error in state: 364.
##
## for_of_stmt(closed_stmt) -> For LPAR index_kind Ident . Of expr_stmt RPAR closed_stmt [ Else ]
## for_of_stmt(statement) -> For LPAR index_kind Ident . Of expr_stmt RPAR statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## For LPAR index_kind Ident
##

Ill-formed bounded ("for") loop.
At this point, the keyword 'of' is expected, followed by the index
range as an expression.

contract: For LPAR Let ZWSP
##
## Ends in an error in state: 409.
##
## for_of_stmt(statement) -> For LPAR index_kind . Ident Of expr_stmt RPAR statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## For LPAR index_kind
##
contract: If LPAR Ident RPAR For LPAR Let ZWSP
##
## Ends in an error in state: 363.
##
## for_of_stmt(closed_stmt) -> For LPAR index_kind . Ident Of expr_stmt RPAR closed_stmt [ Else ]
## for_of_stmt(statement) -> For LPAR index_kind . Ident Of expr_stmt RPAR statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## For LPAR index_kind
##

Ill-formed bounded ("for") loop.
At this point, the index is expected as a variable.

contract: For LPAR ZWSP
##
## Ends in an error in state: 408.
##
## for_of_stmt(statement) -> For LPAR . index_kind Ident Of expr_stmt RPAR statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## For LPAR
##
contract: If LPAR Ident RPAR For LPAR ZWSP
##
## Ends in an error in state: 360.
##
## for_of_stmt(closed_stmt) -> For LPAR . index_kind Ident Of expr_stmt RPAR closed_stmt [ Else ]
## for_of_stmt(statement) -> For LPAR . index_kind Ident Of expr_stmt RPAR statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## For LPAR
##

Ill-formed bounded ("for") loop.
At this point, one of the following is expected:
  * the 'const' keyword,
  * the 'let' keyword;
followed by the index as a variable.

contract: For ZWSP
##
## Ends in an error in state: 407.
##
## for_of_stmt(statement) -> For . LPAR index_kind Ident Of expr_stmt RPAR statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## For
##
contract: If LPAR Ident RPAR For ZWSP
##
## Ends in an error in state: 359.
##
## for_of_stmt(closed_stmt) -> For . LPAR index_kind Ident Of expr_stmt RPAR closed_stmt [ Else ]
## for_of_stmt(statement) -> For . LPAR index_kind Ident Of expr_stmt RPAR statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## For
##

Ill-formed bounded ("for") loop.
At this point, an opening parenthesis '(' is expected, followed by
either the keyword 'const' or 'let'.

contract: ES6FUN LPAR Bytes COLON Ident RPAR ARROW ZWSP
##
## Ends in an error in state: 476.
##
## fun_expr -> ES6FUN par(parameters) ARROW . body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## ES6FUN par(parameters) ARROW
##
contract: ES6FUN Ident ARROW ZWSP
##
## Ends in an error in state: 473.
##
## fun_expr -> ES6FUN Ident ARROW . body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## ES6FUN Ident ARROW
##
contract: ES6FUN LPAR Bytes COLON Ident RPAR COLON Ident ARROW ZWSP
##
## Ends in an error in state: 479.
##
## fun_expr -> ES6FUN par(parameters) type_annotation ARROW . body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## ES6FUN par(parameters) type_annotation ARROW
##
contract: ES6FUN LPAR RPAR COLON Ident ARROW ZWSP
##
## Ends in an error in state: 462.
##
## fun_expr -> ES6FUN LPAR RPAR type_annotation ARROW . body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR RPAR type_annotation ARROW
##
contract: ES6FUN LPAR RPAR ARROW ZWSP
##
## Ends in an error in state: 459.
##
## fun_expr -> ES6FUN LPAR RPAR ARROW . body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR RPAR ARROW
##
contract: ES6FUN WILD ARROW ZWSP
##
## Ends in an error in state: 23.
##
## fun_expr -> ES6FUN WILD ARROW . body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## ES6FUN WILD ARROW
##

Ill-formed functional expression.
At this point, the body is expected as one of the following:
  * an expression;
  * a block of statements between braces '{' '}'.

contract: If LPAR Bytes SEMI
##
## Ends in an error in state: 351.
##
## par(if_cond) -> LPAR if_cond . RPAR [ While WILD UIdent Type Switch String Return MINUS Let LPAR LBRACKET LBRACE Int Import If Ident For Export ES6FUN Const Bytes BOOL_NOT Attr ]
##
## The known suffix of the stack is as follows:
## LPAR if_cond
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 163, spurious reduction of production call_expr_level -> member_expr
## In state 190, spurious reduction of production unary_expr_level -> call_expr_level
## In state 165, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 168, spurious reduction of production add_expr_level -> mult_expr_level
## In state 226, spurious reduction of production comp_expr_level -> add_expr_level
## In state 227, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 229, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 182, spurious reduction of production as_expr_level -> disj_expr_level
## In state 232, spurious reduction of production ternary_expr -> as_expr_level
## In state 166, spurious reduction of production expr_stmt -> ternary_expr
## In state 180, spurious reduction of production expr -> expr_stmt
## In state 353, spurious reduction of production if_cond -> expr
##

Ill-formed conditional statement.
At this point, if the condition is complete, a closing parenthesis ')'
is expected.

contract: If LPAR Ident RPAR If LPAR Bytes RPAR Ident Else ZWSP
##
## Ends in an error in state: 400.
##
## if_else_stmt(closed_stmt) -> If par(if_cond) closed_stmt Else . closed_stmt [ Else ]
## if_else_stmt(statement) -> If par(if_cond) closed_stmt Else . statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## If par(if_cond) closed_stmt Else
##
contract: If LPAR Ident RPAR Ident Else ZWSP
##
## Ends in an error in state: 406.
##
## if_else_stmt(statement) -> If par(if_cond) closed_stmt Else . statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## If par(if_cond) closed_stmt Else
##

Ill-formed conditional statement.
At this point, the statement of the 'else' branch is expected.

contract: If LPAR Ident RPAR If LPAR Bytes RPAR ZWSP
##
## Ends in an error in state: 358.
##
## if_else_stmt(closed_stmt) -> If par(if_cond) . closed_stmt Else closed_stmt [ Else ]
## if_else_stmt(statement) -> If par(if_cond) . closed_stmt Else statement [ SEMI RBRACE EOF Default Case ]
## if_stmt(statement) -> If par(if_cond) . statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## If par(if_cond)
##
contract: If LPAR Ident RPAR ZWSP
##
## Ends in an error in state: 354.
##
## if_else_stmt(statement) -> If par(if_cond) . closed_stmt Else statement [ SEMI RBRACE EOF Default Case ]
## if_stmt(statement) -> If par(if_cond) . statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## If par(if_cond)
##

Ill-formed conditional statement.
At this point, the statement executed when the condition is true is
expected.

contract: If LPAR Ident RPAR If ZWSP
##
## Ends in an error in state: 357.
##
## if_else_stmt(closed_stmt) -> If . par(if_cond) closed_stmt Else closed_stmt [ Else ]
## if_else_stmt(statement) -> If . par(if_cond) closed_stmt Else statement [ SEMI RBRACE EOF Default Case ]
## if_stmt(statement) -> If . par(if_cond) statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## If
##
contract: If ZWSP
##
## Ends in an error in state: 349.
##
## if_else_stmt(statement) -> If . par(if_cond) closed_stmt Else statement [ SEMI RBRACE EOF Default Case ]
## if_stmt(statement) -> If . par(if_cond) statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## If
##

Ill-formed conditional statement.
At this point, the condition is expected as an expression between
parentheses.

contract: If LPAR ZWSP
##
## Ends in an error in state: 350.
##
## par(if_cond) -> LPAR . if_cond RPAR [ While WILD UIdent Type Switch String Return MINUS Let LPAR LBRACKET LBRACE Int Import If Ident For Export ES6FUN Const Bytes BOOL_NOT Attr ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed conditional statement.
At this point, the condition is expected as an expression.

contract: Import UIdent EQ UIdent DOT ZWSP
##
## Ends in an error in state: 332.
##
## nsepseq(module_name,DOT) -> UIdent DOT . nsepseq(module_name,DOT) [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## UIdent DOT
##
contract: Import UIdent EQ ZWSP
##
## Ends in an error in state: 330.
##
## import_stmt -> Import UIdent EQ . nsepseq(module_name,DOT) [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Import UIdent EQ
##

Ill-formed module aliasing.
At this point, the qualified name of the aliased module is expected.

contract: Import ZWSP
##
## Ends in an error in state: 328.
##
## import_stmt -> Import . UIdent EQ nsepseq(module_name,DOT) [ SEMI RBRACE Else EOF Default Case ]
## import_stmt -> Import . TIMES As UIdent From String [ SEMI RBRACE Else EOF Default Case ]
## import_stmt -> Import . braces(nsepseq(field_name,COMMA)) From String [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Import
##

Ill-formed module aliasing.
At this point, the alias is expected as a module name.

contract: Import UIdent ZWSP
##
## Ends in an error in state: 329.
##
## import_stmt -> Import UIdent . EQ nsepseq(module_name,DOT) [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Import UIdent
##

Ill-formed module aliasing.
At this point, the assignment symbol '=' is expected, followed by the
qualified name of the aliased module

contract: LBRACE Ident Default
##
## Ends in an error in state: 445.
##
## braces(statements) -> LBRACE statements . RBRACE [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LBRACE statements
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 19, spurious reduction of production member_expr -> Ident
## In state 163, spurious reduction of production call_expr_level -> member_expr
## In state 190, spurious reduction of production unary_expr_level -> call_expr_level
## In state 165, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 168, spurious reduction of production add_expr_level -> mult_expr_level
## In state 226, spurious reduction of production comp_expr_level -> add_expr_level
## In state 227, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 229, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 182, spurious reduction of production as_expr_level -> disj_expr_level
## In state 232, spurious reduction of production ternary_expr -> as_expr_level
## In state 166, spurious reduction of production expr_stmt -> ternary_expr
## In state 419, spurious reduction of production base_stmt(statement) -> expr_stmt
## In state 396, spurious reduction of production statement -> base_stmt(statement)
## In state 447, spurious reduction of production nsepseq(statement,SEMI) -> statement
## In state 453, spurious reduction of production sep_or_term_list(statement,SEMI) -> nsepseq(statement,SEMI)
## In state 451, spurious reduction of production statements -> sep_or_term_list(statement,SEMI)
##

Ill-formed block of statements.
At this point, if the statement is complete, a closing brace '}' is
expected.

contract: LBRACE Ident SEMI ZWSP
##
## Ends in an error in state: 448.
##
## nsepseq(statement,SEMI) -> statement SEMI . nsepseq(statement,SEMI) [ RBRACE ]
## nseq(__anonymous_0(statement,SEMI)) -> statement SEMI . [ RBRACE ]
## nseq(__anonymous_0(statement,SEMI)) -> statement SEMI . nseq(__anonymous_0(statement,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## statement SEMI
##

Ill-formed block of statements.
At this point, one of the following is expected:
  * another statement;
  * a closing brace '}' if the block is complete.

contract: Switch LPAR Ident RPAR LBRACE Case ZWSP
##
## Ends in an error in state: 433.
##
## case -> Case . expr COLON [ RBRACE Default Case ]
## case -> Case . expr COLON case_statements [ RBRACE Default Case ]
##
## The known suffix of the stack is as follows:
## Case
##

Ill-formed switch statement.
At this point, an expression is expected, whose value is used to
select the case to be executed first.

contract: Switch LPAR Bytes SEMI
##
## Ends in an error in state: 257.
##
## par(switch_cond) -> LPAR switch_cond . RPAR [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAR switch_cond
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 163, spurious reduction of production call_expr_level -> member_expr
## In state 190, spurious reduction of production unary_expr_level -> call_expr_level
## In state 165, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 168, spurious reduction of production add_expr_level -> mult_expr_level
## In state 226, spurious reduction of production comp_expr_level -> add_expr_level
## In state 227, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 229, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 182, spurious reduction of production as_expr_level -> disj_expr_level
## In state 232, spurious reduction of production ternary_expr -> as_expr_level
## In state 166, spurious reduction of production expr_stmt -> ternary_expr
## In state 180, spurious reduction of production expr -> expr_stmt
## In state 259, spurious reduction of production switch_cond -> expr
##

Ill-formed switch statement.
At this point, if the expression is complete, a closing parenthesis
')' is expected.

contract: Switch LPAR Ident RPAR LBRACE Case Ident COLON ZWSP
##
## Ends in an error in state: 435.
##
## case -> Case expr COLON . [ RBRACE Default Case ]
## case -> Case expr COLON . case_statements [ RBRACE Default Case ]
##
## The known suffix of the stack is as follows:
## Case expr COLON
##

Ill-formed switch statement.
At this point, one of the following is expected:
  * case statements separated by semicolons ';';
  * a new case starting with the keyword 'case';
  * the default case starting with the keyword 'default';
  * a `break` to terminate the current switch;
  * a closing brace '}' if the switch is complete.

contract: Switch LPAR Ident RPAR LBRACE Default COLON ZWSP
##
## Ends in an error in state: 263.
##
## default_case -> Default COLON . [ RBRACE ]
## default_case -> Default COLON . case_statements [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Default COLON
##

Ill-formed switch statement.
At this point, one of the following is expected:
  * case statements separated by semicolons ';';
  * a `break` to terminate the current switch;
  * a closing brace '}' if the switch is complete.

contract: Switch LPAR Bytes RPAR LBRACE Case Bytes SEMI
##
## Ends in an error in state: 434.
##
## case -> Case expr . COLON [ RBRACE Default Case ]
## case -> Case expr . COLON case_statements [ RBRACE Default Case ]
##
## The known suffix of the stack is as follows:
## Case expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 163, spurious reduction of production call_expr_level -> member_expr
## In state 190, spurious reduction of production unary_expr_level -> call_expr_level
## In state 165, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 168, spurious reduction of production add_expr_level -> mult_expr_level
## In state 226, spurious reduction of production comp_expr_level -> add_expr_level
## In state 227, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 229, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 182, spurious reduction of production as_expr_level -> disj_expr_level
## In state 232, spurious reduction of production ternary_expr -> as_expr_level
## In state 166, spurious reduction of production expr_stmt -> ternary_expr
## In state 180, spurious reduction of production expr -> expr_stmt
##

Ill-formed switch statement.
At this point, if the case expression is complete, a colon ':' is
expected.

contract: Switch LPAR Ident RPAR LBRACE Default ZWSP
##
## Ends in an error in state: 262.
##
## default_case -> Default . COLON [ RBRACE ]
## default_case -> Default . COLON case_statements [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Default
##

Ill-formed switch statement.
At this point, a colon ':' for the default case is expected.

contract: Switch LPAR Ident RPAR LBRACE ZWSP
##
## Ends in an error in state: 261.
##
## braces(cases) -> LBRACE . cases RBRACE [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Ill-formed switch statement.
At this point, a case starting with the keyword 'case' is expected.

contract: Switch LPAR Ident RPAR ZWSP
##
## Ends in an error in state: 260.
##
## switch_stmt -> Switch par(switch_cond) . braces(cases) [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Switch par(switch_cond)
##

Ill-formed switch statement.
At this point, cases are expected between braces '{' '}'.

contract: Switch ZWSP
##
## Ends in an error in state: 156.
##
## switch_stmt -> Switch . par(switch_cond) braces(cases) [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Switch
##

Ill-formed switch statement.
At this point, an expression between parentheses is expected.

contract: Switch LPAR ZWSP
##
## Ends in an error in state: 157.
##
## par(switch_cond) -> LPAR . switch_cond RPAR [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed switch statement.
At this point, the expression evaluated against the cases is expected.

contract: Switch LPAR Bytes RPAR LBRACE Default COLON Return While
##
## Ends in an error in state: 429.
##
## nsepseq(case_statement,SEMI) -> case_statement . [ RBRACE Default Case ]
## nsepseq(case_statement,SEMI) -> case_statement . SEMI nsepseq(case_statement,SEMI) [ RBRACE Default Case ]
## nseq(__anonymous_0(case_statement,SEMI)) -> case_statement . SEMI [ RBRACE Default Case ]
## nseq(__anonymous_0(case_statement,SEMI)) -> case_statement . SEMI nseq(__anonymous_0(case_statement,SEMI)) [ RBRACE Default Case ]
##
## The known suffix of the stack is as follows:
## case_statement
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 264, spurious reduction of production return_stmt -> Return
## In state 415, spurious reduction of production base_stmt(statement) -> return_stmt
## In state 396, spurious reduction of production statement -> base_stmt(statement)
## In state 424, spurious reduction of production case_statement -> statement
##

Ill-formed switch statement.
At this point, if the case statement is complete, one of the following
is expected:
  * a semicolon ';' followed by another case statement;
  * a new case starting with the keyword 'case';
  * the default case starting with the keyword 'default';
  * a closing brace '}' if the switch is complete.

contract: Switch LPAR Ident RPAR LBRACE Default COLON Ident SEMI ZWSP
##
## Ends in an error in state: 430.
##
## nsepseq(case_statement,SEMI) -> case_statement SEMI . nsepseq(case_statement,SEMI) [ RBRACE Default Case ]
## nseq(__anonymous_0(case_statement,SEMI)) -> case_statement SEMI . [ RBRACE Default Case ]
## nseq(__anonymous_0(case_statement,SEMI)) -> case_statement SEMI . nseq(__anonymous_0(case_statement,SEMI)) [ RBRACE Default Case ]
##
## The known suffix of the stack is as follows:
## case_statement SEMI
##

Ill-formed switch statement.
At this point, one of the following is expected:
  * another statement for the current case;
  * a new case starting with the keyword 'case';
  * the default case starting with the keyword 'default';
  * a `break` to terminate the current switch;
  * a closing brace '}' if the switch is complete.

contract: Switch LPAR Bytes RPAR LBRACE Default COLON Bytes Default
##
## Ends in an error in state: 440.
##
## braces(cases) -> LBRACE cases . RBRACE [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## LBRACE cases
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 163, spurious reduction of production call_expr_level -> member_expr
## In state 190, spurious reduction of production unary_expr_level -> call_expr_level
## In state 165, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 168, spurious reduction of production add_expr_level -> mult_expr_level
## In state 226, spurious reduction of production comp_expr_level -> add_expr_level
## In state 227, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 229, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 182, spurious reduction of production as_expr_level -> disj_expr_level
## In state 232, spurious reduction of production ternary_expr -> as_expr_level
## In state 166, spurious reduction of production expr_stmt -> ternary_expr
## In state 419, spurious reduction of production base_stmt(statement) -> expr_stmt
## In state 396, spurious reduction of production statement -> base_stmt(statement)
## In state 424, spurious reduction of production case_statement -> statement
## In state 429, spurious reduction of production nsepseq(case_statement,SEMI) -> case_statement
## In state 427, spurious reduction of production sep_or_term_list(case_statement,SEMI) -> nsepseq(case_statement,SEMI)
## In state 425, spurious reduction of production case_statements -> sep_or_term_list(case_statement,SEMI)
## In state 428, spurious reduction of production default_case -> Default COLON case_statements
## In state 439, spurious reduction of production cases -> default_case
##

Ill-formed switch statement.
At this point, if the last case is complete, a closing brace '}' is
expected.

contract: LBRACE ZWSP
##
## Ends in an error in state: 24.
##
## braces(statements) -> LBRACE . statements RBRACE [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Ill-formed block of statements.
At this point, the first statement is expected.

contract: LBRACKET ELLIPSIS ZWSP
##
## Ends in an error in state: 493.
##
## array_item -> ELLIPSIS . expr [ RBRACKET COMMA ]
##
## The known suffix of the stack is as follows:
## ELLIPSIS
##

Ill-formed tuple inclusion.
At this point, an expression denoting the included tuple is expected.

contract: LBRACKET Ident COLON
##
## Ends in an error in state: 498.
##
## nsepseq(array_item,COMMA) -> array_item . [ RBRACKET ]
## nsepseq(array_item,COMMA) -> array_item . COMMA nsepseq(array_item,COMMA) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## array_item
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 19, spurious reduction of production member_expr -> Ident
## In state 163, spurious reduction of production call_expr_level -> member_expr
## In state 190, spurious reduction of production unary_expr_level -> call_expr_level
## In state 165, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 168, spurious reduction of production add_expr_level -> mult_expr_level
## In state 226, spurious reduction of production comp_expr_level -> add_expr_level
## In state 227, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 229, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 182, spurious reduction of production as_expr_level -> disj_expr_level
## In state 232, spurious reduction of production ternary_expr -> as_expr_level
## In state 166, spurious reduction of production expr_stmt -> ternary_expr
## In state 180, spurious reduction of production expr -> expr_stmt
## In state 497, spurious reduction of production array_item -> expr
##

Ill-formed tuple expression.
At this point, if the component is complete, one of the following is
expected:
  * a comma ',' followed by another component;
  * a closing bracket ']' if the tuple is complete.

contract: ES6FUN LPAR Bytes SEMI
##
## Ends in an error in state: 469.
##
## parameter -> expr . [ RPAR COMMA ]
## parameter -> expr . type_annotation [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 163, spurious reduction of production call_expr_level -> member_expr
## In state 190, spurious reduction of production unary_expr_level -> call_expr_level
## In state 165, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 168, spurious reduction of production add_expr_level -> mult_expr_level
## In state 226, spurious reduction of production comp_expr_level -> add_expr_level
## In state 227, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 229, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 182, spurious reduction of production as_expr_level -> disj_expr_level
## In state 232, spurious reduction of production ternary_expr -> as_expr_level
## In state 166, spurious reduction of production expr_stmt -> ternary_expr
## In state 180, spurious reduction of production expr -> expr_stmt
##

Ill-formed function parameter.
At this point, one of the following is expected:
  * a type annotation starting with a colon ':';
  * a closing parenthesis ')' otherwise.

contract: Ident As LPAR ZWSP
##
## Ends in an error in state: 44.
##
## par(type_expr) -> LPAR . type_expr RPAR [ SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed function parameter or parenthesised expression.
At this point, one of the following is expected:
  * a parameter if defining a functional type;
  * a type expression if writing a parenthesised type.

contract: Bytes As ES6FUN LPAR ZWSP
##
## Ends in an error in state: 53.
##
## par(nsepseq(fun_param,COMMA)) -> LPAR . nsepseq(fun_param,COMMA) RPAR [ ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed function parameter.
At this point, one of the following is expected:
  * a parameter;
  * a closing parenthesis if the parameters are complete.

contract: ES6FUN LPAR Bytes COLON Ident RPAR COLON Ident While
##
## Ends in an error in state: 478.
##
## fun_expr -> ES6FUN par(parameters) type_annotation . ARROW body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## ES6FUN par(parameters) type_annotation
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 50, spurious reduction of production core_type -> Ident
## In state 108, spurious reduction of production type_expr -> core_type
## In state 112, spurious reduction of production type_annotation -> COLON type_expr
##
contract: ES6FUN Ident ZWSP
##
## Ends in an error in state: 472.
##
## fun_expr -> ES6FUN Ident . ARROW body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## ES6FUN Ident
##
# contract: LPAR Ident COLON Ident RPAR COLON Ident ZWSP
contract: ES6FUN LPAR RPAR COLON Ident While
##
## Ends in an error in state: 461.
##
## fun_expr -> ES6FUN LPAR RPAR type_annotation . ARROW body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR RPAR type_annotation
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 50, spurious reduction of production core_type -> Ident
## In state 108, spurious reduction of production type_expr -> core_type
## In state 112, spurious reduction of production type_annotation -> COLON type_expr
##

Ill-formed functional expression.
At this point, if the return type is complete, an arrow '=>' is
expected, followed by the body.

contract: ES6FUN LPAR Ident COLON Ident COMMA ZWSP
##
## Ends in an error in state: 467.
##
## nsepseq(parameter,COMMA) -> parameter COMMA . nsepseq(parameter,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## parameter COMMA
##

Ill-formed function parameters.
At this point, another parameter is expected.

contract: ES6FUN LPAR Bytes COLON Ident RPAR ZWSP
##
## Ends in an error in state: 475.
##
## fun_expr -> ES6FUN par(parameters) . ARROW body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
## fun_expr -> ES6FUN par(parameters) . type_annotation ARROW body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## ES6FUN par(parameters)
##
# contract: LPAR RPAR ZWSP
contract: ES6FUN LPAR RPAR ZWSP
##
## Ends in an error in state: 458.
##
## fun_expr -> ES6FUN LPAR RPAR . ARROW body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
## fun_expr -> ES6FUN LPAR RPAR . type_annotation ARROW body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR RPAR
##

Ill-formed functional expression.
At this point, one of the following is expected:
  * an arrow '=>' followed by the function body;
  * the return type annotation starting with a colon ':'.

contract: ES6FUN LPAR Bytes COLON Ident While
##
## Ends in an error in state: 466.
##
## nsepseq(parameter,COMMA) -> parameter . [ RPAR ]
## nsepseq(parameter,COMMA) -> parameter . COMMA nsepseq(parameter,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## parameter
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 50, spurious reduction of production core_type -> Ident
## In state 108, spurious reduction of production type_expr -> core_type
## In state 112, spurious reduction of production type_annotation -> COLON type_expr
## In state 470, spurious reduction of production parameter -> expr type_annotation
##

Ill-formed functional expression.
At this point, if the type of the parameter is complete, one of the
following is expected:
  * a comma ',' followed by another parameter;
  * a closing parenthesis ')' if there are no more parameters.

contract: LPAR ZWSP
##
## Ends in an error in state: 9.
##
## par(expr) -> LPAR . expr RPAR [ TIMES SLASH SEMI RPAR REM_EQ REM RBRACKET RBRACE QMARK PLUS_EQ PLUS NE MULT_EQ MINUS_EQ MINUS LT LPAR LE LBRACKET GT Else EQ2 EQ EOF Default DOT DIV_EQ Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed  parenthesised expression.
At this point, an expression is expected.

contract: ES6FUN LPAR ZWSP
##
## Ends in an error in state: 457.
##
## fun_expr -> ES6FUN LPAR . RPAR ARROW body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
## fun_expr -> ES6FUN LPAR . RPAR type_annotation ARROW body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
## par(parameters) -> LPAR . parameters RPAR [ COLON ARROW ]
##
## The known suffix of the stack is as follows:
## ES6FUN LPAR
##

Ill-formed functional expression.
At this point, one of the following is expected:
  * a closing parenthesis ')';
  * a parameter name.

contract: Let LBRACE Attr Ident ZWSP
##
## Ends in an error in state: 315.
##
## braces(property_patterns) -> LBRACE property_patterns . RBRACE [ EQ COLON ]
## property_patterns -> property_patterns . object_sep property_pattern [ SEMI RBRACE COMMA ]
## property_patterns -> property_patterns . object_sep object_rest_pattern [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## LBRACE property_patterns
##

Ill-formed record pattern.
At this point, one of the following is expected:
  * a comma ',' or semicolon ';' followed by another field pattern;
  * a comma ',' or semicolon followed by an ellipsis '...' and a
    variable matching the rest of the record;
  * a closing brace '}' if the record pattern is complete.

contract: Let LBRACE Ident COMMA ELLIPSIS ZWSP
##
## Ends in an error in state: 318.
##
## object_rest_pattern -> ELLIPSIS . Ident [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ELLIPSIS
##

Ill-formed record pattern.
At this point, a variable is expected to match the remaining record.

contract: Let LBRACE Ident COLON ZWSP
##
## Ends in an error in state: 287.
##
## property_pattern -> Ident COLON . binding_initializer [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident COLON
##

Ill-formed record field pattern.
At this point, one of the following is expected:
  * optional attributes followed by a variable;
  * a catch-all '_' pattern;
  * a record pattern;
  * a tuple pattern.

contract: Let LBRACE Ident COMMA ZWSP
##
## Ends in an error in state: 317.
##
## property_patterns -> property_patterns object_sep . property_pattern [ SEMI RBRACE COMMA ]
## property_patterns -> property_patterns object_sep . object_rest_pattern [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## property_patterns object_sep
##

Ill-formed record pattern.
At this point, one of the following is expected:
  * another field pattern;
  * a pattern matching the rest of the record, starting with an
    ellipsis '...'.

contract: Let LBRACE Ident EQ ZWSP
##
## Ends in an error in state: 285.
##
## property_pattern -> Ident EQ . expr [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident EQ
##

Ill-formed record pattern.
At this point, the default value for the field is expected as an
expression.

contract: Let LBRACE Ident ZWSP
##
## Ends in an error in state: 284.
##
## property_pattern -> Ident . EQ expr [ SEMI RBRACE COMMA ]
## property_pattern -> Ident . COLON binding_initializer [ SEMI RBRACE COMMA ]
## var_pattern -> Ident . [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##

Ill-formed record pattern.
At this point, one of the following is expected:
  * the assignment symbol '=' followed by a default value as an
    expression;
  * a colon ':' followed by a pattern for the right-hand side of the
    field;
  * a comma ',' or semicolon ';' followed by another field pattern;
  * a closing brace '}' if the record pattern is complete.

contract: Let LBRACE ZWSP
##
## Ends in an error in state: 283.
##
## braces(property_patterns) -> LBRACE . property_patterns RBRACE [ EQ COLON ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Ill-formed record pattern.
At this point, field patterns are expected to be separated by commas
',' or semicolons ';'.

contract: Let LBRACKET WILD COLON
##
## Ends in an error in state: 275.
##
## array_item_patterns -> array_item_patterns . COMMA array_item_pattern [ RBRACKET COMMA ]
## array_item_patterns -> array_item_patterns . COMMA array_rest_pattern [ RBRACKET COMMA ]
## array_pattern -> LBRACKET array_item_patterns . RBRACKET [ RBRACKET EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LBRACKET array_item_patterns
##

Ill-formed tuple pattern.
At this point, one of the following is expected:
  * a comma ',' followed by another tuple component as a pattern;
  * a comma ',' followed by a pattern matching the rest of the tuple,
    starting with an ellipsis '...';
  * a closing bracket ']' if the tuple pattern is complete.

contract: Let LBRACKET WILD COMMA ZWSP
##
## Ends in an error in state: 277.
##
## array_item_patterns -> array_item_patterns COMMA . array_item_pattern [ RBRACKET COMMA ]
## array_item_patterns -> array_item_patterns COMMA . array_rest_pattern [ RBRACKET COMMA ]
##
## The known suffix of the stack is as follows:
## array_item_patterns COMMA
##

Ill-formed tuple pattern.
At this point, one of the following is expected:
  * another component as a pattern;
  * a pattern matching the rest of the tuple, starting with an
    ellipsis '...'.

contract: Let LBRACKET WILD COMMA ELLIPSIS ZWSP
##
## Ends in an error in state: 278.
##
## array_rest_pattern -> ELLIPSIS . Ident [ RBRACKET COMMA ]
##
## The known suffix of the stack is as follows:
## ELLIPSIS
##

Ill-formed pattern for the rest of a tuple.
At this point, a variable is expected to match the rest of the tuple.

contract: Let LBRACKET ZWSP
##
## Ends in an error in state: 268.
##
## array_pattern -> LBRACKET . array_item_patterns RBRACKET [ RBRACKET EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

Ill-formed tuple pattern.
At this point, a tuple component is expected as a pattern.

contract: Let WILD COLON Ident EQ ZWSP
##
## Ends in an error in state: 310.
##
## binding_initializer -> binding_pattern binding_type EQ . expr [ SEMI RBRACE Else EOF Default Case COMMA ]
##
## The known suffix of the stack is as follows:
## binding_pattern binding_type EQ
##

Ill-formed value declaration.
At this point, an expression is expected.

contract: Let WILD COLON Ident ZWSP
##
## Ends in an error in state: 309.
##
## binding_initializer -> binding_pattern binding_type . EQ expr [ SEMI RBRACE Else EOF Default Case COMMA ]
##
## The known suffix of the stack is as follows:
## binding_pattern binding_type
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 50, spurious reduction of production core_type -> Ident
## In state 108, spurious reduction of production type_expr -> core_type
## In state 307, spurious reduction of production binding_type -> COLON type_expr
##

Ill-formed value declaration.
At this point, if the type annotation is complete, the assignment
symbol '=' is expected, followed by an expression.

contract: Let WILD COLON ZWSP
##
## Ends in an error in state: 294.
##
## binding_type -> COLON . type_expr [ EQ ]
## binding_type -> COLON . type_generics type_expr [ EQ ]
##
## The known suffix of the stack is as follows:
## COLON
##
contract: WILD As LBRACKET ZWSP
##
## Ends in an error in state: 45.
##
## type_tuple -> LBRACKET . type_components RBRACKET [ SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##
contract: ES6FUN LPAR Bytes COLON ZWSP
##
## Ends in an error in state: 48.
##
## type_annotation -> COLON . type_expr [ SEMI RPAR RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## COLON
##

Ill-formed type annotation.
At this point, a type expression is expected.

contract: Let WILD ZWSP
##
## Ends in an error in state: 291.
##
## binding_initializer -> binding_pattern . EQ expr [ SEMI RBRACE Else EOF Default Case COMMA ]
## binding_initializer -> binding_pattern . binding_type EQ expr [ SEMI RBRACE Else EOF Default Case COMMA ]
##
## The known suffix of the stack is as follows:
## binding_pattern
##

Ill-formed value declaration.
At this point, one of the following is expected:
  * the assignment symbol '=' followed by an expression;
  * a type annotation starting with a colon ':'.

contract: MINUS LPAR LBRACE Ident RBRACE ZWSP
##
## Ends in an error in state: 501.
##
## par(expr) -> LPAR expr . RPAR [ TIMES SLASH SEMI RPAR REM_EQ REM RBRACKET RBRACE QMARK PLUS_EQ PLUS NE MULT_EQ MINUS_EQ MINUS LT LPAR LE LBRACKET GT Else EQ2 EQ EOF Default DOT DIV_EQ Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## LPAR expr
##

Ill-formed expression.
At this point, one of the following is expected:
 * a closing parenthesis ')', if definining a parenthesized expression
 * a closing parenthesis ')' after the parameters, if defining a function expression.

contract: Namespace UIdent LBRACE Ident SEMI ZWSP
##
## Ends in an error in state: 529.
##
## nsepseq(stmt_or_namespace,SEMI) -> stmt_or_namespace SEMI . nsepseq(stmt_or_namespace,SEMI) [ RBRACE ]
## nseq(__anonymous_0(stmt_or_namespace,SEMI)) -> stmt_or_namespace SEMI . [ RBRACE ]
## nseq(__anonymous_0(stmt_or_namespace,SEMI)) -> stmt_or_namespace SEMI . nseq(__anonymous_0(stmt_or_namespace,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## stmt_or_namespace SEMI
##

Ill-formed module declaration.
At this point, one of the following is expected:
  * a statement or a submodule declaration;
  * a closing brace '}' if the module is complete.

contract: Namespace UIdent LBRACE Ident RPAR
##
## Ends in an error in state: 528.
##
## nsepseq(stmt_or_namespace,SEMI) -> stmt_or_namespace . [ RBRACE ]
## nsepseq(stmt_or_namespace,SEMI) -> stmt_or_namespace . SEMI nsepseq(stmt_or_namespace,SEMI) [ RBRACE ]
## nseq(__anonymous_0(stmt_or_namespace,SEMI)) -> stmt_or_namespace . SEMI [ RBRACE ]
## nseq(__anonymous_0(stmt_or_namespace,SEMI)) -> stmt_or_namespace . SEMI nseq(__anonymous_0(stmt_or_namespace,SEMI)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## stmt_or_namespace
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 19, spurious reduction of production member_expr -> Ident
## In state 163, spurious reduction of production call_expr_level -> member_expr
## In state 190, spurious reduction of production unary_expr_level -> call_expr_level
## In state 165, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 168, spurious reduction of production add_expr_level -> mult_expr_level
## In state 226, spurious reduction of production comp_expr_level -> add_expr_level
## In state 227, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 229, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 182, spurious reduction of production as_expr_level -> disj_expr_level
## In state 232, spurious reduction of production ternary_expr -> as_expr_level
## In state 166, spurious reduction of production expr_stmt -> ternary_expr
## In state 419, spurious reduction of production base_stmt(statement) -> expr_stmt
## In state 396, spurious reduction of production statement -> base_stmt(statement)
## In state 530, spurious reduction of production stmt_or_namespace -> statement
##

Ill-formed module declaration.
At this point, if the statement is complete, one of the following is
expected:
  * a semicolon ';' followed by another statement or submodule;
  * a closing brace '}' if the module is complete.

contract: Namespace UIdent LBRACE ZWSP
##
## Ends in an error in state: 523.
##
## braces(stmts_or_namespace) -> LBRACE . stmts_or_namespace RBRACE [ SEMI RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Ill-formed module declaration.
At this point, the first statement or submodule is expected.

contract: Namespace UIdent ZWSP
##
## Ends in an error in state: 522.
##
## namespace -> Namespace UIdent . braces(stmts_or_namespace) [ SEMI RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## Namespace UIdent
##

Ill-formed module declaration.
At this point, an opening brace '{' is expected, followed by
statements and/or submodules.

contract: Namespace ZWSP
##
## Ends in an error in state: 521.
##
## namespace -> Namespace . UIdent braces(stmts_or_namespace) [ SEMI RBRACE EOF ]
##
## The known suffix of the stack is as follows:
## Namespace
##

Ill-formed module declaration.
At this point, the name of the module is expected, starting with a
capital letter.

contract: Type UIdent EQ ZWSP
##
## Ends in an error in state: 34.
##
## type_decl -> Type UIdent EQ . type_expr [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Type UIdent EQ
##
contract: Type Ident EQ ZWSP
##
## Ends in an error in state: 151.
##
## type_decl -> Type Ident EQ . type_expr [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Type Ident EQ
##
contract: Type UIdent LT Ident GT EQ ZWSP
##
## Ends in an error in state: 147.
##
## type_decl -> Type UIdent type_params EQ . type_expr [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Type UIdent type_params EQ
##

Ill-formed type declaration.
At this point, a type expression is expected.

contract: Type UIdent LT Ident COMMA ZWSP
##
## Ends in an error in state: 29.
##
## nsepseq(type_param,COMMA) -> Ident COMMA . nsepseq(type_param,COMMA) [ GT ]
##
## The known suffix of the stack is as follows:
## Ident COMMA
##
contract: Type UIdent LT ZWSP
##
## Ends in an error in state: 27.
##
## chevrons(nsepseq(type_param,COMMA)) -> LT . nsepseq(type_param,COMMA) GT [ EQ ]
## chevrons(nsepseq(type_param,COMMA)) -> LT . nsepseq(type_param,COMMA) GT ZWSP [ EQ ]
##
## The known suffix of the stack is as follows:
## LT
##

Ill-formed parametric type declaration.
At this point, a type parameter is expected.

contract: Ident As Ident LT WILD ZWSP
##
## Ends in an error in state: 129.
##
## nsepseq(type_ctor_arg,COMMA) -> type_ctor_arg . [ GT ]
## nsepseq(type_ctor_arg,COMMA) -> type_ctor_arg . COMMA nsepseq(type_ctor_arg,COMMA) [ GT ]
##
## The known suffix of the stack is as follows:
## type_ctor_arg
##

Ill-formed instantiation of a parametric type.
At this point, one of the following is expected:
  * a comma ',' followed by another type argument as a type expression;
  * a closing chevron '>' if there are no more arguments.

contract: Bytes As Ident LT Ident COMMA ZWSP
##
## Ends in an error in state: 130.
##
## nsepseq(type_ctor_arg,COMMA) -> type_ctor_arg COMMA . nsepseq(type_ctor_arg,COMMA) [ GT ]
##
## The known suffix of the stack is as follows:
## type_ctor_arg COMMA
##

Ill-formed instantiation of a parametric type.
At this point, another type argument is expected as a type expression.

contract: Ident As Ident LT ZWSP
##
## Ends in an error in state: 42.
##
## chevrons(type_ctor_args) -> LT . type_ctor_args GT [ SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
## chevrons(type_ctor_args) -> LT . type_ctor_args GT ZWSP [ SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
##
## The known suffix of the stack is as follows:
## LT
##

Ill-formed instantiation of a parametric type.
At this point, a type argument is expected as a type expression.

contract: UIdent LPAR Bytes SEMI
##
## Ends in an error in state: 509.
##
## nsepseq(ctor_arg,COMMA) -> ctor_arg . [ RPAR ]
## nsepseq(ctor_arg,COMMA) -> ctor_arg . COMMA nsepseq(ctor_arg,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## ctor_arg
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 163, spurious reduction of production call_expr_level -> member_expr
## In state 190, spurious reduction of production unary_expr_level -> call_expr_level
## In state 165, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 168, spurious reduction of production add_expr_level -> mult_expr_level
## In state 226, spurious reduction of production comp_expr_level -> add_expr_level
## In state 227, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 229, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 182, spurious reduction of production as_expr_level -> disj_expr_level
## In state 232, spurious reduction of production ternary_expr -> as_expr_level
## In state 166, spurious reduction of production expr_stmt -> ternary_expr
## In state 180, spurious reduction of production expr -> expr_stmt
## In state 507, spurious reduction of production ctor_arg -> expr
##

Ill-formed instantiation of a parametric type.
At this point, if the argument is complete, one of the following is
expected:
  * a comma ',' followed by another argument as an expression;
  * a closing parenthesis ')' if there are no more arguments.

contract: UIdent LPAR ZWSP
##
## Ends in an error in state: 6.
##
## ctor_expr -> UIdent LPAR . option(ctor_args) RPAR [ TIMES SLASH SEMI RPAR REM_EQ REM RBRACKET RBRACE QMARK PLUS_EQ PLUS NE MULT_EQ MINUS_EQ MINUS LT LPAR LE LBRACKET GT Else EQ2 EQ EOF Default DOT DIV_EQ Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## UIdent LPAR
##

Ill-formed instantiation of a constructor.
At this point, one of the following is expected:
  * arguments as expressions separated by commas ',';
  * a closing parenthesis ')' if the constructor has no arguments.

contract: UIdent LPAR Ident COMMA ZWSP
##
## Ends in an error in state: 510.
##
## nsepseq(ctor_arg,COMMA) -> ctor_arg COMMA . nsepseq(ctor_arg,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## ctor_arg COMMA
##

Ill-formed instantiation of a constructor.
At this point, an argument is expected as an expression.

contract: Type UIdent LT Ident GT While
##
## Ends in an error in state: 32.
##
## chevrons(nsepseq(type_param,COMMA)) -> LT nsepseq(type_param,COMMA) GT . [ EQ ]
## chevrons(nsepseq(type_param,COMMA)) -> LT nsepseq(type_param,COMMA) GT . ZWSP [ EQ ]
##
## The known suffix of the stack is as follows:
## LT nsepseq(type_param,COMMA) GT
##
contract: Type UIdent LT Ident GT ZWSP ZWSP
##
## Ends in an error in state: 146.
##
## type_decl -> Type UIdent type_params . EQ type_expr [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Type UIdent type_params
##

Ill-formed parametric type declaration.
At this point, an assignment symbol '=' is expected, followed by a
type expression.

contract: Const Ident COLON LT UIdent GT While
##
## Ends in an error in state: 303.
##
## chevrons(nsepseq(type_name,COMMA)) -> LT nsepseq(type_name,COMMA) GT . [ WILD VBAR UIdent String LPAR LBRACKET LBRACE Int Ident ES6FUN Attr ]
## chevrons(nsepseq(type_name,COMMA)) -> LT nsepseq(type_name,COMMA) GT . ZWSP [ WILD VBAR UIdent String LPAR LBRACKET LBRACE Int Ident ES6FUN Attr ]
##
## The known suffix of the stack is as follows:
## LT nsepseq(type_name,COMMA) GT
##

Ill-formed value declaration.
At this point, an assignment symbol '=' is expected, followed by a
expression.


contract: Type UIdent LT Ident ZWSP
##
## Ends in an error in state: 28.
##
## nsepseq(type_param,COMMA) -> Ident . [ GT ]
## nsepseq(type_param,COMMA) -> Ident . COMMA nsepseq(type_param,COMMA) [ GT ]
##
## The known suffix of the stack is as follows:
## Ident
##

Ill-formed parametric type declaration.
At this point, one of the following is expected:
  * a comma ',' followed by another type parameter;
  * a closing chevron '>' if there are no more type parameters.

contract: Type UIdent ZWSP
##
## Ends in an error in state: 26.
##
## type_decl -> Type UIdent . EQ type_expr [ SEMI RBRACE Else EOF Default Case ]
## type_decl -> Type UIdent . type_params EQ type_expr [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Type UIdent
##

Ill-formed type declaration.
At this point, one of the following is expected:
  * an opening chevron '<' followed by type parameters, if defining a
    parametric type;
  * an assignment symbol '=' followed by a type expression, if the
    type is not parametric.

contract: Type ZWSP
##
## Ends in an error in state: 25.
##
## type_decl -> Type . Ident EQ type_expr [ SEMI RBRACE Else EOF Default Case ]
## type_decl -> Type . Ident type_params EQ type_expr [ SEMI RBRACE Else EOF Default Case ]
## type_decl -> Type . UIdent EQ type_expr [ SEMI RBRACE Else EOF Default Case ]
## type_decl -> Type . UIdent type_params EQ type_expr [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Type
##

Ill-formed type declaration.
At this point, the name of the type being defined is expected.

contract: UIdent DOT UIdent ZWSP
##
## Ends in an error in state: 513.
##
## module_access_e -> UIdent . DOT module_var_e [ TIMES SLASH SEMI RPAR REM_EQ REM RBRACKET RBRACE QMARK PLUS_EQ PLUS NE MULT_EQ MINUS_EQ MINUS LT LPAR LE LBRACKET GT Else EQ2 EQ EOF Default DOT DIV_EQ Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## UIdent
##

Ill-formed selection of a value in a module.
At this point, the selection symbol '.' is expected, followed by the
qualified name of a value.

contract: UIdent DOT ZWSP
##
## Ends in an error in state: 512.
##
## module_access_e -> UIdent DOT . module_var_e [ TIMES SLASH SEMI RPAR REM_EQ REM RBRACKET RBRACE QMARK PLUS_EQ PLUS NE MULT_EQ MINUS_EQ MINUS LT LPAR LE LBRACKET GT Else EQ2 EQ EOF Default DOT DIV_EQ Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## UIdent DOT
##

Ill-formed selection of a value in a module.
At this point, the qualified name of a value is expected.

contract: Ident As UIdent DOT ZWSP
##
## Ends in an error in state: 133.
##
## module_access_t -> UIdent DOT . module_var_t [ SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
##
## The known suffix of the stack is as follows:
## UIdent DOT
##

Ill-formed selection of a type in a module.
At this point, the qualified name of a type is expected.

contract: UIdent ZWSP
##
## Ends in an error in state: 4.
##
## code_inj -> UIdent . Verbatim [ TIMES SLASH SEMI RPAR REM_EQ REM RBRACKET RBRACE QMARK PLUS_EQ PLUS NE MULT_EQ MINUS_EQ MINUS LT LPAR LE LBRACKET GT Else EQ2 EQ EOF Default DOT DIV_EQ Case COMMA COLON BOOL_OR BOOL_AND As ]
## ctor_expr -> UIdent . LPAR option(ctor_args) RPAR [ TIMES SLASH SEMI RPAR REM_EQ REM RBRACKET RBRACE QMARK PLUS_EQ PLUS NE MULT_EQ MINUS_EQ MINUS LT LPAR LE LBRACKET GT Else EQ2 EQ EOF Default DOT DIV_EQ Case COMMA COLON BOOL_OR BOOL_AND As ]
## module_access_e -> UIdent . DOT module_var_e [ TIMES SLASH SEMI RPAR REM_EQ REM RBRACKET RBRACE QMARK PLUS_EQ PLUS NE MULT_EQ MINUS_EQ MINUS LT LPAR LE LBRACKET GT Else EQ2 EQ EOF Default DOT DIV_EQ Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## UIdent
##

Ill-formed code injection, module access, or constructor.
At this point, one of the following is expected:
  * a verbatim string if defining code injection;
  * the selection symbol '.' followed by the qualified name of a value
    in a module;
  * an opening parenthesis '(' followed by a constructor argument as
    an expression.

contract: Ident As Attr LBRACE ZWSP
##
## Ends in an error in state: 74.
##
## object_type -> nseq(Attr) LBRACE . sep_or_term_list(field_decl,object_sep) RBRACE [ VBAR SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) LBRACE
##
contract: Bytes As LBRACE ZWSP
##
## Ends in an error in state: 46.
##
## object_type -> LBRACE . sep_or_term_list(field_decl,object_sep) RBRACE [ VBAR SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

Ill-formed record type.
At this point, a field declaration is expected.

contract: Bytes As LBRACE Ident COMMA ZWSP
##
## Ends in an error in state: 85.
##
## nsepseq(field_decl,object_sep) -> field_decl object_sep . nsepseq(field_decl,object_sep) [ RBRACE ]
## nseq(__anonymous_0(field_decl,object_sep)) -> field_decl object_sep . [ RBRACE ]
## nseq(__anonymous_0(field_decl,object_sep)) -> field_decl object_sep . nseq(__anonymous_0(field_decl,object_sep)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl object_sep
##

Ill-formed record type.
At this point, one of the following is expected:
  * a field declaration;
  * a closing brace '}' if there are no more fields.

contract: Ident As VBAR Attr ZWSP
##
## Ends in an error in state: 142.
##
## object_type -> nseq(Attr) . LBRACE sep_or_term_list(field_decl,object_sep) RBRACE [ VBAR SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
## variant -> nseq(Attr) . LBRACKET String RBRACKET [ VBAR SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
## variant -> nseq(Attr) . LBRACKET String COMMA ctor_params RBRACKET [ VBAR SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 63, spurious reduction of production nseq(Attr) -> Attr
##
contract: Bytes As Attr VBAR Attr ZWSP
##
## Ends in an error in state: 93.
##
## variant -> nseq(Attr) . LBRACKET String RBRACKET [ VBAR SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
## variant -> nseq(Attr) . LBRACKET String COMMA ctor_params RBRACKET [ VBAR SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 63, spurious reduction of production nseq(Attr) -> Attr
##

Ill-formed variant of a sum type.
At this point, if the attribute is complete, an opening bracket '[' is expected.

contract: String As VBAR LBRACKET String COMMA ZWSP
##
## Ends in an error in state: 40.
##
## variant -> LBRACKET String COMMA . ctor_params RBRACKET [ VBAR SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET String COMMA
##
contract: Bytes As VBAR LBRACKET String COMMA Ident COMMA ZWSP
##
## Ends in an error in state: 106.
##
## nsepseq(ctor_param,COMMA) -> ctor_param COMMA . nsepseq(ctor_param,COMMA) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## ctor_param COMMA
##
contract: WILD As VBAR Attr LBRACKET String COMMA ZWSP
##
## Ends in an error in state: 97.
##
## variant -> nseq(Attr) LBRACKET String COMMA . ctor_params RBRACKET [ VBAR SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) LBRACKET String COMMA
##

Ill-formed variant of a sum type.
At this point, a constructor parameter is expected as a type
expression.

contract: String As VBAR LBRACKET String COMMA WILD GT
##
## Ends in an error in state: 105.
##
## nsepseq(ctor_param,COMMA) -> ctor_param . [ RBRACKET ]
## nsepseq(ctor_param,COMMA) -> ctor_param . COMMA nsepseq(ctor_param,COMMA) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## ctor_param
##

Ill-formed variant of a sum type.
At this point, one of the following is expected:
  * a comma ',' followed by another constructor parameter as a type
    expression;
  * a closing bracket ']' if the variant is complete.

contract: String As VBAR LBRACKET ZWSP
##
## Ends in an error in state: 37.
##
## variant -> LBRACKET . String RBRACKET [ VBAR SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
## variant -> LBRACKET . String COMMA ctor_params RBRACKET [ VBAR SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##
contract: WILD As VBAR Attr LBRACKET ZWSP
##
## Ends in an error in state: 94.
##
## variant -> nseq(Attr) LBRACKET . String RBRACKET [ VBAR SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
## variant -> nseq(Attr) LBRACKET . String COMMA ctor_params RBRACKET [ VBAR SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) LBRACKET
##

Ill-formed variant of a sum type.
At this point, a data constructor is expected as a string, starting
with a capital letter.

contract: String As VBAR LBRACKET String ZWSP
##
## Ends in an error in state: 38.
##
## variant -> LBRACKET String . RBRACKET [ VBAR SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
## variant -> LBRACKET String . COMMA ctor_params RBRACKET [ VBAR SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACKET String
##
contract: WILD As VBAR Attr LBRACKET String ZWSP
##
## Ends in an error in state: 95.
##
## variant -> nseq(Attr) LBRACKET String . RBRACKET [ VBAR SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
## variant -> nseq(Attr) LBRACKET String . COMMA ctor_params RBRACKET [ VBAR SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) LBRACKET String
##

Ill-formed variant of a sum type.
At this point, one of the following is expected:
  * a comma ',' followed by a constructor parameter as a type
    expression;
  * a closing bracket ']' if the constructor is constant.

contract: Ident As VBAR ZWSP
##
## Ends in an error in state: 36.
##
## sum_type -> VBAR . nsepseq(variant,VBAR) [ SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
## union_type -> VBAR . nsepseq(object_type,VBAR) [ SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
##
## The known suffix of the stack is as follows:
## VBAR
##
contract: WILD As Attr VBAR ZWSP
##
## Ends in an error in state: 90.
##
## sum_type -> nseq(Attr) VBAR . nsepseq(variant,VBAR) [ SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) VBAR
##
contract: WILD As VBAR LBRACKET String RBRACKET VBAR ZWSP
##
## Ends in an error in state: 92.
##
## nsepseq(variant,VBAR) -> variant VBAR . nsepseq(variant,VBAR) [ SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
##
## The known suffix of the stack is as follows:
## variant VBAR
##

Ill-formed variant of a sum type.
At this point, one of the following is expected:
  * attributes for the variant;
  * an opening bracket '[' followed by a data constructor as a string.

contract: WILD As LBRACKET WILD COMMA ZWSP
##
## Ends in an error in state: 120.
##
## nsepseq(type_component,COMMA) -> type_component COMMA . nsepseq(type_component,COMMA) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## type_component COMMA
##

Ill-formed tuple of types.
At this point, a component is expected as a type expression.

contract: Bytes As ES6FUN LPAR Ident COLON Ident RPAR ARROW ZWSP
##
## Ends in an error in state: 62.
##
## fun_type -> ES6FUN par(nsepseq(fun_param,COMMA)) ARROW . type_expr [ SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
##
## The known suffix of the stack is as follows:
## ES6FUN par(nsepseq(fun_param,COMMA)) ARROW
##

Ill-formed functional type expression.
At this point, the return type is expected as a type expression.

contract: Ident As ZWSP
##
## Ends in an error in state: 249.
##
## as_expr_level -> as_expr_level As . type_expr [ SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ Else EQ EOF Default DIV_EQ Case COMMA COLON As ]
##
## The known suffix of the stack is as follows:
## as_expr_level As
##

Ill-formed annotated expression.
At this point, a type expression is expected.

contract: Bytes As ES6FUN LPAR Ident ZWSP
##
## Ends in an error in state: 54.
##
## fun_param -> Ident . type_annotation [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##
contract: Ident As LBRACE Attr Ident ZWSP
##
## Ends in an error in state: 79.
##
## field_decl -> nseq(Attr) Ident . [ SEMI RBRACE COMMA ]
## field_decl -> nseq(Attr) Ident . type_annotation [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## nseq(Attr) Ident
##
contract: Ident As LBRACE Ident ZWSP
##
## Ends in an error in state: 47.
##
## field_decl -> Ident . [ SEMI RBRACE COMMA ]
## field_decl -> Ident . type_annotation [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##

Ill-formed record type.
At this point, one of the following is expected:
  * a comma ',' or semicolon ';' followed by another field declaration;
  * a colon ':' followed by a type expression;
  * a closing brace '}' if the record type is complete.

contract: WILD As LBRACKET WILD ZWSP
##
## Ends in an error in state: 119.
##
## nsepseq(type_component,COMMA) -> type_component . [ RBRACKET ]
## nsepseq(type_component,COMMA) -> type_component . COMMA nsepseq(type_component,COMMA) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## type_component
##

Ill-formed tuple of types.
At this point, one of the following is expected:
  * a comma ',' followed by another component as a type expression;
  * a closing bracket ']' if the tuple is complete.

contract: Ident As LBRACE Ident COLON Ident ZWSP
##
## Ends in an error in state: 82.
##
## nsepseq(field_decl,object_sep) -> field_decl . [ RBRACE ]
## nsepseq(field_decl,object_sep) -> field_decl . object_sep nsepseq(field_decl,object_sep) [ RBRACE ]
## nseq(__anonymous_0(field_decl,object_sep)) -> field_decl . object_sep [ RBRACE ]
## nseq(__anonymous_0(field_decl,object_sep)) -> field_decl . object_sep nseq(__anonymous_0(field_decl,object_sep)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field_decl
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 50, spurious reduction of production core_type -> Ident
## In state 108, spurious reduction of production type_expr -> core_type
## In state 112, spurious reduction of production type_annotation -> COLON type_expr
## In state 113, spurious reduction of production field_decl -> Ident type_annotation
##

Ill-formed record type.
At this point, one of the following is expected:
  * a comma ',' or semicolon ';' followed by another field declaration;
  * a closing brace '}' if the record type is complete.

# contract: Ident As LPAR Ident COLON Ident COMMA Ident ZWSP
##
## Ends in an error in state: 91.
##
## fun_param -> Ident . type_annotation [ RPAR COMMA ]
##
## The known suffix of the stack is as follows:
## Ident
##
#
# Ill-formed function parameter declaration.
# At this point, a colon ':' is expected, followed by the type of the parameter.

contract: Bytes As ES6FUN LPAR Ident COLON Ident COMMA ZWSP
##
## Ends in an error in state: 59.
##
## nsepseq(fun_param,COMMA) -> fun_param COMMA . nsepseq(fun_param,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## fun_param COMMA
##

Ill-formed functional type.
At this point, a parameter is expected as a variable.

contract: Bytes As ES6FUN LPAR Ident COLON Ident RPAR ZWSP
##
## Ends in an error in state: 61.
##
## fun_type -> ES6FUN par(nsepseq(fun_param,COMMA)) . ARROW type_expr [ SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
##
## The known suffix of the stack is as follows:
## ES6FUN par(nsepseq(fun_param,COMMA))
##

Ill-formed functional type.
At this point, an arrow '=>' is expected, followed by the return type.

contract: Bytes As ES6FUN LPAR Ident COLON Ident While
##
## Ends in an error in state: 58.
##
## nsepseq(fun_param,COMMA) -> fun_param . [ RPAR ]
## nsepseq(fun_param,COMMA) -> fun_param . COMMA nsepseq(fun_param,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## fun_param
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 50, spurious reduction of production core_type -> Ident
## In state 108, spurious reduction of production type_expr -> core_type
## In state 112, spurious reduction of production type_annotation -> COLON type_expr
## In state 55, spurious reduction of production fun_param -> Ident type_annotation
##

Ill-formed functional type.
At this point, if the parameter type is complete, one of the following
is expected:
  * a comma ',' followed by a parameter as a variable;
  * a closing parenthesis ')' if there are no more parameters.

contract: Ident As LPAR WILD ZWSP
##
## Ends in an error in state: 123.
##
## par(type_expr) -> LPAR type_expr . RPAR [ SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
##
## The known suffix of the stack is as follows:
## LPAR type_expr
##

Ill-formed parenthesised type expression.
At this point, a closing parenthesis ')' is expected.

contract: Ident BOOL_AND ZWSP
##
## Ends in an error in state: 186.
##
## bin_op(conj_expr_level,BOOL_AND,comp_expr_level) -> conj_expr_level BOOL_AND . comp_expr_level [ SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ Else EQ EOF Default DIV_EQ Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## conj_expr_level BOOL_AND
##
contract: Ident BOOL_OR ZWSP
##
## Ends in an error in state: 183.
##
## bin_op(disj_expr_level,BOOL_OR,conj_expr_level) -> disj_expr_level BOOL_OR . conj_expr_level [ SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ Else EQ EOF Default DIV_EQ Case COMMA COLON BOOL_OR As ]
##
## The known suffix of the stack is as follows:
## disj_expr_level BOOL_OR
##
contract: Ident EQ2 ZWSP
##
## Ends in an error in state: 214.
##
## bin_op(comp_expr_level,EQ2,add_expr_level) -> comp_expr_level EQ2 . add_expr_level [ SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ NE MULT_EQ MINUS_EQ LT LE GT Else EQ2 EQ EOF Default DIV_EQ Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## comp_expr_level EQ2
##
contract: Ident GT While
##
## Ends in an error in state: 216.
##
## bin_op(comp_expr_level,gt,add_expr_level) -> comp_expr_level gt . add_expr_level [ SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ NE MULT_EQ MINUS_EQ LT LE GT Else EQ2 EQ EOF Default DIV_EQ Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## comp_expr_level gt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 211, spurious reduction of production gt -> GT
##
contract: Bytes GT ZWSP EQ ZWSP
##
## Ends in an error in state: 218.
##
## bin_op(comp_expr_level,ge,add_expr_level) -> comp_expr_level ge . add_expr_level [ SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ NE MULT_EQ MINUS_EQ LT LE GT Else EQ2 EQ EOF Default DIV_EQ Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## comp_expr_level ge
##
contract: Ident LE ZWSP
##
## Ends in an error in state: 209.
##
## bin_op(comp_expr_level,LE,add_expr_level) -> comp_expr_level LE . add_expr_level [ SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ NE MULT_EQ MINUS_EQ LT LE GT Else EQ2 EQ EOF Default DIV_EQ Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## comp_expr_level LE
##
contract: Ident LT ZWSP
##
## Ends in an error in state: 207.
##
## bin_op(comp_expr_level,LT,add_expr_level) -> comp_expr_level LT . add_expr_level [ SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ NE MULT_EQ MINUS_EQ LT LE GT Else EQ2 EQ EOF Default DIV_EQ Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## comp_expr_level LT
##
contract: Ident MINUS ZWSP
##
## Ends in an error in state: 205.
##
## bin_op(add_expr_level,MINUS,mult_expr_level) -> add_expr_level MINUS . mult_expr_level [ SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ PLUS NE MULT_EQ MINUS_EQ MINUS LT LE GT Else EQ2 EQ EOF Default DIV_EQ Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## add_expr_level MINUS
##
contract: Ident NE ZWSP
##
## Ends in an error in state: 188.
##
## bin_op(comp_expr_level,NE,add_expr_level) -> comp_expr_level NE . add_expr_level [ SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ NE MULT_EQ MINUS_EQ LT LE GT Else EQ2 EQ EOF Default DIV_EQ Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## comp_expr_level NE
##
contract: Ident PLUS ZWSP
##
## Ends in an error in state: 199.
##
## bin_op(add_expr_level,PLUS,mult_expr_level) -> add_expr_level PLUS . mult_expr_level [ SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ PLUS NE MULT_EQ MINUS_EQ MINUS LT LE GT Else EQ2 EQ EOF Default DIV_EQ Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## add_expr_level PLUS
##
contract: Ident REM ZWSP
##
## Ends in an error in state: 203.
##
## bin_op(mult_expr_level,REM,unary_expr_level) -> mult_expr_level REM . unary_expr_level [ TIMES SLASH SEMI RPAR REM_EQ REM RBRACKET RBRACE QMARK PLUS_EQ PLUS NE MULT_EQ MINUS_EQ MINUS LT LE GT Else EQ2 EQ EOF Default DIV_EQ Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## mult_expr_level REM
##
contract: Ident SLASH ZWSP
##
## Ends in an error in state: 201.
##
## bin_op(mult_expr_level,SLASH,unary_expr_level) -> mult_expr_level SLASH . unary_expr_level [ TIMES SLASH SEMI RPAR REM_EQ REM RBRACKET RBRACE QMARK PLUS_EQ PLUS NE MULT_EQ MINUS_EQ MINUS LT LE GT Else EQ2 EQ EOF Default DIV_EQ Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## mult_expr_level SLASH
##
contract: Ident TIMES ZWSP
##
## Ends in an error in state: 169.
##
## bin_op(mult_expr_level,TIMES,unary_expr_level) -> mult_expr_level TIMES . unary_expr_level [ TIMES SLASH SEMI RPAR REM_EQ REM RBRACKET RBRACE QMARK PLUS_EQ PLUS NE MULT_EQ MINUS_EQ MINUS LT LE GT Else EQ2 EQ EOF Default DIV_EQ Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## mult_expr_level TIMES
##
contract: BOOL_NOT ZWSP
##
## Ends in an error in state: 159.
##
## unary_expr_level -> BOOL_NOT . call_expr_level [ TIMES SLASH SEMI RPAR REM_EQ REM RBRACKET RBRACE QMARK PLUS_EQ PLUS NE MULT_EQ MINUS_EQ MINUS LT LE GT Else EQ2 EQ EOF Default DIV_EQ Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## BOOL_NOT
##
interactive_expr: ZWSP
##
## Ends in an error in state: 548.
##
## interactive_expr' -> . interactive_expr [ # ]
##
## The known suffix of the stack is as follows:
##
##
contract: MINUS ZWSP
##
## Ends in an error in state: 8.
##
## unary_expr_level -> MINUS . call_expr_level [ TIMES SLASH SEMI RPAR REM_EQ REM RBRACKET RBRACE QMARK PLUS_EQ PLUS NE MULT_EQ MINUS_EQ MINUS LT LE GT Else EQ2 EQ EOF Default DIV_EQ Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## MINUS
##
contract: WILD REM_EQ ZWSP
##
## Ends in an error in state: 233.
##
## expr_stmt -> as_expr_level REM_EQ . expr_stmt [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## as_expr_level REM_EQ
##
contract: WILD PLUS_EQ ZWSP
##
## Ends in an error in state: 239.
##
## expr_stmt -> as_expr_level PLUS_EQ . expr_stmt [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## as_expr_level PLUS_EQ
##
contract: WILD MULT_EQ ZWSP
##
## Ends in an error in state: 241.
##
## expr_stmt -> as_expr_level MULT_EQ . expr_stmt [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## as_expr_level MULT_EQ
##
contract: WILD MINUS_EQ ZWSP
##
## Ends in an error in state: 243.
##
## expr_stmt -> as_expr_level MINUS_EQ . expr_stmt [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## as_expr_level MINUS_EQ
##
contract: WILD DIV_EQ ZWSP
##
## Ends in an error in state: 247.
##
## expr_stmt -> as_expr_level DIV_EQ . expr_stmt [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## as_expr_level DIV_EQ
##

Ill-formed expression.
At this point, an expression is expected.

contract: Let WILD EQ ZWSP
##
## Ends in an error in state: 292.
##
## binding_initializer -> binding_pattern EQ . expr [ SEMI RBRACE Else EOF Default Case COMMA ]
##
## The known suffix of the stack is as follows:
## binding_pattern EQ
##

Ill-formed value declaration.
At this point, the expression to bound is expected.

contract: Ident DOT ZWSP
##
## Ends in an error in state: 254.
##
## projection -> member_expr DOT . Ident [ TIMES SLASH SEMI RPAR REM_EQ REM RBRACKET RBRACE QMARK PLUS_EQ PLUS NE MULT_EQ MINUS_EQ MINUS LT LPAR LE LBRACKET GT Else EQ2 EQ EOF Default DOT DIV_EQ Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## member_expr DOT
##

Ill-formed selection in a record.
At this point, the name of a record field is expected.

contract: Bytes LBRACKET Bytes SEMI
##
## Ends in an error in state: 252.
##
## projection -> member_expr LBRACKET expr . RBRACKET [ TIMES SLASH SEMI RPAR REM_EQ REM RBRACKET RBRACE QMARK PLUS_EQ PLUS NE MULT_EQ MINUS_EQ MINUS LT LPAR LE LBRACKET GT Else EQ2 EQ EOF Default DOT DIV_EQ Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## member_expr LBRACKET expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 163, spurious reduction of production call_expr_level -> member_expr
## In state 190, spurious reduction of production unary_expr_level -> call_expr_level
## In state 165, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 168, spurious reduction of production add_expr_level -> mult_expr_level
## In state 226, spurious reduction of production comp_expr_level -> add_expr_level
## In state 227, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 229, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 182, spurious reduction of production as_expr_level -> disj_expr_level
## In state 232, spurious reduction of production ternary_expr -> as_expr_level
## In state 166, spurious reduction of production expr_stmt -> ternary_expr
## In state 180, spurious reduction of production expr -> expr_stmt
##

Ill-formed selection in a tuple.
At this point, a closing bracket ']' is expected.

contract: Ident LBRACKET ZWSP
##
## Ends in an error in state: 164.
##
## projection -> member_expr LBRACKET . expr RBRACKET [ TIMES SLASH SEMI RPAR REM_EQ REM RBRACKET RBRACE QMARK PLUS_EQ PLUS NE MULT_EQ MINUS_EQ MINUS LT LPAR LE LBRACKET GT Else EQ2 EQ EOF Default DOT DIV_EQ Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## member_expr LBRACKET
##

Ill-formed selection in a tuple.
At this point, the index of a component is expected, '0' denoting the
first component.

contract: Ident LPAR ZWSP
##
## Ends in an error in state: 172.
##
## par(ioption(nsepseq(fun_arg,COMMA))) -> LPAR . RPAR [ TIMES SLASH SEMI RPAR REM_EQ REM RBRACKET RBRACE QMARK PLUS_EQ PLUS NE MULT_EQ MINUS_EQ MINUS LT LPAR LE GT Else EQ2 EQ EOF Default DIV_EQ Case COMMA COLON BOOL_OR BOOL_AND As ]
## par(ioption(nsepseq(fun_arg,COMMA))) -> LPAR . nsepseq(fun_arg,COMMA) RPAR [ TIMES SLASH SEMI RPAR REM_EQ REM RBRACKET RBRACE QMARK PLUS_EQ PLUS NE MULT_EQ MINUS_EQ MINUS LT LPAR LE GT Else EQ2 EQ EOF Default DIV_EQ Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed function call.
At this point, one of the following is expected:
  * an argument as an expression;
  * a closing parenthesis ')' if there are no arguments.

contract: Ident LPAR Ident COMMA ZWSP
##
## Ends in an error in state: 178.
##
## nsepseq(fun_arg,COMMA) -> fun_arg COMMA . nsepseq(fun_arg,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## fun_arg COMMA
##

Ill-formed function call.
At this point, an argument is expected as an expression.

contract: Bytes LPAR Bytes SEMI
##
## Ends in an error in state: 177.
##
## nsepseq(fun_arg,COMMA) -> fun_arg . [ RPAR ]
## nsepseq(fun_arg,COMMA) -> fun_arg . COMMA nsepseq(fun_arg,COMMA) [ RPAR ]
##
## The known suffix of the stack is as follows:
## fun_arg
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 163, spurious reduction of production call_expr_level -> member_expr
## In state 190, spurious reduction of production unary_expr_level -> call_expr_level
## In state 165, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 168, spurious reduction of production add_expr_level -> mult_expr_level
## In state 226, spurious reduction of production comp_expr_level -> add_expr_level
## In state 227, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 229, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 182, spurious reduction of production as_expr_level -> disj_expr_level
## In state 232, spurious reduction of production ternary_expr -> as_expr_level
## In state 166, spurious reduction of production expr_stmt -> ternary_expr
## In state 180, spurious reduction of production expr -> expr_stmt
## In state 181, spurious reduction of production fun_arg -> expr
##

Ill-formed function call.
At this point, one of the following is expected:
  * a comma ',' followed by an argument as an expression;
  * a closing parenthesis ')' if there are no more arguments.

contract: Return While
##
## Ends in an error in state: 541.
##
## toplevel_stmts -> stmt_or_namespace . SEMI toplevel_stmts [ EOF ]
## toplevel_stmts -> stmt_or_namespace . option(SEMI) [ EOF ]
##
## The known suffix of the stack is as follows:
## stmt_or_namespace
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 264, spurious reduction of production return_stmt -> Return
## In state 415, spurious reduction of production base_stmt(statement) -> return_stmt
## In state 396, spurious reduction of production statement -> base_stmt(statement)
## In state 530, spurious reduction of production stmt_or_namespace -> statement
##

Ill-formed top-level statement.
At this point, if the statement is complete, one of the following is
expected:
  * a semicolon ';' followed by another statement;
  * a semicolon ';' followed by the end of file;
  * the end of the file.

contract: While LPAR Ident RPAR ZWSP
##
## Ends in an error in state: 520.
##
## while_stmt(statement) -> While par(while_cond) . statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## While par(while_cond)
##
contract: If LPAR Ident RPAR While LPAR Ident RPAR ZWSP
##
## Ends in an error in state: 356.
##
## while_stmt(closed_stmt) -> While par(while_cond) . closed_stmt [ Else ]
## while_stmt(statement) -> While par(while_cond) . statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## While par(while_cond)
##

Ill-formed unbounded ("while") loop.
At this point, the body of the loop is expected as a statement.

contract: While LPAR Bytes SEMI
##
## Ends in an error in state: 517.
##
## par(while_cond) -> LPAR while_cond . RPAR [ While WILD UIdent Type Switch String Return MINUS Let LPAR LBRACKET LBRACE Int Import If Ident For Export ES6FUN Const Bytes BOOL_NOT Attr ]
##
## The known suffix of the stack is as follows:
## LPAR while_cond
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 163, spurious reduction of production call_expr_level -> member_expr
## In state 190, spurious reduction of production unary_expr_level -> call_expr_level
## In state 165, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 168, spurious reduction of production add_expr_level -> mult_expr_level
## In state 226, spurious reduction of production comp_expr_level -> add_expr_level
## In state 227, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 229, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 182, spurious reduction of production as_expr_level -> disj_expr_level
## In state 232, spurious reduction of production ternary_expr -> as_expr_level
## In state 166, spurious reduction of production expr_stmt -> ternary_expr
## In state 180, spurious reduction of production expr -> expr_stmt
## In state 519, spurious reduction of production while_cond -> expr
##

Ill-formed unbounded ("while") loop.
At this point, if the conditional expression is complete, a closing
parenthesis ')' is expected.

contract: While LPAR ZWSP
##
## Ends in an error in state: 2.
##
## par(while_cond) -> LPAR . while_cond RPAR [ While WILD UIdent Type Switch String Return MINUS Let LPAR LBRACKET LBRACE Int Import If Ident For Export ES6FUN Const Bytes BOOL_NOT Attr ]
##
## The known suffix of the stack is as follows:
## LPAR
##

Ill-formed while loop.
At this point, a Boolean expression is expected.

contract: While ZWSP
##
## Ends in an error in state: 1.
##
## while_stmt(statement) -> While . par(while_cond) statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## While
##
contract: If LPAR Ident RPAR While ZWSP
##
## Ends in an error in state: 355.
##
## while_stmt(closed_stmt) -> While . par(while_cond) closed_stmt [ Else ]
## while_stmt(statement) -> While . par(while_cond) statement [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## While
##

Ill-formed unbounded ("while") loop.
At this point, a Boolean expression is expected between parentheses.

contract: ZWSP
##
## Ends in an error in state: 0.
##
## contract' -> . contract [ # ]
##
## The known suffix of the stack is as follows:
##
##
contract: Ident SEMI ZWSP
##
## Ends in an error in state: 542.
##
## option(SEMI) -> SEMI . [ EOF ]
## toplevel_stmts -> stmt_or_namespace SEMI . toplevel_stmts [ EOF ]
##
## The known suffix of the stack is as follows:
## stmt_or_namespace SEMI
##
contract: Directive ZWSP
##
## Ends in an error in state: 539.
##
## toplevel_stmts -> Directive . [ EOF ]
## toplevel_stmts -> Directive . toplevel_stmts [ EOF ]
##
## The known suffix of the stack is as follows:
## Directive
##

Ill-formed contract.
At this point, a top-level statement is expected.

contract: Ident As Attr Let
##
## Ends in an error in state: 89.
##
## core_type -> nseq(Attr) . type_tuple [ SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
## object_type -> nseq(Attr) . LBRACE sep_or_term_list(field_decl,object_sep) RBRACE [ VBAR SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
## sum_type -> nseq(Attr) . VBAR nsepseq(variant,VBAR) [ SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 63, spurious reduction of production nseq(Attr) -> Attr
##

Ill-formed type expression.
At this point, one of the following is expected:
  * an opening brace '{' if defining a record type;
  * an opening bracket '[' if defining a tuple of types;
  * a variant of sum type starting with a vertical bar '|'.

contract: Ident As LBRACE Attr VBAR
##
## Ends in an error in state: 78.
##
## field_decl -> nseq(Attr) . Ident [ SEMI RBRACE COMMA ]
## field_decl -> nseq(Attr) . Ident type_annotation [ SEMI RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 63, spurious reduction of production nseq(Attr) -> Attr
##

Ill-formed record type.
At this point, if the attribute is complete, a field name is expected.

contract: Let Attr VBAR
##
## Ends in an error in state: 272.
##
## var_pattern -> nseq(Attr) . Ident [ SEMI RBRACKET RBRACE EQ COMMA COLON ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 63, spurious reduction of production nseq(Attr) -> Attr
##

Ill-formed attributed variable in a pattern.
At this point, if the attribute is complete, a variable is
expected.

contract: Attr VBAR
##
## Ends in an error in state: 416.
##
## base_stmt(statement) -> nseq(Attr) . declaration [ SEMI RBRACE EOF Default Case ]
## export_decl -> nseq(Attr) . Export declaration [ SEMI RBRACE EOF Default Case ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 63, spurious reduction of production nseq(Attr) -> Attr
##

Ill-defined value declaration.
At this point, one of the following is expected:
  * the keyword 'const';
  * the keyword 'let';
  * the keyword 'type'.

contract: Ident EQ ZWSP
##
## Ends in an error in state: 245.
##
## expr_stmt -> as_expr_level EQ . expr_stmt [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## as_expr_level EQ
##

Ill-formed assignment.
At this point, the right-hand side is expected as an expression.

contract: LBRACKET ZWSP
##
## Ends in an error in state: 10.
##
## array_literal -> LBRACKET . RBRACKET [ TIMES SLASH SEMI RPAR REM_EQ REM RBRACKET RBRACE QMARK PLUS_EQ PLUS NE MULT_EQ MINUS_EQ MINUS LT LPAR LE LBRACKET GT Else EQ2 EQ EOF Default DOT DIV_EQ Case COMMA COLON BOOL_OR BOOL_AND As ]
## array_literal -> LBRACKET . nsepseq(array_item,COMMA) RBRACKET [ TIMES SLASH SEMI RPAR REM_EQ REM RBRACKET RBRACE QMARK PLUS_EQ PLUS NE MULT_EQ MINUS_EQ MINUS LT LPAR LE LBRACKET GT Else EQ2 EQ EOF Default DOT DIV_EQ Case COMMA COLON BOOL_OR BOOL_AND As ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##
contract: LBRACKET Ident COMMA ZWSP
##
## Ends in an error in state: 499.
##
## nsepseq(array_item,COMMA) -> array_item COMMA . nsepseq(array_item,COMMA) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## array_item COMMA
##

Ill-formed tuple expression.
At this point, one of the following is expected:
  * a component as an expression;
  * an ellipsis '...' followed by an expression whose type is a tuple.


interactive_expr: LBRACE Ident COMMA Ident COMMA ZWSP
##
## Ends in an error in state: 488.
##
## nsepseq(property,object_sep) -> property object_sep . nsepseq(property,object_sep) [ RBRACE ]
## nseq(__anonymous_0(property,object_sep)) -> property object_sep . [ RBRACE ]
## nseq(__anonymous_0(property,object_sep)) -> property object_sep . nseq(__anonymous_0(property,object_sep)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## property object_sep
##

Ill-formed record expression.
At this point, one of the following is expected:
  * another field assignment;
  * a closing brace '}' if the record type is complete.

interactive_expr: LBRACE ELLIPSIS Bytes While
##
## Ends in an error in state: 487.
##
## nsepseq(property,object_sep) -> property . [ RBRACE ]
## nsepseq(property,object_sep) -> property . object_sep nsepseq(property,object_sep) [ RBRACE ]
## nseq(__anonymous_0(property,object_sep)) -> property . object_sep [ RBRACE ]
## nseq(__anonymous_0(property,object_sep)) -> property . object_sep nseq(__anonymous_0(property,object_sep)) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## property
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 163, spurious reduction of production call_expr_level -> member_expr
## In state 190, spurious reduction of production unary_expr_level -> call_expr_level
## In state 165, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 168, spurious reduction of production add_expr_level -> mult_expr_level
## In state 226, spurious reduction of production comp_expr_level -> add_expr_level
## In state 227, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 229, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 182, spurious reduction of production as_expr_level -> disj_expr_level
## In state 232, spurious reduction of production ternary_expr -> as_expr_level
## In state 166, spurious reduction of production expr_stmt -> ternary_expr
## In state 481, spurious reduction of production property -> ELLIPSIS expr_stmt
##

Ill-formed record expression.
At this point, one of the following is expected:
  * a comma ',' or semicolon ';';
  * a closing brace '}' if the record type is complete.

contract: Type Ident ZWSP
##
## Ends in an error in state: 150.
##
## type_decl -> Type Ident . EQ type_expr [ SEMI RBRACE Else EOF Default Case ]
## type_decl -> Type Ident . type_params EQ type_expr [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Type Ident
##

Ill-formed type declaration.
At this point, one of the following is expected:
  * the assignment symbol '=' followed by a type expression;
  * type parameters between chevrons '<' and '>', if defining a
    parametric type.

contract: Type Ident LT Ident GT ZWSP ZWSP
##
## Ends in an error in state: 153.
##
## type_decl -> Type Ident type_params . EQ type_expr [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Type Ident type_params
##

Ill-formed parametric type declaration.
At this point, the assignment symbol '=' is expected, followed by a
type expression.

contract: Type Ident LT Ident GT EQ ZWSP
##
## Ends in an error in state: 154.
##
## type_decl -> Type Ident type_params EQ . type_expr [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Type Ident type_params EQ
##

Ill-formed parametric type declaration.
At this point, the right-hand side is expected as a type expression.

contract: Const Ident COLON LT ZWSP
##
## Ends in an error in state: 295.
##
## chevrons(nsepseq(type_name,COMMA)) -> LT . nsepseq(type_name,COMMA) GT [ WILD VBAR UIdent String LPAR LBRACKET LBRACE Int Ident ES6FUN Attr ]
## chevrons(nsepseq(type_name,COMMA)) -> LT . nsepseq(type_name,COMMA) GT ZWSP [ WILD VBAR UIdent String LPAR LBRACKET LBRACE Int Ident ES6FUN Attr ]
##
## The known suffix of the stack is as follows:
## LT
##
contract: Const Ident COLON LT UIdent COMMA ZWSP
##
## Ends in an error in state: 297.
##
## nsepseq(type_name,COMMA) -> UIdent COMMA . nsepseq(type_name,COMMA) [ GT ]
##
## The known suffix of the stack is as follows:
## UIdent COMMA
##
contract: Const Ident COLON LT Ident COMMA ZWSP
##
## Ends in an error in state: 299.
##
## nsepseq(type_name,COMMA) -> Ident COMMA . nsepseq(type_name,COMMA) [ GT ]
##
## The known suffix of the stack is as follows:
## Ident COMMA
##

Ill-formed generic type.
At this point, a generic type is expected.

contract: Const Ident COLON LT UIdent ZWSP
##
## Ends in an error in state: 296.
##
## nsepseq(type_name,COMMA) -> UIdent . [ GT ]
## nsepseq(type_name,COMMA) -> UIdent . COMMA nsepseq(type_name,COMMA) [ GT ]
##
## The known suffix of the stack is as follows:
## UIdent
##
contract: Const Ident COLON LT Ident ZWSP
##
## Ends in an error in state: 298.
##
## nsepseq(type_name,COMMA) -> Ident . [ GT ]
## nsepseq(type_name,COMMA) -> Ident . COMMA nsepseq(type_name,COMMA) [ GT ]
##
## The known suffix of the stack is as follows:
## Ident
##

Ill-formed generic type.
At this point, one of the following is expected:
 * a closing chevron '>' if the generic type is complete.
 * a comma, followed by another generic type.

contract: Const Ident COLON LT UIdent GT ZWSP ZWSP
##
## Ends in an error in state: 305.
##
## binding_type -> COLON type_generics . type_expr [ EQ ]
##
## The known suffix of the stack is as follows:
## COLON type_generics
##

Ill-formed type annotation.
At this point, if the type generics are complete, a type expression is expected.

contract: ES6FUN ZWSP
##
## Ends in an error in state: 21.
##
## fun_expr -> ES6FUN . par(parameters) ARROW body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
## fun_expr -> ES6FUN . par(parameters) type_annotation ARROW body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
## fun_expr -> ES6FUN . LPAR RPAR ARROW body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
## fun_expr -> ES6FUN . LPAR RPAR type_annotation ARROW body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
## fun_expr -> ES6FUN . Ident ARROW body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
## fun_expr -> ES6FUN . WILD ARROW body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## ES6FUN
##

Ill-formed function expression.
At this point, one of the following is expected:
  * a opening parenthesis, followed by parameters;
  * an single parameter.

contract: Bytes As ES6FUN ZWSP
##
## Ends in an error in state: 52.
##
## fun_type -> ES6FUN . par(nsepseq(fun_param,COMMA)) ARROW type_expr [ SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
##
## The known suffix of the stack is as follows:
## ES6FUN
##

Ill-formed functional type expression.
At this point, an opening parenthesis followed by parameters are expected.

contract: Bytes As LBRACE Ident RBRACE VBAR ZWSP
##
## Ends in an error in state: 72.
##
## nsepseq(object_type,VBAR) -> object_type VBAR . nsepseq(object_type,VBAR) [ SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
##
## The known suffix of the stack is as follows:
## object_type VBAR
##

Ill-formed discriminatory union.
At this point, another record type is expected.

contract: Bytes As LBRACE Ident RBRACE VBAR Attr ZWSP
##
## Ends in an error in state: 73.
##
## object_type -> nseq(Attr) . LBRACE sep_or_term_list(field_decl,object_sep) RBRACE [ VBAR SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 63, spurious reduction of production nseq(Attr) -> Attr
##

Ill-formed record type.
At this point, a record type is expected.

contract: Bytes QMARK ZWSP
##
## Ends in an error in state: 235.
##
## ternary_expr -> as_expr_level QMARK . expr_stmt COLON expr_stmt [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## as_expr_level QMARK
##

Ill-formed ternary expression.
At this point, an expression for the truthy case is expected.

contract: Bytes QMARK Bytes SEMI
##
## Ends in an error in state: 236.
##
## ternary_expr -> as_expr_level QMARK expr_stmt . COLON expr_stmt [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## as_expr_level QMARK expr_stmt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 163, spurious reduction of production call_expr_level -> member_expr
## In state 190, spurious reduction of production unary_expr_level -> call_expr_level
## In state 165, spurious reduction of production mult_expr_level -> unary_expr_level
## In state 168, spurious reduction of production add_expr_level -> mult_expr_level
## In state 226, spurious reduction of production comp_expr_level -> add_expr_level
## In state 227, spurious reduction of production conj_expr_level -> comp_expr_level
## In state 229, spurious reduction of production disj_expr_level -> conj_expr_level
## In state 182, spurious reduction of production as_expr_level -> disj_expr_level
## In state 232, spurious reduction of production ternary_expr -> as_expr_level
## In state 166, spurious reduction of production expr_stmt -> ternary_expr
##

Ill-formed ternary expression.
At this point, if the expression for the truthy case is complete,
a colon ':' is expected followed by an expression for the falsy case.

contract: Bytes QMARK Bytes COLON ZWSP
##
## Ends in an error in state: 237.
##
## ternary_expr -> as_expr_level QMARK expr_stmt COLON . expr_stmt [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## as_expr_level QMARK expr_stmt COLON
##

Ill-formed ternary expression.
At this point, an expression is expected for the falsy case.

contract: ES6FUN WILD ZWSP
##
## Ends in an error in state: 22.
##
## fun_expr -> ES6FUN WILD . ARROW body [ SEMI RPAR RBRACKET RBRACE Else EOF Default Case COMMA COLON ]
##
## The known suffix of the stack is as follows:
## ES6FUN WILD
##

Ill-formed function expression.
At this point, an arrow '=>' is expected.

contract: Import TIMES ZWSP
##
## Ends in an error in state: 335.
##
## import_stmt -> Import TIMES . As UIdent From String [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Import TIMES
##

Ill-formed import statement.
At this point, the keyword 'from' is expected.

contract: Import TIMES As ZWSP
##
## Ends in an error in state: 336.
##
## import_stmt -> Import TIMES As . UIdent From String [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Import TIMES As
##

Ill-formed import statement.
At this point, the name of the module alias is expected, starting with a
capital letter.

contract: Import TIMES As UIdent ZWSP
##
## Ends in an error in state: 337.
##
## import_stmt -> Import TIMES As UIdent . From String [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Import TIMES As UIdent
##
contract: Import LBRACE Ident RBRACE ZWSP
##
## Ends in an error in state: 346.
##
## import_stmt -> Import braces(nsepseq(field_name,COMMA)) . From String [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Import braces(nsepseq(field_name,COMMA))
##

Ill-formed import statement.
At this point, the keyword 'from' is expected.

contract: Import TIMES As UIdent From ZWSP
##
## Ends in an error in state: 338.
##
## import_stmt -> Import TIMES As UIdent From . String [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Import TIMES As UIdent From
##
contract: Import LBRACE Ident RBRACE From ZWSP
##
## Ends in an error in state: 347.
##
## import_stmt -> Import braces(nsepseq(field_name,COMMA)) From . String [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## Import braces(nsepseq(field_name,COMMA)) From
##

Ill-formed import statement.
At this point, a path to another file is expected as a string.

contract: Import LBRACE ZWSP
##
## Ends in an error in state: 340.
##
## braces(nsepseq(field_name,COMMA)) -> LBRACE . nsepseq(field_name,COMMA) RBRACE [ From ]
##
## The known suffix of the stack is as follows:
## LBRACE
##
contract: Import LBRACE Ident COMMA ZWSP
##
## Ends in an error in state: 342.
##
## nsepseq(field_name,COMMA) -> Ident COMMA . nsepseq(field_name,COMMA) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## Ident COMMA
##

Ill-formed import statement.
At this point, a value of a module is expected.

contract: Import LBRACE Ident ZWSP
##
## Ends in an error in state: 344.
##
## braces(nsepseq(field_name,COMMA)) -> LBRACE nsepseq(field_name,COMMA) . RBRACE [ From ]
##
## The known suffix of the stack is as follows:
## LBRACE nsepseq(field_name,COMMA)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 341, spurious reduction of production nsepseq(field_name,COMMA) -> Ident
##

Ill-formed import statement.
At this point, if all the values are complete, a closing brace '}' is expected.

contract: Bytes As UIdent DOT UIdent ZWSP
##
## Ends in an error in state: 134.
##
## module_access_t -> UIdent . DOT module_var_t [ SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
## type_ctor_app -> UIdent . chevrons(type_ctor_args) [ SEMI RPAR REM_EQ RBRACKET RBRACE QMARK PLUS_EQ MULT_EQ MINUS_EQ GT Else EQ EOF Default DIV_EQ Case COMMA COLON As ARROW ]
##
## The known suffix of the stack is as follows:
## UIdent
##

Ill-formed selection of a type in a module.
At this point, one of the following is expected:
* a dot '.', followed by a type of the module.
* an opening chevron '<' followed by a type parameter
  and a closing chevron '>'.

contract: If LPAR Bytes RPAR Attr ZWSP
##
## Ends in an error in state: 380.
##
## base_stmt(closed_stmt) -> nseq(Attr) . declaration [ Else ]
## base_stmt(statement) -> nseq(Attr) . declaration [ SEMI RBRACE EOF Default Case ]
## export_decl -> nseq(Attr) . Export declaration [ SEMI RBRACE Else EOF Default Case ]
##
## The known suffix of the stack is as follows:
## nseq(Attr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 63, spurious reduction of production nseq(Attr) -> Attr
##

Ill-formed export declaration.
At this point, one of the following is expected:
  * a value declaration starting with the keyword 'const' or 'let';
  * a type declaration starting with the keyword 'type';
  * an export statement starting with the keyword 'export'.
