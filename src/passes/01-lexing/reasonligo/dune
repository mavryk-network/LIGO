;; Generate ['a terminal] type to complete inspection API in parsing stage

(rule
 (targets MenhirToken.ml MenhirToken.mli)
 (deps
  (:ParToken ../../02-parsing/reasonligo/ParToken.mly))
 (action
  (run menhir %{ParToken} --only-tokens --inspection --table --base
    MenhirToken)))

(library
 (name menhir_reasonligo_tokens)
 (public_name ligo.lexing.menhir_reasonligo_tokens)
 (modules MenhirToken)
 (libraries lexing_shared hex)
 (flags
  (:standard
   -open
   Lexing_shared
   -open
   Wrap ;; for [wrap]
   -open
   Common))
 ;; for [lexeme]
 )

;; Build of the ReasonLIGO lexer as a library

(library
 (name lexing_reasonligo)
 (public_name ligo.lexing.reasonligo)
 (modules Token Self_tokens Style)
 (libraries
  ;; LIGO
  lexing_shared
  menhir_reasonligo_tokens
  ;; Third party
  str
  hex))

;; Build of a standalone lexer for ReasonLIGO

(executable
 (name LexerMain)
 (libraries
  ;; LIGO
  preprocessing_reasonligo
  lexing_shared
  lexing_reasonligo
  ;; Third party
  str)
 (modules Version LexerMain))

;; Build of the unlexer (for covering the
;; error states of the LR automaton)

(executable
 (name Unlexer)
 (libraries
  ;; LIGO
  lexing_shared
  lexing_reasonligo
  ;; Third party
  str)
 (modules Unlexer))

;; --------------------------------------------------------------------
;; Build of the version source (for the user, as a CLI option)

(rule
 (targets Version.ml)
 (action
  (with-stdout-to
   Version.ml
   (run "sh" "-c" "printf 'let version = \"%s\"' \"${LIGO_VERSION}\""))))
