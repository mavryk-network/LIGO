;; Generate ['a terminal] type to complete inspection API in parsing stage

(rule
  (targets MenhirToken.ml MenhirToken.mli)
  (deps (:ParToken ../../02-parsing/jsligo/ParToken.mly))
  (action (run menhir %{ParToken} --only-tokens --inspection --table
               --base MenhirToken)))

(library
  (name menhir_jsligo_tokens)
  (public_name ligo.lexing.menhir_jsligo_tokens)
  (modules MenhirToken)
  (libraries
     lexing_shared
     hex)
  (flags (:standard
            -open Lexing_shared
            -open Wrap)))     ;; for [wrap]

;; Build of the JsLIGO lexer as a library

(library
  (name lexing_jsligo)
  (public_name ligo.lexing.jsligo)
  (modules Token Self_tokens Style)
  (libraries
    ;; LIGO
    lexing_shared
    menhir_jsligo_tokens
    ;; Third party
    str
    hex))

;; Build of a standalone lexer for JsLIGO

(executable
  (name LexerMain)
  (libraries
    ;; LIGO
    preprocessing_jsligo
    lexing_shared
    lexing_jsligo
    ;; Third party
    str)
  (modules Version LexerMain))

;; Build of the unlexer (for covering the
;; error states of the LR automaton)

(executable
 (name Unlexer)
 (libraries
  ;; LIGO
  lexing_shared
  lexing_jsligo
  ;; Third party
  str)
 (modules Unlexer))

;; --------------------------------------------------------------------
;; Build of the version source (for the user, as a CLI option)

(rule
 (targets Version.ml)
 (action
  (with-stdout-to
   Version.ml
   (run "sh" "-c" "printf 'let version = \"%s\"' \"${LIGO_VERSION}\""))))
