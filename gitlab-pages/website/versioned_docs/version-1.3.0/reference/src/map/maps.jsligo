type move = [int, int];
type register = map<address, move>;

let empty: register = Map.empty;
let moves: register =
  Map.literal(list([
    [("mv1XJ6kbMgDvXvvtw8KBG2Ne2ngNHxLfuUvE" as address), [1, 2]],
    [("mv1Bbr38otexaqYQBJHHqV4uCYncf2y1HR9k" as address), [0, 3]]]));
let my_balance: option<move> =
  Map.find_opt(("mv1Bbr38otexaqYQBJHHqV4uCYncf2y1HR9k" as address), moves);
let updated_map : register =
  Map.update
    (("mv1Bbr38otexaqYQBJHHqV4uCYncf2y1HR9k" as address), Some ([4, 9]), moves);
let [old_move, updated_map2] : [option<move>, register] =
  Map.get_and_update (("mv1Bbr38otexaqYQBJHHqV4uCYncf2y1HR9k" as address), (Some([24, 48] as move)), moves);
let add = (m: register): register =>
  Map.add
    (("mv1Bbr38otexaqYQBJHHqV4uCYncf2y1HR9k" as address), [4, 9], m);
let updated_map3 : register =
  Map.remove (("mv1Bbr38otexaqYQBJHHqV4uCYncf2y1HR9k" as address), moves);
let iter_op = (m : register) : unit => {
  let predicate = ([i, j]: [address, move]): unit => assert (j[0] > 3);
  Map.iter (predicate, m);
};
let map_op = (m : register) : register => {
  let increment = ([_i, j]: [address, move]) : move => [j[0], j[1] + 1];
  return Map.map (increment, m);
};
let fold_op = (m : register): int => {
  let folded = ([i, j]: [int, [address, move]]):int => i + j[1][1];
  return Map.fold (folded, m, 5);
};
let _ : nat = Map.size(moves);
let found : bool = Map.mem (("mv1XJ6kbMgDvXvvtw8KBG2Ne2ngNHxLfuUvE" as address),  moves);