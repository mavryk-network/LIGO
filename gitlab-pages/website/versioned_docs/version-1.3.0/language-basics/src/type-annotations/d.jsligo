type parameter =
  ["Back"]
| ["Claim"]
| ["Withdraw"];

type storage = {
  owner    : address,
  goal     : mav,
  deadline : timestamp,
  backers  : map<address, mav>,
  funded   : bool
};

@entry
const back = (param : unit, store : storage) : [list<operation>, storage] => { // Annotation
  let no_op = list([]);
  if (Mavryk.get_now() > store.deadline) {
    return failwith ("Deadline passed.");
  }
  else {
    return match(Map.find_opt (Mavryk.get_sender(), store.backers)) {
      when(None()): do {
        let backers = Map.update(Mavryk.get_sender(), Some(Mavryk.get_amount()), store.backers);
        return [no_op, {...store, backers:backers}];
      };
      when(Some(x)): [no_op, store]
    }
  };
};