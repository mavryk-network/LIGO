type storage = {rewardsLeft: mav, beneficiaryAddress: address };

let treasury = (p : unit, s : storage) => {
  // We do our computations first
  let newStorage = {...s, rewardsLeft: 0mumav};

  // Then we find our beneficiary's `handleRewards` entrypoint:
  let beneficiaryOpt = Mavryk.get_entrypoint_opt("%handleTransfer", s.beneficiaryAddress);
  let beneficiary =
    match(beneficiaryOpt) {
     when(Some(contract)): contract;
     when(None()): failwith("Beneficiary does not exist")
    };

  // Then we prepare the internal operation we want to perform
  let operation = Mavryk.transaction(unit, s.rewardsLeft, beneficiary);

  // ...and return both the operations and the updated storage
  return [list([operation]), newStorage];
};