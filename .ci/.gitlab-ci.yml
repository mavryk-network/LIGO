#######################################################################
# Process to build new release
# Triggered when a branch prefixed by release/ will be pushed
# Will update code and create a merge request targeting dev
#######################################################################

initialize-ssh:
  stage: pretooling
  only:
    # prefixed by release /^release/.*/
    - /^release/.*/
    - tags
  script:
      - chmod 766 ~/.ssh
      - eval `ssh-agent -s`
      - cat $SSH_PRIVATE_KEY_TOOLKIT  > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - ssh-keyscan gitlab.com  >> ~/.ssh/known_hosts
      - chmod 644 ~/.ssh/known_hosts

initialize-git:
  stage: pretooling
  dependencies:
    - initialize-ssh
  only:
    # prefixed by release /^release/.*/
    - /^release/.*/
    - tags
  script:
      - git config --global user.name 'InfraBot'
      - git config --global user.email 'infra@marigold.dev'

#######################################################################
# Following script is executed when branch is create
#######################################################################
create-tag:
  stage: release
  dependencies:
    - initialize-git
  script:
    - git remote rm origin && git remote add origin "git@gitlab.com:ligolang/ligo.git"
    # Don't want to tag for testing
    - RELEASE_VERSION=${CI_COMMIT_BRANCH#"release/"}
    - git tag -a $RELEASE_VERSION -m "Tag version $RELEASE_VERSION"
    - git push origin $RELEASE_VERSION
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^release/ && $TRIGGER_DOC_UPDATE == null' 
      when: always

#######################################################################
# Following script is executed when pipeline has executed Tag process
#######################################################################
release-update-versionned-doc:
  stage: release  
  image: node:12.20.0-buster
  tags:
    - docker
  before_script:
    # Have to be done here because we are using an image for this job.
    - mkdir ~/.ssh
    - chmod 766 ~/.ssh
    - eval `ssh-agent -s`
    - cat $SSH_PRIVATE_KEY_TOOLKIT  > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan gitlab.com  >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - git config --global user.name 'InfraBot'
    - git config --global user.email 'infra@marigold.dev'
    - apt-get update
    - apt-get install -y --no-install-recommends jq
    - wget https://github.com/mikefarah/yq/releases/download/v4.18.1/yq_linux_amd64 -O /usr/bin/yq && chmod +x /usr/bin/yq
  script:
    - RELEASE_VERSION=${CI_COMMIT_BRANCH#"release/"}
    - git remote rm origin && git remote add origin "git@gitlab.com:ligolang/ligo.git"
    - ./.ci/scripts/versioning_website.sh $RELEASE_VERSION
    - LAST_TAG_JOB_ID=`./.ci/scripts/release_metadata/read_release_metadata.sh LAST_TAG_JOB_ID`
    - ./.ci/scripts/update_distribution_references_with_release.sh $LAST_TAG_JOB_ID $RELEASE_VERSION
    - git add gitlab-pages/website/versioned_docs/. gitlab-pages/website/versioned_sidebars/. gitlab-pages/website/versions.json tools/webide/Dockerfile
    - git commit -m "[Bot] Docs $RELEASE_VERSION"
    - git push -o ci.skip origin HEAD:$CI_COMMIT_REF_NAME
  rules:
    - if: ($CI_COMMIT_BRANCH =~ /^release/ &&  $TRIGGER_DOC_UPDATE != null )
      when: always

update-gitpod-ligo-version:
  stage: release
  variables:
    NEW_VERSION: ${CI_COMMIT_BRANCH#"release/"}
  trigger: 
    project: ligolang/template-ligo
  rules:
    - if: ($CI_COMMIT_BRANCH =~ /^release/ &&  $TRIGGER_DOC_UPDATE != null )
      when: always

create-doc-update-MR:
  stage: release
  dependencies:
    - release-update-versionned-doc
  script:
    - HOST=${CI_PROJECT_URL} CI_PROJECT_ID=${CI_PROJECT_ID} CI_COMMIT_REF_NAME=${CI_COMMIT_REF_NAME} PRIVATE_TOKEN=${TOKEN_API} ./.ci/scripts/auto_merge_request.sh
  rules:
    - if: ($CI_COMMIT_BRANCH =~ /^release/ &&  $TRIGGER_DOC_UPDATE != null )
      when: always
