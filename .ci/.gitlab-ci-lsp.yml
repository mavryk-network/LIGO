## LSP/Squirrel

include:
  - '/.ci/.gitlab-ci-tools-common.yml'

variables:
  OCTEZ_VERSION: "v16.1"

vscode-extension-test:
  stage: tools-check
  rules: &vscode_extension_mr_dev
    - !reference [.vscode_extension_mr_changes]
    - !reference [.dev]
  needs: [docker_extract]
  script:
    - docker build --build-arg OCTEZ_VERSION="$OCTEZ_VERSION" -f tools/vscode/Dockerfile -t lsp-vscode-test:$CI_JOB_ID .
    - docker run --rm --init --user vscode lsp-vscode-test:$CI_JOB_ID xvfb-run bash -c 'yarn && yarn run package && yarn run test'
  after_script:
    - docker image rm lsp-vscode-test:$CI_JOB_ID

vscode-extension-extest:
  stage: tools-check
  rules: *vscode_extension_mr_dev
  needs: [docker_extract]
  script:
    - docker build --build-arg OCTEZ_VERSION="$OCTEZ_VERSION" -f tools/vscode/Dockerfile -t lsp-vscode-test:$CI_JOB_ID .
    - docker run --rm --init --user vscode lsp-vscode-test:$CI_JOB_ID xvfb-run bash -c 'yarn && yarn run package && yarn run extest'
  after_script:
    - docker image rm lsp-vscode-test:$CI_JOB_ID

vscode-extension-extest-deploy:
  stage: tools-check
  rules: *vscode_extension_mr_dev
  needs: [docker_extract]
  script:
    - docker build --build-arg OCTEZ_VERSION="$OCTEZ_VERSION" -f tools/vscode/Dockerfile -t lsp-vscode-test:$CI_JOB_ID .
    - docker run --rm --init --user vscode lsp-vscode-test:$CI_JOB_ID xvfb-run bash -c 'yarn && yarn run package && yarn run extest-deploy'
  after_script:
    - docker image rm lsp-vscode-test:$CI_JOB_ID
  allow_failure: true

vscode-extension-publish-check:
  stage: tools-check
  rules: *vscode_extension_mr_dev
  needs: []
  script:
    - nix flake $FLAKE_FLAGS check ./tools/vsce

emacs-lsp-client-test:
  stage: tools-check
  tags:
    - docker
  image: silex/emacs:27.2-ci-cask
  variables:
    EMACS: "emacs-27.2"
  rules:
    - !reference [.dev]
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
      - tools/emacs/**/*
  needs: [docker_extract]
  script:
    # Add ligo to path
    - export PATH=$PWD:$PATH
    - cd tools/emacs
    - cask install
    - cask emacs --batch -L . -l tests/configuration-test.el -f ert-run-tests-batch

vscode-lsp-extension:
  stage: tooling
  rules:
    - !reference [.vscode_extension_mr_changes]
    - !reference [.dev]
    - !reference [.vscode_production]
  needs: []
  script:
    - nix build $FLAKE_FLAGS ./tools/vscode#vscode-extension
    - cp -Lr --no-preserve=mode,ownership,timestamps result/*.vsix ligo-extension.vsix
  artifacts:
    paths:
      - ligo-extension.vsix

vscode-lsp-extension-publish:
  stage: push
  rules:
    - !reference [.vscode_production]
  needs: [vscode-lsp-extension]
  when: manual
  script:
    - nix develop ./tools/vsce --command vsce publish --packagePath *.vsix # Uses VSCE_PAT env variable as personal access token
    - nix develop ./tools/vsce --command ovsx publish *.vsix # Uses OVSX_PAT env variable as personal access token
