esy-windows:
  extends: .submodule-clone
  tags:
    - windows
  stage: build
  variables:
    GIT_STRATEGY: clone
  rules:
    - if: '$CI_COMMIT_REF_NAME == "dev" && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
    - if: '$CI_COMMIT_TAG =~ /[0-9]+\.[0-9]+\.[0-9]/ && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_PROJECT_PATH == "ligolang/ligo"'
      changes:
        - esy.json
        - esy.lock/index.json
        - dune
      when: always
  script:
    - git config http.postBuffer 1048576000
    - npm i -g @esy-nightly/esy --force
    - $env:PATH = 'C:\Program Files (x86)\NSIS;C:\Program Files\Git\bin;C:\Users\gitlabrunner\AppData\Roaming\npm;' + $env:PATH
    - $env:HOME = 'C:/Users/gitlabrunner'
    - git submodule foreach --recursive git reset --hard; git submodule update --init --recursive # ensure previously applied patch is removed
    - bash -c "patch -p1 < 001-tezos-deps-via-esy.patch"
    - esy i
    - bash -c "esy release || esy release || esy release"
    - rm -Recurse -Force _esy
    - git submodule foreach --recursive git reset --hard; git submodule update --init --recursive # ensure previously applied patch is removed
    - cp ./windows-installer/*.dll _release/bin/
    - cp ./tools/webide-new/ligo-webide-frontend/ligo-ide/public/favicon.ico ./_release
    - cp ./windows-installer/WindowsInstaller.nsi _release
    - cd _release; makensis .\WindowsInstaller.nsi
    - cd .. ; mv _release platform-windows-x64
    # ligo_installer is not useful inside package and if ligo_installer.exe is inside package, the package can't be uploaded.
    - mv platform-windows-x64/ligo_installer.exe ligo_installer.exe 
  artifacts:
    paths:
      - platform-windows-x64
      - ligo_installer.exe 

publish_npm_windows_x86:
  stage: push
  needs:
    - job: esy-windows
      artifacts: true
  rules:
    - if: '$CI_COMMIT_REF_NAME == "dev" && $CI_PROJECT_PATH == "ligolang/ligo"'
      changes:
        - src/**/*
      when: always
    - if: '$CI_COMMIT_TAG =~ /[0-9]+\.[0-9]+\.[0-9]/ && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_PROJECT_PATH == "ligolang/ligo"'
      changes:
        - esy.json
        - esy.lock/index.json
      when: always
  script:
    - |      
      if [[ $CI_COMMIT_REF_NAME == "dev" ]]; then
        SUFFIX=-dev
      fi
    - cd platform-windows-x64
    - chmod 664 package.json
    - VERSION=$(../.ci/scripts/versioning/determine_esy_version.sh package.json windows)
    - status=0 ; ../.ci/scripts/versioning/update_esy_version.sh package.json $VERSION ; npm publish --access public --tag windows$SUFFIX || status=1
    - echo "ligo_npm_build_status $status" | curl --data-binary @- -u '$PROM_PUSH_AUTH' https://pushgateway.prometheus.gcp.marigold.dev/metrics/job/ligo-build-short/branch/$CI_COMMIT_TAG/arch/windows-x86

esy-macos-darwin:
  extends: .submodule-clone
  tags:
    - mac
    - i7
  stage: build
  variables:
    GIT_STRATEGY: clone
  rules:
    - if: '$CI_COMMIT_REF_NAME == "dev" && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
    - if: '$CI_COMMIT_TAG =~ /[0-9]+\.[0-9]+\.0/ && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_PROJECT_PATH == "ligolang/ligo"'
      changes:
        - esy.json
        - esy.lock/index.json
      when: always
  script:
    - mkdir -p ~/.npm
    - npm config set prefix '~/.npm'
    - export PATH=~/.npm/bin:$PATH
    - npm i -g @esy-nightly/esy --force
    - git submodule foreach --recursive git reset --hard; git submodule update --init --recursive # ensure previously applied patch is removed
    - bash -c "patch -p1 --force < 0001-Removes-problematic-sh-script-on-macos.patch"
    - esy i
    - esy release
    - mv _release platform-darwin
    - git submodule foreach --recursive git reset --hard; git submodule update --init --recursive # ensure previously applied patch is removed
  artifacts:
    paths:
      - platform-darwin

publish_npm_darwin:
  stage: push
  needs:
    - job: esy-macos-darwin
      artifacts: true
  rules:
    - if: '$CI_COMMIT_REF_NAME == "dev" && $CI_PROJECT_PATH == "ligolang/ligo"'
      changes:
        - src/**/*
      when: always
    - if: '$CI_COMMIT_TAG =~ /[0-9]+\.[0-9]+\.[0-9]/ && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_PROJECT_PATH == "ligolang/ligo"'
      changes:
        - esy.json
        - esy.lock/index.json
      when: always
  script:
    - |      
      if [[ $CI_COMMIT_REF_NAME == "dev" ]]; then
        SUFFIX=-dev
      fi
    - cd platform-darwin
    - chmod 664 package.json
    - VERSION=$(../.ci/scripts/versioning/determine_esy_version.sh package.json macos-intel)
    - status=0 ; ../.ci/scripts/versioning/update_esy_version.sh package.json $VERSION ; npm publish --access public --tag macos-intel$SUFFIX || status=1
    - echo "ligo_npm_build_status $status" | curl --data-binary @- -u '$PROM_PUSH_AUTH' https://pushgateway.prometheus.gcp.marigold.dev/metrics/job/ligo-build-short/branch/$CI_COMMIT_TAG/arch/darwin

esy-macos-m1:
  extends: .submodule-clone
  tags:
    - mac
    - m1
  stage: build
  variables:
    GIT_STRATEGY: clone
  rules:
    - if: '$CI_COMMIT_REF_NAME == "dev" && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
    - if: '$CI_COMMIT_TAG =~ /[0-9]+\.[0-9]+\.[0-9]/ && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_PROJECT_PATH == "ligolang/ligo"'
      changes:
        - esy.json
        - esy.lock/index.json
      when: always
  script:
    - mkdir -p ~/.npm
    - brew install node
    - npm config set prefix '~/.npm'
    - export PATH=~/.npm/bin:$PATH
    - npm i -g esy@beta --force
    - git submodule foreach --recursive git reset --hard; git submodule update --init --recursive # ensure previously applied patch is removed
    - bash -c "patch -p1 --force < 0001-Removes-problematic-sh-script-on-macos.patch"
    - esy i
    - esy release
    - mv _release platform-darwin-arm64
    - git submodule foreach --recursive git reset --hard; git submodule update --init --recursive # ensure previously applied patch is removed
  artifacts:
    paths:
      - platform-darwin-arm64

publish_npm_darwin_arm64:
  stage: push
  needs:
    - job: esy-macos-m1
      artifacts: true
  rules:
    - if: '$CI_COMMIT_REF_NAME == "dev" && $CI_PROJECT_PATH == "ligolang/ligo"'
      changes:
        - src/**/*
      when: always
    - if: '$CI_COMMIT_TAG =~ /[0-9]+\.[0-9]+\.[0-9]/ && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_PROJECT_PATH == "ligolang/ligo"'
      changes:
        - esy.json
        - esy.lock/index.json
      when: always
  script:
    - |      
      if [[ $CI_COMMIT_REF_NAME == "dev" ]]; then
        SUFFIX=-dev
      fi
    - cd platform-darwin-arm64
    - chmod 664 package.json
    - VERSION=$(../.ci/scripts/versioning/determine_esy_version.sh package.json macos-m1)
    - status=0  ; ../.ci/scripts/versioning/update_esy_version.sh package.json $VERSION ; npm publish --access public --tag macos-m1$SUFFIX || status=1
    - echo "ligo_npm_build_status $status" | curl --data-binary @- -u '$PROM_PUSH_AUTH' https://pushgateway.prometheus.gcp.marigold.dev/metrics/job/ligo-build-short/branch/$CI_COMMIT_TAG/arch/darwin-arm64

publish_ligojs:
  stage: push
  needs:
    - job: docker_build
      artifacts: true
  rules:
    - if: '$CI_COMMIT_REF_NAME == "dev" && $CI_PROJECT_PATH == "ligolang/ligo"'
      changes:
        - src/**/*
      when: always
    - if: '$CI_COMMIT_TAG =~ /[0-9]+\.[0-9]+\.[0-9]/ && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
  script:
    - |      
      if [[ $CI_COMMIT_REF_NAME == "dev" ]]; then
        SUFFIX=-dev
      fi
    - cd ./ligo-npm
    - chmod 664 package.json
    - VERSION=$(../.ci/scripts/versioning/determine_esy_version.sh package.json windows)
    - status=0 ; ../.ci/scripts/versioning/update_esy_version.sh package.json $VERSION ; npm publish --access public || status=1
