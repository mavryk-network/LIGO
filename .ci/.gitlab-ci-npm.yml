esy-windows:
  tags:
    - windows
  stage: build
  needs: []
  interruptible: true
  variables:
    GIT_STRATEGY: clone
  rules:
    - if: '$CI_COMMIT_REF_NAME == "dev" && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
    - if: '$CI_COMMIT_TAG =~ /[0-9]+\.[0-9]+\.[0-9]/ && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_train" && $CI_PROJECT_PATH == "ligolang/ligo"'
      changes:
        - esy.json
        - esy.lock/index.json
        - ligo.opam
        - dune
      when: always
  script:
    - git submodule update --init --recursive
    - git config http.postBuffer 1048576000
    - $env:PATH = 'C:\Program Files (x86)\NSIS;C:\Program Files\Git\bin;C:\Users\gitlabrunner\AppData\Roaming\npm;' + $env:PATH
    - $env:HOME = 'C:/Users/gitlabrunner'
    - $env:ESY__PREFIX = $env:HOME + '/.esy-nairobi'
    - git submodule foreach --recursive git reset --hard; git submodule update --init --recursive # ensure previously applied patch is removed
    - bash -c "patch -p1 < 001-tezos-deps-via-esy.patch"
    - esy i
    - bash -c "patch -p1 -R < 001-tezos-deps-via-esy.patch" # So that dune runtest doesn't run tezos tests
    - bash -c "esy b dune runtest || esy b dune runtest || esy b dune runtest"
    - bash -c "patch -p1 < 001-tezos-deps-via-esy.patch"
    - bash -c "esy b --install || esy b --install || esy b --install"
    - cp ./_build/install/default/bin/ligo.exe ./windows-installer
    - cp ./LICENSE.md ./windows-installer
    - cp ./tools/webide-new/ligo-webide-frontend/ligo-ide/public/favicon.ico ./windows-installer
    - cd windows-installer; makensis .\WindowsInstaller.nsi; mv ligo_installer.exe ../ligo_installer.exe ; cd ..
    - bash -c "esy release || esy release || esy release"
    - git submodule foreach --recursive git reset --hard; git submodule update --init --recursive # ensure previously applied patch is removed
    - mv _release platform-windows-x64
  artifacts:
    paths:
      - platform-windows-x64
      - ligo_installer.exe 

esy-test-windows:
  tags:
    - windows
  stage: test
  allow_failure: true
  needs:
    - job: esy-windows
      artifacts: true
  rules:
    - if: '$CI_COMMIT_REF_NAME == "dev" && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
    - if: '$CI_COMMIT_TAG =~ /[0-9]+\.[0-9]+\.[0-9]/ && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_train" && $CI_PROJECT_PATH == "ligolang/ligo"'
      changes:
        - esy.json
        - esy.lock/index.json
        - ligo.opam
        - dune
      when: always
  script:
    - ls
    - $env:PATH = 'C:\Program Files (x86)\NSIS;C:\Program Files\Git\bin;C:\Users\gitlabrunner\AppData\Roaming\npm;' + $env:PATH
    - $env:HOME = 'C:/Users/gitlabrunner'
    - cd ./platform-windows-x64; npm pack; bash -c "npm i -g ./ligolang-$(jq -r .version ../esy.json).tgz --force"; cd ..
    - bash -c "sh scripts/esy-multiplat-e2e-ci.sh"

publish_npm_windows_x86:
  stage: push
  allow_failure: true
  needs:
    - job: esy-windows
      artifacts: true
    - job: esy-test-windows
      artifacts: false
  rules:
    - if: '$CI_COMMIT_REF_NAME == "dev" && $CI_PROJECT_PATH == "ligolang/ligo"'
      changes:
        - src/**/*
      when: always
    - if: '$CI_COMMIT_TAG =~ /[0-9]+\.[0-9]+\.[0-9]/ && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
  script:
    - |      
      if [[ $CI_COMMIT_REF_NAME == "dev" ]]; then
        SUFFIX=-dev
      fi
    - cd platform-windows-x64
    - chmod 664 package.json
    - VERSION=$(../.ci/scripts/versioning/determine_esy_version.sh package.json windows)
    - status=0 ; ../.ci/scripts/versioning/update_esy_version.sh package.json $VERSION ; npm publish --access public --tag windows$SUFFIX || status=1
    - echo "ligo_npm_build_status $status" | curl --data-binary @- -u '$PROM_PUSH_AUTH' https://pushgateway.prometheus.gcp.marigold.dev/metrics/job/ligo-build-short/branch/$CI_COMMIT_TAG/arch/windows-x86

esy-macos-intel:
  extends: .submodule-clone
  tags:
    - mac
    - i7
  stage: build
  needs: []
  variables:
    GIT_STRATEGY: clone
  rules:
    - if: '$CI_COMMIT_REF_NAME == "dev" && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
    - if: '$CI_COMMIT_TAG =~ /[0-9]+\.[0-9]+\.[0-9]/ && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_PROJECT_PATH == "ligolang/ligo"'
      changes:
        - esy.json
        - esy.lock/index.json
        - ligo.opam
        - dune
      when: always
  script:
    - mkdir -p ~/.npm
    - npm config set prefix '~/.npm'
    - export PATH=~/.npm/bin:$PATH
    - git submodule foreach --recursive git reset --hard; git submodule update --init --recursive # ensure previously applied patch is removed
    - env ESY__PREFIX=$HOME/.esy-nairobi esy i
    - env ESY__PREFIX=$HOME/.esy-nairobi esy release
    - mv _release platform-darwin
    - git submodule foreach --recursive git reset --hard; git submodule update --init --recursive # ensure previously applied patch is removed
  artifacts:
    paths:
      - platform-darwin

esy-test-macos-intel:
  stage: test
  tags:
    - mac
    - i7
  rules:
    - if: '$CI_COMMIT_REF_NAME == "dev" && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
    - if: '$CI_COMMIT_TAG =~ /[0-9]+\.[0-9]+\.[0-9]/ && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_PROJECT_PATH == "ligolang/ligo"'
      changes:
        - esy.json
        - esy.lock/index.json
        - ligo.opam
        - dune
      when: always
  needs:
    - job: esy-macos-intel
      artifacts: true
  script:
    - mkdir -p ~/.npm
    - npm config set prefix '~/.npm'
    - export PATH=~/.npm/bin:$PATH
    - npm i --force -g ./platform-darwin
    - sh scripts/esy-multiplat-e2e-ci.sh

publish_npm_darwin_x86_64:
  stage: push
  needs:
    - job: esy-macos-intel
      artifacts: true
    - job: esy-test-macos-intel
      artifacts: false
  rules:
    - if: '$CI_COMMIT_REF_NAME == "dev" && $CI_PROJECT_PATH == "ligolang/ligo"'
      changes:
        - src/**/*
      when: always
    - if: '$CI_COMMIT_TAG =~ /[0-9]+\.[0-9]+\.[0-9]/ && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
  script:
    - |      
      if [[ $CI_COMMIT_REF_NAME == "dev" ]]; then
        SUFFIX=-dev
      fi
    - cd platform-darwin
    - chmod 664 package.json
    - VERSION=$(../.ci/scripts/versioning/determine_esy_version.sh package.json macos-intel)
    - status=0 ; ../.ci/scripts/versioning/update_esy_version.sh package.json $VERSION ; npm publish --access public --tag macos-intel$SUFFIX || status=1
    - echo "ligo_npm_build_status $status" | curl --data-binary @- -u '$PROM_PUSH_AUTH' https://pushgateway.prometheus.gcp.marigold.dev/metrics/job/ligo-build-short/branch/$CI_COMMIT_TAG/arch/darwin

esy-macos-m1:
  extends: .submodule-clone
  tags:
    - mac
    - m1
  stage: build
  needs: []
  variables:
    GIT_STRATEGY: clone
  rules:
    - if: '$CI_COMMIT_REF_NAME == "dev" && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
    - if: '$CI_COMMIT_TAG =~ /[0-9]+\.[0-9]+\.[0-9]/ && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_PROJECT_PATH == "ligolang/ligo"'
      changes:
        - esy.json
        - esy.lock/index.json
        - ligo.opam
        - dune
      when: always
  script:
    - mkdir -p ~/.npm
    - brew install node
    - npm config set prefix '~/.npm'
    - export PATH=~/.npm/bin:$PATH
    - git submodule foreach --recursive git reset --hard; git submodule update --init --recursive # ensure previously applied patch is removed
    - env ESY__PREFIX=$HOME/.esy-nairobi esy i
    - env ESY__PREFIX=$HOME/.esy-nairobi esy release
    - mv _release platform-darwin-arm64
    - git submodule foreach --recursive git reset --hard; git submodule update --init --recursive # ensure previously applied patch is removed
  artifacts:
    paths:
      - platform-darwin-arm64

esy-test-macos-m1:
  stage: test
  tags:
    - mac
    - m1
  rules:
    - if: '$CI_COMMIT_REF_NAME == "dev" && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
    - if: '$CI_COMMIT_TAG =~ /[0-9]+\.[0-9]+\.[0-9]/ && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_PROJECT_PATH == "ligolang/ligo"'
      changes:
        - esy.json
        - esy.lock/index.json
        - ligo.opam
        - dune
      when: always
  needs:
    - job: esy-macos-m1
      artifacts: true
  script:
    - mkdir -p ~/.npm
    - npm config set prefix '~/.npm'
    - export PATH=~/.npm/bin:$PATH
    - npm i --force -g ./platform-darwin-arm64
    - sh scripts/esy-multiplat-e2e-ci.sh

publish_npm_darwin_arm64:
  stage: push
  needs:
    - job: esy-macos-m1
      artifacts: true
    - job: esy-test-macos-m1
      artifacts: false
  rules:
    - if: '$CI_COMMIT_REF_NAME == "dev" && $CI_PROJECT_PATH == "ligolang/ligo"'
      changes:
        - src/**/*
      when: always
    - if: '$CI_COMMIT_TAG =~ /[0-9]+\.[0-9]+\.[0-9]/ && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
  script:
    - |      
      if [[ $CI_COMMIT_REF_NAME == "dev" ]]; then
        SUFFIX=-dev
      fi
    - cd platform-darwin-arm64
    - chmod 664 package.json
    - VERSION=$(../.ci/scripts/versioning/determine_esy_version.sh package.json macos-m1)
    - status=0  ; ../.ci/scripts/versioning/update_esy_version.sh package.json $VERSION ; npm publish --access public --tag macos-m1$SUFFIX || status=1
    - echo "ligo_npm_build_status $status" | curl --data-binary @- -u '$PROM_PUSH_AUTH' https://pushgateway.prometheus.gcp.marigold.dev/metrics/job/ligo-build-short/branch/$CI_COMMIT_TAG/arch/darwin-arm64

test_ligojs:
  tags:
    - docker
  image: node:20
  stage: push
  needs:
    - job: docker_build
      artifacts: true
  rules:
    - if: '$CI_COMMIT_REF_NAME == "dev" && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
    - if: '$CI_COMMIT_TAG =~ /[0-9]+\.[0-9]+\.[0-9]/ && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
  script:
    - apt-get update
    - apt-get install -yq gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libnss3 lsb-release xdg-utils wget nodejs
    - cd jsoo; env PUPPETEER_PRODUCT=firefox npm i; env JSOO_DIST_DIR=$PWD/ligo-demo-ide node ./test/pptr.mjs

publish_ligojs:
  stage: push
  needs:
    - job: docker_build
      artifacts: true
    - job: test_ligojs
      artifacts: false
  rules:
    - if: '$CI_COMMIT_REF_NAME == "dev" && $CI_PROJECT_PATH == "ligolang/ligo"'
      changes:
        - src/**/*
      when: always
    - if: '$CI_COMMIT_TAG =~ /[0-9]+\.[0-9]+\.[0-9]/ && $CI_PROJECT_PATH == "ligolang/ligo"'
      when: always
  script:
    - |      
      if [[ $CI_COMMIT_REF_NAME == "dev" ]]; then
        SUFFIX=-dev
      fi
    - cd ./ligo-npm
    - chmod 664 package.json
    - VERSION=$(../.ci/scripts/versioning/determine_esy_version.sh package.json web)
    - status=0 ; ../.ci/scripts/versioning/update_esy_version.sh package.json $VERSION ; npm publish --access public || status=1
