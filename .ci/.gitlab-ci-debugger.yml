## Debugger

include:
  - '/.ci/.gitlab-ci-tools-common.yml'

# Reads ligo version from 'LIGO_VERSION_FILE' env variable,
# gets ligo binary from the corresponding release, and does
# 'git add ligo' to make binary available for flake.
.get_release_ligo_binary: &get_release_ligo_binary
  # strip all comments form the version file and grep for version
  - ligo_version="$(cat "$LIGO_VERSION_FILE" | sed '/^#/d' | grep -E '([0-9]{1,}\.)+[0-9]{1,}')"
  - ligo_link="$(nix-shell --packages curl jq --run
      "curl --silent https://gitlab.com/api/v4/projects/ligolang%2Fligo/releases/"$ligo_version"/assets/links |
      jq -r '.[] | select(.name == \"Static Linux binary\") | .direct_asset_url'")"
  - nix-shell --packages wget --run "wget --quiet -O ligo "$ligo_link""
  - chmod +x ligo
  - ./ligo --version
  - git add ./ligo

# This one is supposed to be used for jobs that want to use ligo binary from
# 'ligo-build' job and have 'needs: [ ligo-build ]'. This script basically
# does 'git add ligo' to make binary available for flake.
.get_latest_ligo_binary: &get_latest_ligo_binary
  - git add ./ligo

# This one runs 'ligo-debugger-test' with flags in 'LIGO_TEST_FLAGS' env variable.
.run_ligo_debugger_tests: &run_ligo_debugger_tests
  # Gitlab CI terminal has 'TERM=dumb' environment variable.
  # Guys from LIGO are using pretty-printing from 'ligo-utils' library.
  # As you can see here (https://gitlab.com/serokell/ligo/ligo/-/blob/tooling/vendors/ligo-utils/simple-utils/snippet.ml#L15)
  # if 'is_dumb' is true then we won't see any ANSI color sequences.
  # However, we have some tests that rely on colored output, so, we want to disable this var.
  - unset TERM
  - export LIGO_BINARY_PATH=$PWD/ligo
  - cd ./tools/debugger
  - nix build $FLAKE_FLAGS .#tests.x86_64-linux.ligo-debugger-test
  - cd ligo-debugger && ../result/bin/ligo-debugger-test $LIGO_TEST_FLAGS

debugger-danger-instant-checks:
  stage: tools-precheck
  rules: &debugger_danger_checks
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - tools/debugger/**/*
        - danger/**/*
  needs: []
  allow_failure: true
  interruptible: true
  script:
    - nix develop ./tools/debugger#ci -c danger --fail-on-errors=true
        --dangerfile=./danger/instant-checks.rb
        --danger_id=instant

debugger-danger-hlint:
  stage: tools-precheck
  rules: *debugger_danger_checks
  needs: []
  interruptible: true
  script:
    - nix develop ./tools/debugger#ci -c danger --fail-on-errors=true
        --dangerfile=./danger/hlint.rb
        --danger_id=hlint

debugger-danger-premerge-checks:
  stage: tools-check
  rules: *debugger_danger_checks
  needs: ["debugger-danger-instant-checks"]  # To get messages in MRs ordered right
  when: always
  interruptible: true
  script:
    - nix develop ./tools/debugger#ci -c danger --fail-on-errors=true
        --dangerfile=./danger/premerge-checks.rb
        --danger_id=premerge
  allow_failure: true

debugger-build:
  stage: tools-build
  rules: &debugger_mr_dev
    - !reference [.debugger_mr_changes]
    - !reference [.dev]
  needs: []
  script:
    - nix build $FLAKE_FLAGS ./tools/debugger#packages.x86_64-linux.ligo-debugger

debugger-weeder:
  stage: tools-check
  rules: *debugger_mr_dev
  needs: [debugger-build]
  script:
    - cd ./tools/debugger
    - nix build $FLAKE_FLAGS .#packages.x86_64-linux.weeder-script
    - ./result

debugger-test-ligo-recommended:
  stage: tools-check
  rules:
    - !reference [.vscode_production]
  needs: [debugger-build]
  variables:
    LIGO_VERSION_FILE: "./tools/debugger/ligo-debugger/src/resources/versions/recommended"
    LIGO_TEST_FLAGS: "-r"
  before_script: *get_release_ligo_binary
  script: *run_ligo_debugger_tests

debugger-test-ligo-latest:
  stage: tools-check
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
  needs: [docker_extract]
  variables:
    LIGO_TEST_FLAGS: "-r"
  before_script: *get_latest_ligo_binary
  script: *run_ligo_debugger_tests

debugger-test-static-debugger-binary:
  stage: tools-check
  rules: *debugger_mr_dev
  needs: [debugger-build]
  script:
    - nix build $FLAKE_FLAGS ./tools/debugger#ligo-debugger-static
    # 'ldd' returns non-zero exit code when binary is not dynamically linked, so || true is needed
    # to workaround 'pipefail'
    - (ldd ./result/bin/ligo-debugger || true) 2>&1 | grep -q "not a dynamic executable"

debugger-test-ligo-minimal-supported:
  stage: push
  rules:
    - !reference [.vscode_production]
  needs: []
  when: manual
  variables:
    LIGO_VERSION_FILE: "./tools/debugger/ligo-debugger/src/resources/versions/minimal-supported"
    LIGO_TEST_FLAGS: "-r -m"
  before_script: *get_release_ligo_binary
  script: *run_ligo_debugger_tests
  allow_failure: true
