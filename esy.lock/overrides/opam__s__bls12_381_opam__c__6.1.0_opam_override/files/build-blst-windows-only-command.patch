--- ./src/build_blst.sh
+++ ./src/build_blst.sh
@@ -15,18 +15,30 @@
 # supporting ADX on a arch supporting ADX.
 
 cd libblst
-# If the user does not want to build with assembly optimisations, regardless
-# the platform
-if [ -n "${BLST_PORTABLE}" ]; then
-    echo "(-D__BLST_PORTABLE__)" > ../c_flags_blst.sexp
-    ./build.sh -shared -Wno-missing-braces -D__BLST_PORTABLE__
-# If the architecture is x86_64 or arm64, we build with the default flags.
-elif [[ $(uname -m) == "x86_64" || $(uname -m) == "arm64" || $(uname -m) == "amd64" || $(uname -m) == "aarch64" ]]; then
-    echo "()" > ../c_flags_blst.sexp
-    ./build.sh -shared -Wno-missing-braces
-# By default, we build without any assembly instruction and rely on the C
-# compiler
-else
-    echo "()" > ../c_flags_blst.sexp
-    ./build.sh -shared -Wno-missing-braces -D__BLST_NO_ASM__
-fi
+build_for_unix() {
+    # If the user does not want to build with assembly optimisations, regardless
+    # the platform
+    if [ -n "${BLST_PORTABLE}" ]; then
+	echo "(-D__BLST_PORTABLE__)" > ../c_flags_blst.sexp
+	./build.sh -shared -Wno-missing-braces -D__BLST_PORTABLE__
+    # If the architecture is x86_64 or arm64, we build with the default flags.
+    elif [[ $(uname -m) == "x86_64" || $(uname -m) == "arm64" || $(uname -m) == "amd64" || $(uname -m) == "aarch64" ]]; then
+	echo "()" > ../c_flags_blst.sexp
+	./build.sh -shared -Wno-missing-braces
+    # By default, we build without any assembly instruction and rely on the C
+    # compiler
+    else
+	echo "()" > ../c_flags_blst.sexp
+	./build.sh -shared -Wno-missing-braces -D__BLST_NO_ASM__
+    fi
+}
+
+
+case "$(uname -s)" in
+    CYGWIN*|MINGW32*|MSYS*)
+	echo "()" > ../c_flags_blst.sexp
+	./build.sh flavour=mingw64 CC=x86_64-w64-mingw32-gcc "-shared"
+        ;;
+    *)
+    build_for_unix
+esac
