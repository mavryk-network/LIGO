(* Making parsers from a variety of input using Menhir. *)

(* Vendor dependencies *)

module Region = Simple_utils.Region
module Utils  = Simple_utils.Utils

(* Generic signature of tokens *)

module type TOKEN =
  sig
    type token
    type t = token

    val to_lexeme : token -> string
    val to_string : offsets:bool -> [`Byte | `Point] -> token -> string
    val to_region : token -> Region.t
    val is_eof    : token -> bool
    val mk_eof    : Region.t -> token
  end

(* Generic signature of input lexers *)

module type LEXER =
  sig
    module Token : TOKEN
    type token = Token.t

    type message = string Region.reg

    val scan : Lexing.lexbuf -> (token, message) Stdlib.result

    type window = <
      last_token    : token option;
      current_token : token           (* Including EOF *)
    >

    val get_window : unit -> window option
  end

(* The signature generated by Menhir with an additional type
   definition for [tree]. *)

module type PARSER =
  sig
    type token
    type tree

    (* The monolithic API. *)

    exception Error

    val main : (Lexing.lexbuf -> token) -> Lexing.lexbuf -> tree

    (* The incremental API. *)


    module MenhirInterpreter : MenhirLib.IncrementalEngine.EVERYTHING
           with type token = token

    module Incremental :
      sig
        val main :
          Lexing.position -> tree MenhirInterpreter.checkpoint
      end

    (* The recovery API. *)

    module Recovery :
      sig
        include Merlin_recovery.RECOVERY_GENERATED
                with module I := MenhirInterpreter

        module Default :
          sig
            val default_loc : Region.t ref
          end
      end
  end

(* Mappimg from error states in the LR automaton generated by Menhir
   to error messages (incremental API of Menhir) *)

module type PAR_ERR =
  sig
    val message : int -> string
  end

(* Debug setting *)

module type DEBUG_CONFIG =
  sig
    (* Enable debug printing in the recovery algorithm *)
    val error_recovery_tracing : bool
    (* Path to a log file or [None] that means to use stdout *)
    val tracing_output         : string option
  end

(* The functor integrating the parser with its errors *)

module Make (Lexer  : LEXER)
            (Parser : PARSER with type token = Lexer.token)
            (Debug  : DEBUG_CONFIG) :
  sig
    type token = Lexer.token

    type message = string Region.reg

    type 'src parser =
      'src -> (Parser.tree, message) Stdlib.result

    val get_window : unit -> Lexer.window

    (* Monolithic API of Menhir *)

    type file_path = string

    val mono_from_lexbuf  : Lexing.lexbuf parser
    val mono_from_channel : in_channel    parser
    val mono_from_string  : string        parser
    val mono_from_file    : file_path     parser

    (* Incremental API of Menhir *)

    val incr_from_lexbuf  : (module PAR_ERR) -> Lexing.lexbuf parser
    val incr_from_channel : (module PAR_ERR) -> in_channel    parser
    val incr_from_string  : (module PAR_ERR) -> string        parser
    val incr_from_file    : (module PAR_ERR) -> file_path     parser

    (* Incremental API with recovery *)

    type 'src recovery_parser =
      'src -> (Parser.tree * message list, message Utils.nseq) Stdlib.result
    (* returns [Ok (tree, [])] if ['src] contains correct contract
            or [Ok (repaired_tree, errors)] if any syntax error was encountered
            or [Error (errors)] if non-syntax error happened and we cannot
               return any tree (e. g. file does not found or lexer error) *)

    val extract_recovery_results
        :  (Parser.tree * message list, message Utils.nseq) Stdlib.result
        -> Parser.tree option * message list
    (* helper function that converts original type to weaker one *)

    val recov_from_lexbuf  : (module PAR_ERR) -> Lexing.lexbuf recovery_parser
    val recov_from_channel : (module PAR_ERR) -> in_channel    recovery_parser
    val recov_from_string  : (module PAR_ERR) -> string        recovery_parser
    val recov_from_file    : (module PAR_ERR) -> file_path     recovery_parser
  end
