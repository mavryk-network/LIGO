pattern matching
- step 1 
  - separate type checking from pattern compilation
  - abstractor fix allow type ascriptions for patterns & check types of patterns

   (* | (Nil , ys : myt * myt )  -> fr ys *)

(* typing : checking.ml
  1) write pattern_expr checking (matching_expr -> typed_matching_expr' ) & throw the result
    - fold into matchee type at the same type as the parterns , you add (var->type) binding in the typing context for all P_var .. and then you type the bodies
    - IN : patterns (as defined now) , OUT : typed_patterns
  2) remove all type_assert_eq in pattern_matching.ml (dune runtest should pass)
*)



(* case analysis : (optional : self_ast_typed )
  - src/test/contracts/deep_pattern_matching/pm_test.mligo
*)

(* pattern compilation (on typed_pattern) (Ast_typed -> Ast_cases) : Ast_typed  ; Ast_cases (new) ; Ast_aggregation *)

Case Analysis
- https://www.cl.cam.ac.uk/~nk480/pattern-popl09.pdfhttps://www.cl.cam.ac.uk/~nk480/pattern-popl09.pdf
- https://github.com/MLton/mlton/tree/master/mlton/match-compile